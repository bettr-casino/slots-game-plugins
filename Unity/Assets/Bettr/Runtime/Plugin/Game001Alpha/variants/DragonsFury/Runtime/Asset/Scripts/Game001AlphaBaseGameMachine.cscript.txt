require "math"
require "Core"
require "Game001AlphaBaseGameReel1"
require "Game001AlphaBaseGameReel2"
require "Game001AlphaBaseGameReel3"
require "Game001AlphaBaseGameReel4"
require "Game001AlphaBaseGameReel5"

Game001AlphaBaseGameMachine = {
}

function Game001AlphaBaseGameMachine:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game001AlphaBaseGameMachine:destroy()
	System.Print("Game001AlphaBaseGameMachine destroy tile id={0}", self.id)
end

function Game001AlphaBaseGameMachine:OnError(callStack)
	System.Error("Game001AlphaBaseGameMachine Error CallStack: {0}", callStack)
end

function Game001AlphaBaseGameMachine:Awake()
	System.Print("Game001AlphaBaseGameMachine Awake tile id={0}", self.id)
end

function Game001AlphaBaseGameMachine:Start()
    series
        do
	        self:ConfigureSettings()
	        self:ShowSettings()
	        self:PlayStartAnimations()
	        self:StartEngines()
        end
    end
end

function Game001AlphaBaseGameMachine:ConfigureSettings()
    self.CreditsText.SetText(BettrUser.Coins)
    self.WinText.SetText("0")       
    self.BetText.SetText(Game001AlphaBetMultiplierState.Current.First.BetMultiplier) 
end

function Game001AlphaBaseGameMachine:ShowSettings()
    series
        do
            local settings = self["Settings"]
            settings.SetActive(true)
        end
    end
end

function Game001AlphaBaseGameMachine:HideSettings()
    series
        do
            local settings = self["Settings"]
            settings.SetActive(false)
        end
    end
end

function Game001AlphaBaseGameMachine:ResetSettings()
    self.WinText.SetText("0")
end

function Game001AlphaBaseGameMachine:Update()
    local spinState = Game001AlphaBaseGameState.SpinState.First.State
    self.BaseGameStateDispatchTable[spinState](self)    
end

function Game001AlphaBaseGameMachine:BaseGameSpinning()    
end

function Game001AlphaBaseGameMachine:WaitingForFreeSpinsToComplete()    
end

function Game001AlphaBaseGameMachine:BaseGameFreeSpinsTriggering()
    Game001AlphaBaseGameState.SpinState.First.State = "WaitingForFreeSpinsToComplete"
    System.StartCoroutine(self, "FreeSpinsTrigger")
end

function Game001AlphaBaseGameMachine:WaitingForPayToComplete()    
end

function Game001AlphaBaseGameMachine:BaseGameWaysPaying()
    Game001AlphaBaseGameState.SpinState.First.State = "WaitingForPayToComplete"
    System.StartCoroutine(self, "BaseGamePayout")
end

function Game001AlphaBaseGameMachine:BaseGameWaiting()    
end

function Game001AlphaBaseGameMachine:BaseGameCompleted()
   self:ShowSettings()
   Game001AlphaBaseGameState.SpinState.First.State = "Waiting"
end

function Game001AlphaBaseGameMachine:FreeSpinsTrigger()
    series
        do
            local freeSpinsSummary = Game001AlphaBaseGameFreeSpinsTriggerSummary.FreeSpins
            if freeSpinsSummary == nil then
                self:OnBaseGameSpinCompleted()
            else
                local bn1Count = freeSpinsSummary.First.BN1Count
                local bn2Count = freeSpinsSummary.First.BN2Count
                local bn1bn2Count = freeSpinsSummary.First.BN1BN2Count
                -- clone all trigger symbols
                local animatorProperty = Game001AlphaBaseGameBackground["freespinstrigger"]                
                BettrVisualsController.PlayAnimatorProperty(animatorProperty)
                -- clone the free spin trigger symbols
                Game001AlphaMachineState.Current.First.FreeSpinsTriggerSymbols = {}
                local clonedSymbols = Game001AlphaMachineState.Current.First.FreeSpinsTriggerSymbols                                
                for i=1,#Game001AlphaBaseGameFreeSpinsTriggerMatrix parallel do
                    local triggerMatrix = Game001AlphaBaseGameFreeSpinsTriggerMatrix[i]
                    local triggerSymbol = triggerMatrix.Symbol
                    if triggerSymbol == "BN2" then
                        local reel = _G["Game001AlphaBaseGame" .. triggerMatrix.ReelID]
                        local clonedSymbol = reel:CloneAndOverlayCurrentSymbol(triggerMatrix.RowIndex)
                        table.insert(clonedSymbols, clonedSymbol)
                    end
                end
                local clonedSymbolsCount = #clonedSymbols
                local clonedSymbol = nil
                local tweenGroupProperty = self["FreeSpinsTriggerTweenEndPointsGroup"]
                parallel
                    do
                        if clonedSymbolsCount ~= 1 then
                            return
                        end 
                        clonedSymbol = clonedSymbols[1]                       
                        local middleProperty = tweenGroupProperty["Middle"]                                
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, middleProperty)
                        System.WaitForSeconds(middleProperty.tweenDuration)
                    end
                    do
                        if clonedSymbolsCount ~= 2 then
                            return
                        end                        
                        local leftProperty = tweenGroupProperty["Left"]
                        local rightProperty = tweenGroupProperty["Right"]  
                        clonedSymbol = clonedSymbols[1]                              
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, leftProperty)
                        clonedSymbol = clonedSymbols[2]
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, rightProperty)
                        System.WaitForSeconds(leftProperty.tweenDuration)
                    end
                    do
                        if clonedSymbolsCount ~= 3 then
                            return
                        end                        
                        local middleProperty = tweenGroupProperty["Middle"]                                
                        local leftProperty = tweenGroupProperty["Left"]
                        local rightProperty = tweenGroupProperty["Right"]
                        clonedSymbol = clonedSymbols[1]
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, middleProperty)
                        clonedSymbol = clonedSymbols[2]
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, leftProperty)
                        clonedSymbol = clonedSymbols[3]
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, rightProperty)
                        System.WaitForSeconds(leftProperty.tweenDuration)
                    end
                    do
                        if clonedSymbolsCount ~= 4 then
                            return
                        end                        
                        local topProperty = tweenGroupProperty["Top"]
                        local bottomProperty = tweenGroupProperty["Bottom"]                                
                        local leftProperty = tweenGroupProperty["Left"]
                        local rightProperty = tweenGroupProperty["Right"]
                        clonedSymbol = clonedSymbols[1]
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, topProperty)
                        clonedSymbol = clonedSymbols[2]
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, bottomProperty)
                        clonedSymbol = clonedSymbols[3]
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, leftProperty)
                        clonedSymbol = clonedSymbols[4]
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, rightProperty)
                        System.WaitForSeconds(leftProperty.tweenDuration)
                    end
                    do
                        if clonedSymbolsCount ~= 5 then
                            return
                        end
                        local middleProperty = tweenGroupProperty["Middle"]                        
                        local topProperty = tweenGroupProperty["Top"]
                        local bottomProperty = tweenGroupProperty["Bottom"]                                
                        local leftProperty = tweenGroupProperty["Left"]
                        local rightProperty = tweenGroupProperty["Right"]
                        clonedSymbol = clonedSymbols[1]
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, middleProperty)
                        clonedSymbol = clonedSymbols[2]
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, topProperty)
                        clonedSymbol = clonedSymbols[3]
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, bottomProperty)
                        clonedSymbol = clonedSymbols[4]
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, leftProperty)
                        clonedSymbol = clonedSymbols[5]
                        BettrVisualsController.TweenMoveBetween(clonedSymbol, rightProperty)
                        System.WaitForSeconds(leftProperty.tweenDuration)
                    end
                    do
                        local animatorProperty = self["free_spins_trigger_fade_in"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProperty)
                    end
                    do
                        self:HideSettings()
                    end
                end
                Game001Alpha:OnFreeSpinsTriggeringStarted()
            end
        end
    end
end

function Game001AlphaBaseGameMachine:OnFreeSpinsTriggeringCompleted()
    series
        do
            local animatorProperty = self["free_spins_trigger_fade_out"]
            BettrVisualsController.PlayAnimatorProperty(animatorProperty)
            self:OnBaseGameSpinCompleted()
        end
    end
end

function Game001AlphaBaseGameMachine:OnBaseGameSpinCompleted()
    series
        do
            Game001AlphaBaseGameState.SpinState.First.State = "Completed"
        end
    end
end

function Game001AlphaBaseGameMachine:BaseGamePayout()
    series
        do
            local waysSummary = Game001AlphaBaseGameWaysSummary.Ways.First
            local waysIndex = waysSummary.WaysIndex
            local waysCount = waysSummary.WaysCount
            if waysCount > 0 then
                local ways = Game001AlphaBaseGameWays.Ways.Array
                local waysMatrix = Game001AlphaBaseGameWaysMatrix
                parallel
                    do
                        self:DisplayWays(waysSummary, waysMatrix, ways)            
                    end
                    do
                        if waysIndex == 0 then
                            self:RollUpWaysWin(waysSummary)
                        end
                    end
                end
                if waysIndex >= 2 then
                    self:OnWaysPayingCompleted()
                elseif Game001AlphaBaseGameState.DisplayState.First.State == "CancelRequested" then
                    self:OnWaysPayingCompleted()
                else
                    System.StartCoroutine(self, "BaseGamePayout")
                end
            else
                self:OnWaysPayingCompleted()
            end
        end
    end      
end

function Game001AlphaBaseGameMachine:DisplayWays(waysSummary, waysMatrix, ways)
    series
        do
            local waysIndex = waysSummary.WaysIndex   
            local waysCount = waysSummary.WaysCount 
            local startDelay = waysSummary.DisplayLoopStartDelay
            local duration = waysSummary.DisplayLoopDuration
            local endDelay = waysSummary.DisplayLoopEndDelay            
            if waysIndex == 0 then
                System.WaitForSeconds(startDelay)
            end
            for waysCounterIndex = 1, waysCount do
                series
                    do
                        local way = ways[waysCounterIndex]
                        local waySymbol = way.Symbol
                        local wayReelCount = way.ReelCount
                        local waySymbolCount = way.SymbolCount
                        local wayMultiplier = way.Multiplier
                        local wayPay = way.Pay
                        local wayTotalPay = way.Pays
                        local wayMatrix = waysMatrix[waySymbol].Array
                        -- update status text 
                        local statusTexts = self.StatusTexts
                        -- {0}        Pays  {1} x {2} ways = {3} CREDITS!!
                        statusTexts.FormatAndSetCurrentActive("PaysText", wayReelCount, wayPay, wayMultiplier, wayTotalPay)
                        local winSymbols = self.WinSymbols
                        winSymbols.SetCurrentActive(waySymbol)
                        -- display ways
                        for i=1,5 parallel do
                            local reel = _G["Game001AlphaBaseGameReel" .. i]
                            if reel != nil then
                                reel:DisplayWays(waySymbol, wayMatrix, waySymbolCount, duration)
                                System.WaitForSeconds(duration)
                                reel:HideWays(waySymbol, wayMatrix, waySymbolCount)
                            end
                        end
                    end
                end                            
            end
            waysSummary.WaysIndex = waysIndex + 1
            System.WaitForSeconds(endDelay) 
        end
    end
end

function Game001AlphaBaseGameMachine:UpdateStatusText(text)
end

function Game001AlphaBaseGameMachine:RollUpWaysWin(waysSummary)
    series
        do
            -- rollup ways win once
            local startDelay = waysSummary.DisplayLoopStartDelay
            local duration = waysSummary.DisplayLoopDuration
            local pays = waysSummary.Pays 
            System.WaitForSeconds(startDelay)
            local winTextProperty = self.WinText
            
            BettrVisualsController.RollUpCounter(winTextProperty, 0, pays, 1)
            
            local creditsTextProperty = self.CreditsText   
            local oldCoins = BettrUser.Coins
            local newCoins = oldCoins + pays            
            BettrUser.Coins = newCoins  
                      
            BettrVisualsController.RollUpCounter(creditsTextProperty, oldCoins, newCoins, 1)
        end
    end    
end

function Game001AlphaBaseGameMachine:PlayStartAnimations()
    series
        do
            local animatorProperty = self["start"]
            BettrVisualsController.PlayAnimatorProperty(animatorProperty)
        end        
    end
end

function Game001AlphaBaseGameMachine:StartEngines()
    parallel
        do
            Game001AlphaBaseGameReel1:StartEngines()
        end
        do
            Game001AlphaBaseGameReel2:StartEngines()
        end
        do
            Game001AlphaBaseGameReel3:StartEngines()
        end
        do
            Game001AlphaBaseGameReel4:StartEngines()
        end
        do
            Game001AlphaBaseGameReel5:StartEngines()
        end
    end
end

function Game001AlphaBaseGameMachine:LoadServerOutcome()
    series
        do
            BettrOutcomeController.LoadServerOutcome("Game001AlphaAlpha")
        end
    end
end

function Game001AlphaBaseGameMachine:WaitForApplyOutcomeDelay()
    series
        do
            local outcomeDelayInMs = Game001AlphaBaseGameSpinProperties.ApplyOutcomeDelay.First.Value
            if outcomeDelayInMs > 0 then
                System.WaitForSeconds(outcomeDelayInMs / 1000)
            end
        end
    end
end

function Game001AlphaBaseGameMachine:SpinEngines()
    Game001AlphaBaseGameState.SpinState.First.State = "Spinning"
    local statusTexts = self.StatusTexts
    statusTexts.SetCurrentActive("GoodLuckText")
    local winSymbols = self.WinSymbols
    winSymbols.SetAllInactive()
    self:ResetSettings()
    parallel
        do
            Game001AlphaBaseGameReel1:SpinEngines()
        end
        do
            Game001AlphaBaseGameReel2:SpinEngines()
        end
        do
            Game001AlphaBaseGameReel3:SpinEngines()
        end
        do
            Game001AlphaBaseGameReel4:SpinEngines()
        end
        do
            Game001AlphaBaseGameReel5:SpinEngines()
        end
    end
end

function Game001AlphaBaseGameMachine:WaitForPayToComplete()
    series
        do
            if Game001AlphaBaseGameState.SpinState.First.State == "WaitingForPayToComplete" then
                local waysSummary = Game001AlphaBaseGameWaysSummary.Ways.First
                local delay = waysSummary.DisplayLoopEndDelay
                while Game001AlphaBaseGameState.SpinState.First.State == "WaitingForPayToComplete" do
                    Game001AlphaBaseGameState.DisplayState.First.State = "CancelRequested"
                    System.WaitForSeconds(delay)
                end
            end
            Game001AlphaBaseGameState.DisplayState.First.State = "Idle"            
        end
    end
end

function Game001AlphaBaseGameMachine:UpdateBaseGameReelsSpinState(state)    
    Game001AlphaBaseGameReelSpinState.Reel1.First.ReelSpinState = state
    Game001AlphaBaseGameReelSpinState.Reel2.First.ReelSpinState = state
    Game001AlphaBaseGameReelSpinState.Reel3.First.ReelSpinState = state
    Game001AlphaBaseGameReelSpinState.Reel4.First.ReelSpinState = state
    Game001AlphaBaseGameReelSpinState.Reel5.First.ReelSpinState = state
end

function Game001AlphaBaseGameMachine:TryWaysPaying()
    Game001AlphaBaseGameState.SpinState.First.State = "WaysPaying"
end

function Game001AlphaBaseGameMachine:TryFreeSpinsTriggering()
    Game001AlphaBaseGameState.SpinState.First.State = "FreeSpinsTriggering"
end

function Game001AlphaBaseGameMachine:CurrentSpinState()
    return Game001AlphaBaseGameState.SpinState.First.State
end

function Game001AlphaBaseGameMachine:OnWaysPayingCompleted()
    self:TryFreeSpinsTriggering()
end

function Game001AlphaBaseGameMachine:OnSpinReelsStopped()
    self:UpdateBaseGameReelsSpinState("Waiting")
    self:TryWaysPaying()
end

function Game001AlphaBaseGameMachine:OnSpinButtonClicked()
    series
        do
            self:WaitForPayToComplete()                        
            self:SpinEngines()
            self:WaitForApplyOutcomeDelay()
            self:LoadServerOutcome()
            self:OnOutcomeReceived()
        end
    end
end

function Game001AlphaBaseGameMachine:OnOutcomeReceived()
    parallel
        do
            Game001AlphaBaseGameReel1:OnOutcomeReceived()
        end
        do
            Game001AlphaBaseGameReel2:OnOutcomeReceived()
        end
        do
            Game001AlphaBaseGameReel3:OnOutcomeReceived()
        end
        do
            Game001AlphaBaseGameReel4:OnOutcomeReceived()
        end
        do
            Game001AlphaBaseGameReel5:OnOutcomeReceived()
        end
    end
end

function Game001AlphaBaseGameMachine:OnPointerClick()
    System.Print("Game001AlphaBaseGameMachine OnPointerClick tile id={0}", self.id)
    System.StartCoroutine(self, "OnSpinButtonClicked")
end

function Game001AlphaBaseGameMachine:OnBecameVisible()
	System.Print("Game001AlphaBaseGameMachine OnBecameVisible tile id={0}", self.id)
end

Game001AlphaBaseGameMachine.BaseGameStateDispatchTable = {
    Waiting = Game001AlphaBaseGameMachine.BaseGameWaiting,
    Spinning = Game001AlphaBaseGameMachine.BaseGameSpinning,
    WaysPaying = Game001AlphaBaseGameMachine.BaseGameWaysPaying,
    WaitingForPayToComplete = Game001AlphaBaseGameMachine.WaitingForPayToComplete,
    FreeSpinsTriggering = Game001AlphaBaseGameMachine.BaseGameFreeSpinsTriggering,
    WaitingForFreeSpinsToComplete = Game001AlphaBaseGameMachine.WaitingForFreeSpinsToComplete,
    Completed = Game001AlphaBaseGameMachine.BaseGameCompleted,
}

return Game001AlphaBaseGameMachine:new()