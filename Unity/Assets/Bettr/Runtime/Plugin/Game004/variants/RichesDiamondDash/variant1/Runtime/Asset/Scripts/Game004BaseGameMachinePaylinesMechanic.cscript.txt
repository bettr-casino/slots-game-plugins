require "math"
require "Core"

Game004BaseGameMachinePaylinesMechanic = {
}

function Game004BaseGameMachinePaylinesMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game004BaseGameMachinePaylinesMechanic:Initialize(machine)
    -- Appending new entries to the table
    Game004BaseGameMachine.BaseGameStateDispatchTable.Paying = function()
        self:BaseGamePaying(machine)
    end
    Game004BaseGameMachine.BaseGameStateDispatchTable.WaitingForPayToComplete = function()
        self:WaitingForPayToComplete(machine)
    end
end

function Game004BaseGameMachinePaylinesMechanic:TryPaying(machine)
    local summary = Game004BaseGamePaylinesSummary.Paylines.First
    local count = summary.PaylinesCount
    if count == 0 then
        return
    end    
    local spinCoins = BettrUser.SpinCoins
    local paylines = Game004BaseGamePaylines.Paylines.Array
    for counterIndex = 1, count do
        local payline = paylines[counterIndex]
        local totalPay = payline.Pays
        spinCoins = spinCoins + totalPay
    end
    BettrUser.SpinCoins = spinCoins
end

function Game004BaseGameMachinePaylinesMechanic:BaseGamePaying(machine)
    Game004BaseGameState.SpinState.First.State = "WaitingForPayToComplete"
    local summary = Game004BaseGamePaylinesSummary.Paylines.First
    local count = summary.PaylinesCount
    if count == 0 then
        machine:OnPayingCompleted()
        return
    end
    System.StartCoroutine(machine, "BaseGamePayout")
end

function Game004BaseGameMachinePaylinesMechanic:BaseGamePayout(machine)
    series
        do
            local isSlamStopped = BettrUserController.UserInSlamStopMode
            if isSlamStopped then
                machine:OnPayingCompleted()
            else
                self:DisplayPaylines(machine)
            end
        end
    end    
end

function Game004BaseGameMachinePaylinesMechanic:WaitingForPayToComplete(machine)    
end

function Game004BaseGameMachinePaylinesMechanic:DisplayPaylines(machine)
    series
        do
            local summary = Game004BaseGamePaylinesSummary.Paylines.First
            local count = summary.PaylinesCount
            if count == 0 then
                machine:OnPayingCompleted()
                return
            end
            local state = Game004BaseGamePaylinesState.Paylines.First
            state.PaysRollup = 0
            local paylines = Game004BaseGamePaylines.Paylines.Array
            local paylinesMatrix = Game004BaseGamePaylinesMatrix
            count = summary.PaylinesCount
            local startDelay = summary.DisplayLoopStartDelay
            local duration = summary.DisplayLoopDuration
            local endDelay = summary.DisplayLoopEndDelay
            local paylinesIndex = state.PaylinesIndex            
            -- TODO: FIXME outcomes are not storing the paylines state
            System.WaitForSeconds(startDelay*2 + endDelay*2)
            BettrAudioController.PlayAudioLoop("rollupwins")               
            for counterIndex = 1, count do
                series
                    do
                        local isSlamStopped = BettrUserController.UserInSlamStopMode                        
                        if isSlamStopped then
                            break
                        end
                        local payline = paylines[counterIndex]
                        local symbol = payline.Symbol
                        local reelCount = payline.ReelCount
                        local multiplier = payline.Multiplier
                        local paylineId = payline.PaylineId
                        local pay = payline.Pay
                        local totalPay = payline.Pays
                        local matrix = paylinesMatrix[symbol].Array
                        -- update status text 
                        local statusTexts = machine.StatusTexts
                        -- {0}        Pays  {1} x {2} = {3} CREDITS!!
                        statusTexts.FormatAndSetCurrentActive("PaysText", reelCount, pay, multiplier, totalPay)
                        local winSymbols = machine.WinSymbols
                        winSymbols.SetCurrentActive(symbol)
                        parallel
                            do
                                self:RollUpPaylinesWin(machine, payline, state, summary, duration)
                            end
                            do
                                -- display paylines
                                for i=1,reelCount parallel do
                                    local reel = _G["Game004BaseGameReel" .. i]
                                    if reel != nil then
                                        reel.Mechanics.PaylinesMechanic:DisplayPaylines(reel, symbol, paylineId, matrix, reelCount, duration)
                                        System.WaitForSeconds(duration)
                                        reel.Mechanics.PaylinesMechanic:HidePaylines(reel, symbol, paylineId, matrix, reelCount)
                                    end
                                end
                            end
                        end
                    end
                end                            
            end
            paylinesIndex = state.PaylinesIndex
            state.PaylinesIndex = paylinesIndex + 1
            if paylinesIndex >= 0 then
                machine:OnPayingCompleted()
                return
            end
            local isSlamStopped = BettrUserController.UserInSlamStopMode
            if isSlamStopped then
                machine:OnPayingCompleted()
                return
            end
            System.StartCoroutine(machine, "BaseGamePayout")
        end
    end
end

function Game004BaseGameMachinePaylinesMechanic:RollUpPaylinesWin(machine, payline, paylinesState, paylinesSummary, duration)
    series
        do
            -- rollup paylines win once
            local startDelay = paylinesSummary.DisplayLoopStartDelay
            local duration = paylinesSummary.DisplayLoopDuration
            local oldCoins = paylinesState.PaysRollup
            local pays = payline.Pays
            local newCoins = oldCoins + pays            
            paylinesState.PaysRollup = newCoins
            System.WaitForSeconds(startDelay)
            local winTextProperty = machine.WinText            
            BettrVisualsController.RollUpCounter(winTextProperty, oldCoins, newCoins, duration)
        end
    end    
end

