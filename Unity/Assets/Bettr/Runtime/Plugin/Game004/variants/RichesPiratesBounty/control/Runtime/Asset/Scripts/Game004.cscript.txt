require "math"
require "Core"

Game004 = {
    Config = {
        Machine = "Game004",
        Variant = "RichesPiratesBounty",
        Experiment = "control",
    },
    Manifest = {        
        BundleName = "game004richespiratesbounty",
        BundleVersion = "control",
        BaseGameBackgroundPrefabName = "Game004BaseGameBackground",
        BaseGameMachinePrefabName = "Game004BaseGameMachine",
    }
}

function Game004:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game004:destroy()
	System.Print("Game004 destroy tile id={0}", self.id)
end

function Game004:OnError(callStack)
	System.Error("Game004 Error CallStack: {0}", callStack)
end

function Game004:Awake()
	System.Print("Game004 Awake tile id={0}", self.id)
end

function Game004:Start()
    series
        do
            BettrVisualsController.SwitchOrientationToLandscape()
        end
        do
            Game004BaseGameBackground:StartBackground()
        end
-- NOTE: Commented out: UNTIL WE HAVE BETTER AUDIO        
--        do
--            BettrAudioController.LoadBackgroundAudio("Game004RichesPiratesBounty")
--        end
--        do
--            BettrAudioController.PlayGameAudioLoop("Game004RichesPiratesBounty", "control", "Game004RichesPiratesBountyBackgroundMusic")
--        end
-- NOTE: Commented out: Will be controlled by the BettrMainLobbySceneController
--        do
--            BettrVideoController.LoadBackgroundVideo(Game004BaseGameBackground, "Game004", "RichesPiratesBounty", "control")
--        end        
--        do
--            BettrVideoController.PlayBackgroundVideo(Game004BaseGameBackground, "Game004", "RichesPiratesBounty", "control")
--        end
-- NOTE: Commented out: Will be preloaded into the Scene
--        do
--            System.Print("Game004:Start Load Machine Prefabs tile id={0}", self.id)
--
--            self:LoadBaseGamePrefab()
--
--        end
-- NOTE: Commented out: Will be controlled by the BettrMainLobbySceneController        
--        do
--            self:SetBaseGameActive(true)
--        end
    end
end

-- NOTE: Commented out: Will be preloaded into the Scene
-- function Game004:LoadBaseGameBackgroundPrefab()
--     series
--         do
--             System.Print("Game004:LoadBaseGameBackgroundPrefab tile id={0}", self.id)
--             local manifest = self.Manifest
--             local backgroundParentProperty = self.BaseGameBackgroundParent
--             local backgroundParent = backgroundParentProperty["Pivot"]                        
--             BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, manifest.BaseGameBackgroundPrefabName, backgroundParent)
--         end
--     end
-- end

-- NOTE: Commented out: Will be preloaded into the Scene
-- function Game004:LoadBaseGamePrefab()
--    series
--         do            
--             local manifest = self.Manifest
--             local baseGameMachineParentProperty = self.BaseGameMachineParent
--             local baseGameMachineParent = baseGameMachineParentProperty["Pivot"]
--             BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, manifest.BaseGameMachinePrefabName, baseGameMachineParent)
--         end
--     end
-- end

-- NOTE: Commented out: Will be preloaded into the Scene
-- function Game004:SetBaseGameActive(active)
--     if active then
--         self.BaseGameMachineParent.SetActive(true)
--         Game004MachineState.Current.First.ActiveGame = "BaseGame"
--     else
--         self.BaseGameMachineParent.SetActive(false)
--     end
-- end

function Game004:ActiveGame()
    return Game004MachineState.Current.First.ActiveGame
end

function Game004:OnBecameVisible()
	System.Print("Game004 OnBecameVisible tile id={0}", self.id)
end

function Game004:OnPointerClick()
	System.Print("Game004 OnPointerClick tile id={0}", self.id)
end

function Game004:OnPointerClick1Param(param)
	System.Print("Game004 OnPointerClick1Param param={0} tile id={1}", param, self.id)
end

return Game004:new()