require "math"
require "Core"

Game004BaseGameReelWaysMechanic = {
    Config = {
        Machine = "Game004",
        Variant = "RichesMysticForest",
        Experiment = "control",
    },
}

function Game004BaseGameReelWaysMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game004BaseGameReelWaysMechanic:Initialize(reel)
end

function Game004BaseGameReelWaysMechanic:DisplayWays(reel, waySymbol, wayMatrix, waySymbolCount, duration)
    for i=1,waySymbolCount parallel do
       local wayReelID = wayMatrix[i].ReelID
       if wayReelID == reel.ReelID then
           local rowIndex = wayMatrix[i].RowIndex
           local luaRowIndex = rowIndex + 1
           local animatorGroupProperty = reel["SymbolWaysWinAnimatorGroup" .. luaRowIndex]
           if animatorGroupProperty == nil then
               System.Print("animatorGroupProperty is nil wayReelID={0} rowIndex={1} luaRowIndex={2}", wayReelID, rowIndex, luaRowIndex)
           else
               local symbolGroupProperty = reel["SymbolGroup" .. luaRowIndex]
               local currentKey = symbolGroupProperty.CurrentKey
               local animatorProperty = animatorGroupProperty[currentKey]
               if animatorProperty == nil then
                   System.Print("animatorProperty is nil wayReelID={0} rowIndex={1} luaRowIndex={2} currentKey={3}", wayReelID, rowIndex, luaRowIndex, currentKey)
               else
                   animatorProperty.overrideAnimationDuration = true
                   animatorProperty.animationDuration = duration
                   BettrVisualsController.PlayAnimatorProperty(animatorProperty)
                   -- Core.Animator:PlayAnimatorProperty(currentKey, animatorProperty)
               end
           end
       end
    end
end

function Game004BaseGameReelWaysMechanic:HideWays(reel, waySymbol, wayMatrix, wayMatrixCount)
    -- nothing to do here
end


