require "math"
require "Core"
require "Game002BaseGameMachineWaysMechanic"

Game002BaseGameMachineMechanics = {
    Config = {
        Machine = "Game002",
        Variant = "BuffaloJackpotMadness",
        Experiment = "control",
    },
    WaysMechanic = nil,
}

function Game002BaseGameMachineMechanics:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game002BaseGameMachineMechanics:OnError(callStack)
	System.Error("BaseGameMachineMechanics Error CallStack: {0}", callStack)
end

function Game002BaseGameMachineMechanics:Initialize(machine)
     self.WaysMechanic = Game002BaseGameMachineWaysMechanic:new()
     self.WaysMechanic:Initialize(machine)
end

function Game002BaseGameMachineMechanics:StartMachine(machine)
    if self.ChooseASideMechanic ~= nil then
        self.ChooseASideMechanic:StartMachine(machine)
    elseif self.HorizontalReelsShiftMechanic ~= nil then
        self.HorizontalReelsShiftMechanic:StartMachine(machine)
    else
        machine:StartMachine()
    end
end

function Game002BaseGameMachineMechanics:StartEngines(machine)
    if self.HorizontalReelsShiftMechanic ~= nil then
        self.HorizontalReelsShiftMechanic:StartEngines(machine)
    else
        machine:StartEngines(self)
    end
end

function Game002BaseGameMachineMechanics:BaseGamePayout(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.WaysMechanic ~= nil then
       self.WaysMechanic:BaseGamePayout(machine)
    elseif self.CascadingReelsMechanic ~= nil then
       self.CascadingReelsMechanic:BaseGamePayout(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:BaseGamePayout(machine)
    end
end

function Game002BaseGameMachineMechanics:TryPaying(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.WaysMechanic ~= nil then
       return self.WaysMechanic:TryPaying(machine)
    elseif self.PaylinesMechanic ~= nil then
       return self.PaylinesMechanic:TryPaying(machine)
    end
    return 0
end

function Game002BaseGameMachineMechanics:OnPayingCompleted(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.WaysMechanic ~= nil then
       self.WaysMechanic:OnPayingCompleted(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:OnPayingCompleted(machine)
    end
end

function Game002BaseGameMachineMechanics:RollupCredits(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.WaysMechanic ~= nil then
       self.WaysMechanic:RollupCredits(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:RollupCredits(machine)
    end
end

function Game002BaseGameMachineMechanics:OnBaseGameSpinCompleted(machine)
    series
        do
            if self.ChooseASideMechanic ~= nil then
                self.ChooseASideMechanic:OnBaseGameSpinCompleted(machine)            
            else
                machine:OnBaseGameSpinCompleted()
            end
        end
    end
end

function Game002BaseGameMachineMechanics:CanSpin(machine, canSpin)
    return canSpin
end