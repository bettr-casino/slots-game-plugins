require "math"
require "Core"
require "Game008BaseGameReel"

Game008BaseGameMachine = {
}

function Game008BaseGameMachine:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game008BaseGameMachine:destroy()
	System.Print("Game008BaseGameMachine destroy tile id={0}", self.id)
end

function Game008BaseGameMachine:OnError(callStack)
	System.Error("Game008BaseGameMachine Error CallStack: {0}", callStack)
end

function Game008BaseGameMachine:Awake()
	System.Print("Game008BaseGameMachine Awake tile id={0}", self.id)
end

function Game008BaseGameMachine:Start()
    series
        do
	        self:ConfigureSettings()
	        self:ShowSettings()
	        self:PlayStartAnimations()
	        self:StartEngines()
        end
    end
end

function Game008BaseGameMachine:OnSpinButtonClicked()
    self:CancelPaylinesAnimation()
    series
        do
            self:WaitForPayToComplete()                       
            self:SpinEngines()
            self:WaitForApplyOutcomeDelay()
            self:LoadServerOutcome()
            self:OnOutcomeReceived()
        end
    end
end

function Game008BaseGameMachine:CancelPaylinesAnimation()
    Game008BaseGameState.DisplayState.First.State = "CancelRequested"
end

function Game008BaseGameMachine:RollUpPaylinesWin(paylinesSummary)
    series
        do
            -- rollup paylines win once
            local startDelay = paylinesSummary.DisplayLoopStartDelay
            local duration = paylinesSummary.DisplayLoopDuration
            local pays = paylinesSummary.Pays 
            System.WaitForSeconds(startDelay)
            local winTextProperty = self.WinText
            
            BettrVisualsController.RollUpCounter(winTextProperty, 0, pays, 1)
            
            local creditsTextProperty = self.CreditsText   
            local oldCoins = BettrUser.Coins
            local newCoins = oldCoins + pays            
            BettrUser.Coins = newCoins  
                      
            BettrVisualsController.RollUpCounter(creditsTextProperty, oldCoins, newCoins, 1)
        end
    end    
end

function Game008BaseGameMachine:WaitForPayToComplete()
    series
        do
            if Game008BaseGameState.SpinState.First.State == "WaitingForPayToComplete" then
                local paylinesSummary = Game008BaseGamePaylinesSummary.Paylines.First
                local delay = paylinesSummary.DisplayLoopEndDelay
                while Game008BaseGameState.SpinState.First.State == "WaitingForPayToComplete" do
                    Game008BaseGameState.DisplayState.First.State = "CancelRequested"
                    System.WaitForSeconds(delay)
                end
            end
            Game008BaseGameState.DisplayState.First.State = "Idle"            
        end
    end
end

function Game008BaseGameMachine:WaitingForPayToComplete()    
end

function Game008BaseGameMachine:BaseGamePaying()
    Game008BaseGameState.SpinState.First.State = "WaitingForPayToComplete"
    System.StartCoroutine(self, "BaseGamePayout")
end

function Game008BaseGameMachine:ConfigureSettings()
    self.CreditsText.SetText(BettrUser.Coins)
    self.WinText.SetText("0")       
    self.BetText.SetText(Game008BetMultiplierState.Current.First.BetMultiplier) 
end

function Game008BaseGameMachine:ShowSettings()
    series
        do
            local settings = self["Settings"]
            settings.SetActive(true)
        end
    end
end

function Game008BaseGameMachine:HideSettings()
    series
        do
            local settings = self["Settings"]
            settings.SetActive(false)
        end
    end
end

function Game008BaseGameMachine:ResetSettings()
    self.WinText.SetText("0")
end

function Game008BaseGameMachine:Update()
    local spinState = Game008BaseGameState.SpinState.First.State
    self.BaseGameStateDispatchTable[spinState](self)    
end

function Game008BaseGameMachine:BaseGameSpinning()    
end

function Game008BaseGameMachine:BaseGameWaiting()    
end

function Game008BaseGameMachine:BaseGameCompleted()
   self:ShowSettings()
   Game008BaseGameState.SpinState.First.State = "Waiting"
end

function Game008BaseGameMachine:OnBaseGameSpinCompleted()
    series
        do
            Game008BaseGameState.SpinState.First.State = "Completed"
        end
    end
end

function Game008BaseGameMachine:BaseGamePayout()
    series
        do
            local paylinesSummary = Game008BaseGamePaylinesSummary.Paylines.First
            local paylinesIndex = paylinesSummary.PaylinesIndex
            local paylinesCount = paylinesSummary.PaylinesCount
            if paylinesCount > 0 then
                local paylines = Game008BaseGamePaylines.Paylines.Array
                local paylinesMatrix = Game008BaseGamePaylinesMatrix
                parallel
                    do
                        self:DisplayPaylines(paylinesSummary, paylinesMatrix, paylines)            
                    end
                    do
                        if paylinesIndex == 0 then
                            self:RollUpPaylinesWin(paylinesSummary)
                        end
                    end
                end
                if paylinesIndex >= 2 then
                    self:OnPayingCompleted()
                elseif Game008BaseGameState.DisplayState.First.State == "CancelRequested" then
                    self:OnPayingCompleted()
                else
                    System.StartCoroutine(self, "BaseGamePayout")
                end
            else
                self:OnPayingCompleted()
            end
        end
    end      
end

function Game008BaseGameMachine:DisplayPaylines(paylinesSummary, paylinesMatrix, paylines)
    series
        do
            local paylinesIndex = paylinesSummary.PaylinesIndex   
            local paylinesCount = paylinesSummary.PaylinesCount 
            local startDelay = paylinesSummary.DisplayLoopStartDelay
            local duration = paylinesSummary.DisplayLoopDuration
            local endDelay = paylinesSummary.DisplayLoopEndDelay            
            if paylinesIndex == 0 then
                System.WaitForSeconds(startDelay)
            end
            for paylinesCounterIndex = 1, paylinesCount do
                series
                    do
                        if Game008BaseGameState.DisplayState.First.State == "CancelRequested" then
                            break
                        end
                        local payline = paylines[paylinesCounterIndex]
                        local paylineId = payline.PaylineId
                        local paylineSymbol = payline.Symbol
                        local paylineReelCount = payline.ReelCount
                        local paylineMultiplier = payline.Multiplier
                        local paylinePay = payline.Pay
                        local paylineTotalPay = payline.Pays
                        local paylineData = paylinesMatrix[paylineId].Array
                        -- update status text 
                        local statusTexts = self.StatusTexts
                        -- Line {0} Wins  = {1} CREDITS!!
                        statusTexts.FormatAndSetCurrentActive("PaysText", paylineId, paylineTotalPay)
                        -- display paylines
                        for i=1, paylineReelCount parallel do
                            local reel = _G["Game008BaseGameReel" .. i]
                            if reel ~= nil then
                                reel:DisplayPaylines(paylineSymbol, paylineData, paylineId, duration)
                                System.WaitForSeconds(duration)
                                reel:HidePaylines(paylineSymbol, paylineData, paylineId)
                            end
                        end
                    end
                end                            
            end
            paylinesSummary.PaylinesIndex = paylinesIndex + 1
            System.WaitForSeconds(endDelay) 
        end
    end
end

function Game008BaseGameMachine:UpdateStatusText(text)
end

function Game008BaseGameMachine:PlayStartAnimations()
    series
        do
            local animatorProperty = self["start"]
            BettrVisualsController.PlayAnimatorProperty(animatorProperty)
        end        
    end
end

function Game008BaseGameMachine:StartEngines()
    parallel
    
            do
                Game008BaseGameReel1:StartEngines()
            end
        
            do
                Game008BaseGameReel2:StartEngines()
            end
        
            do
                Game008BaseGameReel3:StartEngines()
            end
        
            do
                Game008BaseGameReel4:StartEngines()
            end
        
            do
                Game008BaseGameReel5:StartEngines()
            end
        
    end
end

function Game008BaseGameMachine:LoadServerOutcome()
    series
        do
            BettrOutcomeController.LoadServerOutcome("Game008")
        end
    end
end

function Game008BaseGameMachine:WaitForApplyOutcomeDelay()
    series
        do
            local outcomeDelayInMs = Game008BaseGameSpinProperties.ApplyOutcomeDelay.First.Value
            if outcomeDelayInMs > 0 then
                System.WaitForSeconds(outcomeDelayInMs / 1000)
            end
        end
    end
end

function Game008BaseGameMachine:SpinEngines()
    Game008BaseGameState.SpinState.First.State = "Spinning"
    local statusTexts = self.StatusTexts
    statusTexts.SetCurrentActive("GoodLuckText")
    self:ResetSettings()
    parallel
        
                    do
                        Game008BaseGameReel1:SpinEngines()
                    end
                
                    do
                        Game008BaseGameReel2:SpinEngines()
                    end
                
                    do
                        Game008BaseGameReel3:SpinEngines()
                    end
                
                    do
                        Game008BaseGameReel4:SpinEngines()
                    end
                
                    do
                        Game008BaseGameReel5:SpinEngines()
                    end
                
    end
end

function Game008BaseGameMachine:UpdateBaseGameReelsSpinState(state)

    Game008BaseGameReelSpinState.Reel1.First.ReelSpinState = state

    Game008BaseGameReelSpinState.Reel2.First.ReelSpinState = state

    Game008BaseGameReelSpinState.Reel3.First.ReelSpinState = state

    Game008BaseGameReelSpinState.Reel4.First.ReelSpinState = state

    Game008BaseGameReelSpinState.Reel5.First.ReelSpinState = state

end

function Game008BaseGameMachine:TryPaying()
    Game008BaseGameState.SpinState.First.State = "Paying"
end

function Game008BaseGameMachine:CurrentSpinState()
    return Game008BaseGameState.SpinState.First.State
end

function Game008BaseGameMachine:OnPayingCompleted()
    self:OnBaseGameSpinCompleted()
end

function Game008BaseGameMachine:OnSpinReelsStopped()
    self:UpdateBaseGameReelsSpinState("Waiting")
    self:TryPaying()
end

function Game008BaseGameMachine:OnOutcomeReceived()
    parallel
        
                    do
                        Game008BaseGameReel1:OnOutcomeReceived()
                    end
                
                    do
                        Game008BaseGameReel2:OnOutcomeReceived()
                    end
                
                    do
                        Game008BaseGameReel3:OnOutcomeReceived()
                    end
                
                    do
                        Game008BaseGameReel4:OnOutcomeReceived()
                    end
                
                    do
                        Game008BaseGameReel5:OnOutcomeReceived()
                    end
                
    end
end

function Game008BaseGameMachine:OnPointerClick()
    System.Print("Game008BaseGameMachine OnPointerClick tile id={0}", self.id)
    System.StartCoroutine(self, "OnSpinButtonClicked")
end

function Game008BaseGameMachine:OnBecameVisible()
	System.Print("Game008BaseGameMachine OnBecameVisible tile id={0}", self.id)
end

Game008BaseGameMachine.BaseGameStateDispatchTable = {
    Waiting = Game008BaseGameMachine.BaseGameWaiting,
    Spinning = Game008BaseGameMachine.BaseGameSpinning,
    Completed = Game008BaseGameMachine.BaseGameCompleted,
    Paying = Game008BaseGameMachine.BaseGamePaying,
    WaitingForPayToComplete = Game008BaseGameMachine.WaitingForPayToComplete,
}

return Game008BaseGameMachine:new()