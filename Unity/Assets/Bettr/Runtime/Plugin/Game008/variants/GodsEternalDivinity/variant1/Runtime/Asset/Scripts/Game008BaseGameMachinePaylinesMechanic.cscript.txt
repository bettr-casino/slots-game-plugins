require "math"
require "Core"

Game008BaseGameMachinePaylinesMechanic = {
    Config = {
        Machine = "Game008",
        Variant = "GodsEternalDivinity",
        Experiment = "variant1",
        Mechanic = "Paylines",
    },
}

function Game008BaseGameMachinePaylinesMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game008BaseGameMachinePaylinesMechanic:OnError(callStack)
	System.Error("BaseGameMachinePaylinesMechanic Error CallStack: {0}", callStack)
end

function Game008BaseGameMachinePaylinesMechanic:Initialize(machine)
end

function Game008BaseGameMachinePaylinesMechanic:TryPaying(machine)
    local summary = Game008BaseGamePaylinesSummary.Paylines.First
    local count = summary.PaylinesCount
    if count == 0 then
        return 0
    end    
    local spinCoins = BettrUser.SpinCoins
    local paylines = Game008BaseGamePaylines.Paylines.Array
    for counterIndex = 1, count do
        local payline = paylines[counterIndex]
        local totalPay = payline.Pays
        spinCoins = spinCoins + totalPay
    end
    local coinsPaid = spinCoins - BettrUser.SpinCoins
    BettrUser.SpinCoins = spinCoins
    return coinsPaid
end

function Game008BaseGameMachinePaylinesMechanic:BaseGamePayout(machine)
    series
        do
            local paylinesSummary = Game008BaseGamePaylinesSummary.Paylines.First
            local count = paylinesSummary.PaylinesCount
            if count == 0 then
                return
            end
            local isSlamStopped = BettrUserController.UserInSlamStopMode
            if isSlamStopped then
                return
            end
            self:DisplayPaylines(machine)
        end
    end    
end

function Game008BaseGameMachinePaylinesMechanic:DisplayPaylines(machine)
    series
        do
            local paylinesSummary = Game008BaseGamePaylinesSummary.Paylines.First
            local paylinesCount = paylinesSummary.PaylinesCount
            if paylinesCount == 0 then
                return
            end
            local paylinesState = Game008BaseGamePaylinesState.Paylines.First
            paylinesState.PaysRollup = 0
            local paylines = Game008BaseGamePaylines.Paylines.Array
            local paylinesMatrix = Game008BaseGamePaylinesMatrix
            paylinesCount = paylinesSummary.PaylinesCount
            local startDelay = paylinesSummary.DisplayLoopStartDelay
            local duration = paylinesSummary.DisplayLoopDuration
            local endDelay = paylinesSummary.DisplayLoopEndDelay
            local paylinesIndex = paylinesState.PaylinesIndex            
            -- TODO: FIXME outcomes are not storing the paylines state
            System.WaitForSeconds(startDelay*2 + endDelay*2)
            BettrAudioController.PlayAudioLoop("rollupwins")               
            for paylinesCounterIndex = 1, paylinesCount do
                series
                    do
                        local isSlamStopped = BettrUserController.UserInSlamStopMode                        
                        if isSlamStopped then
                            break
                        end
                        local payline = paylines[paylinesCounterIndex]
                        local paylineSymbol = payline.Symbol
                        local paylineReelCount = payline.ReelCount
                        local paylineMultiplier = payline.Multiplier
                        local paylineId = payline.PaylineId
                        local paylinePay = payline.Pay
                        local paylineTotalPay = payline.Pays
                        local paylineMatrix = paylinesMatrix[paylineSymbol].Array
                        -- update status text 
                        local statusTexts = machine.StatusTexts
                        -- {0}        Pays  {1} x {2} = {3} CREDITS!!
                        statusTexts.FormatAndSetCurrentActive("PaysText", paylineReelCount, paylinePay, paylineMultiplier, paylineTotalPay)
                        local winSymbols = machine.WinSymbols
                        winSymbols.SetCurrentActive(paylineSymbol)
                        parallel
                            do
                                self:RollUpPaylinesWin(machine, payline, paylinesState, paylinesSummary, duration)
                            end
                            do
                                -- display paylines
                                for i=1,paylineReelCount parallel do
                                    local reel = _G["Game008BaseGameReel" .. i]
                                    if reel != nil then
                                        reel.Mechanics.PaylinesMechanic:DisplayPaylines(reel, paylineSymbol, paylineId, paylineMatrix, paylineReelCount, duration)
                                        System.WaitForSeconds(duration)
                                        reel.Mechanics.PaylinesMechanic:HidePaylines(reel, paylineSymbol, paylineId, paylineMatrix, paylineReelCount)
                                    end
                                end
                            end
                        end
                    end
                end                            
            end
            paylinesIndex = paylinesState.PaylinesIndex
            paylinesState.PaylinesIndex = paylinesIndex + 1
            if paylinesIndex >= 0 then
                return
            end
            local isSlamStopped = BettrUserController.UserInSlamStopMode
            if isSlamStopped then
                return
            end
            System.StartCoroutine(self, "BaseGamePayout")
        end
    end
end

function Game008BaseGameMachinePaylinesMechanic:RollUpPaylinesWin(machine, payline, paylinesState, paylinesSummary, duration)
    series
        do
            -- rollup paylines win once
            local startDelay = paylinesSummary.DisplayLoopStartDelay
            local duration = paylinesSummary.DisplayLoopDuration
            local oldCoins = paylinesState.PaysRollup
            local pays = payline.Pays
            local newCoins = oldCoins + pays            
            paylinesState.PaysRollup = newCoins
            System.WaitForSeconds(startDelay)
            local winTextProperty = machine.WinText            
            BettrVisualsController.RollUpCounter(winTextProperty, oldCoins, newCoins, duration)
        end
    end    
end

