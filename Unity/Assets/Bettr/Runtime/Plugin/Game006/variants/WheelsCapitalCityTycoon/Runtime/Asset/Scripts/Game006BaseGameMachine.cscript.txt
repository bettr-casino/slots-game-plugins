require "math"
require "Core"
require "Game006BaseGameReel"

Game006BaseGameMachine = {
}

function Game006BaseGameMachine:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game006BaseGameMachine:destroy()
	System.Print("Game006BaseGameMachine destroy tile id={0}", self.id)
end

function Game006BaseGameMachine:OnError(callStack)
	System.Error("Game006BaseGameMachine Error CallStack: {0}", callStack)
end

function Game006BaseGameMachine:Awake()
	System.Print("Game006BaseGameMachine Awake tile id={0}", self.id)
end

function Game006BaseGameMachine:Start()
    series
        do
	        self:ConfigureSettings()
	        self:ShowSettings()
	        self:PlayStartAnimations()
	        self:StartEngines()
        end
    end
end

function Game006BaseGameMachine:OnSpinButtonClicked()
    self:CancelWaysAnimation()
    series
        do
            self:WaitForPayToComplete()                       
            self:SpinEngines()
            self:WaitForApplyOutcomeDelay()
            self:LoadServerOutcome()
            self:OnOutcomeReceived()
        end
    end
end

function Game006BaseGameMachine:CancelWaysAnimation()
    Game006BaseGameState.DisplayState.First.State = "CancelRequested"
end

function Game006BaseGameMachine:RollUpWaysWin(way, waysState, waysSummary, duration)
    series
        do
            -- rollup ways win once
            local startDelay = waysSummary.DisplayLoopStartDelay
            local duration = waysSummary.DisplayLoopDuration
            local pays = way.Pays
            System.WaitForSeconds(startDelay)
            local winTextProperty = self.WinText
            
            BettrVisualsController.RollUpCounter(winTextProperty, 0, pays, 1)
            
            local creditsTextProperty = self.CreditsText   
            local oldCoins = waysState.PaysRollup
            local newCoins = oldCoins + pays            
            waysState.PaysRollup = newCoins  
                      
            BettrVisualsController.RollUpCounter(creditsTextProperty, oldCoins, newCoins, 1)
        end
    end    
end

function Game006BaseGameMachine:WaitForPayToComplete()
    series
        do
            if Game006BaseGameState.SpinState.First.State == "WaitingForPayToComplete" then
                local waysSummary = Game006BaseGameWaysSummary.Ways.First
                local delay = waysSummary.DisplayLoopEndDelay
                while Game006BaseGameState.SpinState.First.State == "WaitingForPayToComplete" do
                    Game006BaseGameState.DisplayState.First.State = "CancelRequested"
                    System.WaitForSeconds(delay)
                end
            end
            Game006BaseGameState.DisplayState.First.State = "Idle"            
        end
    end
end

function Game006BaseGameMachine:WaitingForPayToComplete()    
end

function Game006BaseGameMachine:BaseGamePaying()
    Game006BaseGameState.SpinState.First.State = "WaitingForPayToComplete"
    System.StartCoroutine(self, "BaseGamePayout")
end

function Game006BaseGameMachine:ConfigureSettings()
    self.CreditsText.SetText(BettrUser.Coins)
    self.WinText.SetText("0")       
    self.BetText.SetText(Game006BetMultiplierState.Current.First.BetMultiplier) 
end

function Game006BaseGameMachine:ShowSettings()
    series
        do
            local settings = self["Settings"]
            settings.SetActive(true)
        end
    end
end

function Game006BaseGameMachine:HideSettings()
    series
        do
            local settings = self["Settings"]
            settings.SetActive(false)
        end
    end
end

function Game006BaseGameMachine:ResetSettings()
    self.WinText.SetText("0")
end

function Game006BaseGameMachine:Update()
    local spinState = Game006BaseGameState.SpinState.First.State
    self.BaseGameStateDispatchTable[spinState](self)    
end

function Game006BaseGameMachine:BaseGameSpinning()    
end

function Game006BaseGameMachine:BaseGameWaiting()    
end

function Game006BaseGameMachine:BaseGameCompleted()
   self:ShowSettings()
   Game006BaseGameState.SpinState.First.State = "Waiting"
end

function Game006BaseGameMachine:OnBaseGameSpinCompleted()
    series
        do
            Game006BaseGameState.SpinState.First.State = "Completed"
        end
    end
end

function Game006BaseGameMachine:BaseGamePayout()
    series
        do
            local waysState = Game006BaseGameWaysState.Ways.First
            local waysSummary = Game006BaseGameWaysSummary.Ways.First
            local waysCount = waysSummary.WaysCount
            if waysCount > 0 then
                local ways = Game006BaseGameWays.Ways.Array
                local waysMatrix = Game006BaseGameWaysMatrix
                self:DisplayWays(waysState, waysSummary, waysMatrix, ways)            
                local waysIndex = waysState.WaysIndex
                if waysIndex >= 1 then
                    self:OnPayingCompleted()
                elseif Game006BaseGameState.DisplayState.First.State == "CancelRequested" then
                    self:OnPayingCompleted()
                else
                    System.StartCoroutine(self, "BaseGamePayout")
                end
            else
                self:OnPayingCompleted()
            end
        end
    end      
end

function Game006BaseGameMachine:DisplayWays(waysState, waysSummary, waysMatrix, ways)
    series
        do
            local waysIndex = waysState.WaysIndex  
            waysState.PaysRollup = BettrUser.Coins 
            local waysCount = waysSummary.WaysCount 
            local startDelay = waysSummary.DisplayLoopStartDelay
            local duration = waysSummary.DisplayLoopDuration
            local endDelay = waysSummary.DisplayLoopEndDelay            
            if waysIndex == 0 then
                System.WaitForSeconds(startDelay)
            end
            for waysCounterIndex = 1, waysCount do
                series
                    do
                        if Game006BaseGameState.DisplayState.First.State == "CancelRequested" then
                            break
                        end
                        local way = ways[waysCounterIndex]
                        local waySymbol = way.Symbol
                        local wayReelCount = way.ReelCount
                        local waySymbolCount = way.SymbolCount
                        local wayMultiplier = way.Multiplier
                        local wayPay = way.Pay
                        local wayTotalPay = way.Pays
                        local wayMatrix = waysMatrix[waySymbol].Array
                        -- update status text 
                        local statusTexts = self.StatusTexts
                        -- {0}        Pays  {1} x {2} ways = {3} CREDITS!!
                        statusTexts.FormatAndSetCurrentActive("PaysText", wayReelCount, wayPay, wayMultiplier, wayTotalPay)
                        local winSymbols = self.WinSymbols
                        winSymbols.SetCurrentActive(waySymbol)
                        parallel
                            do
                                self:RollUpWaysWin(way, waysState, waysSummary, duration)
                            end
                            do
                                -- display ways
                                for i=1,wayReelCount parallel do
                                    local reel = _G["Game006BaseGameReel" .. i]
                                    if reel != nil then
                                        reel:DisplayWays(waySymbol, wayMatrix, waySymbolCount, duration)
                                        System.WaitForSeconds(duration)
                                        reel:HideWays(waySymbol, wayMatrix, waySymbolCount)
                                    end
                                end
                            end
                        end
                    end
                end                            
            end
            waysState.WaysIndex = waysIndex + 1
            System.WaitForSeconds(endDelay) 
        end
    end
end

function Game006BaseGameMachine:UpdateStatusText(text)
end

function Game006BaseGameMachine:PlayStartAnimations()
    series
        do
            local animatorProperty = self["start"]
            BettrVisualsController.PlayAnimatorProperty(animatorProperty)
        end        
    end
end

function Game006BaseGameMachine:StartEngines()
    parallel
    
            do
                Game006BaseGameReel1:StartEngines()
            end
        
            do
                Game006BaseGameReel2:StartEngines()
            end
        
            do
                Game006BaseGameReel3:StartEngines()
            end
        
            do
                Game006BaseGameReel4:StartEngines()
            end
        
            do
                Game006BaseGameReel5:StartEngines()
            end
        
    end
end

function Game006BaseGameMachine:LoadServerOutcome()
    series
        do
            BettrOutcomeController.LoadServerOutcome("Game006")
        end
    end
end

function Game006BaseGameMachine:WaitForApplyOutcomeDelay()
    series
        do
            local outcomeDelayInMs = Game006BaseGameSpinProperties.ApplyOutcomeDelay.First.Value
            if outcomeDelayInMs > 0 then
                System.WaitForSeconds(outcomeDelayInMs / 1000)
            end
        end
    end
end

function Game006BaseGameMachine:SpinEngines()
    Game006BaseGameState.SpinState.First.State = "Spinning"
    local statusTexts = self.StatusTexts
    statusTexts.SetCurrentActive("GoodLuckText")
    local winSymbols = self.WinSymbols
    winSymbols.SetAllInactive()
    self:ResetSettings()
    parallel
        
                    do
                        Game006BaseGameReel1:SpinEngines()
                    end
                
                    do
                        Game006BaseGameReel2:SpinEngines()
                    end
                
                    do
                        Game006BaseGameReel3:SpinEngines()
                    end
                
                    do
                        Game006BaseGameReel4:SpinEngines()
                    end
                
                    do
                        Game006BaseGameReel5:SpinEngines()
                    end
                
    end
end

function Game006BaseGameMachine:UpdateBaseGameReelsSpinState(state)

    Game006BaseGameReelSpinState.Reel1.First.ReelSpinState = state

    Game006BaseGameReelSpinState.Reel2.First.ReelSpinState = state

    Game006BaseGameReelSpinState.Reel3.First.ReelSpinState = state

    Game006BaseGameReelSpinState.Reel4.First.ReelSpinState = state

    Game006BaseGameReelSpinState.Reel5.First.ReelSpinState = state

end

function Game006BaseGameMachine:TryPaying()
    Game006BaseGameState.SpinState.First.State = "Paying"
end

function Game006BaseGameMachine:CurrentSpinState()
    return Game006BaseGameState.SpinState.First.State
end

function Game006BaseGameMachine:OnPayingCompleted()
    self:OnBaseGameSpinCompleted()
end

function Game006BaseGameMachine:OnSpinReelsStopped()
    self:UpdateBaseGameReelsSpinState("Waiting")
    self:TryPaying()
end

function Game006BaseGameMachine:OnOutcomeReceived()
    parallel
        
                    do
                        Game006BaseGameReel1:OnOutcomeReceived()
                    end
                
                    do
                        Game006BaseGameReel2:OnOutcomeReceived()
                    end
                
                    do
                        Game006BaseGameReel3:OnOutcomeReceived()
                    end
                
                    do
                        Game006BaseGameReel4:OnOutcomeReceived()
                    end
                
                    do
                        Game006BaseGameReel5:OnOutcomeReceived()
                    end
                
    end
end

function Game006BaseGameMachine:OnPointerClick()
    System.Print("Game006BaseGameMachine OnPointerClick tile id={0}", self.id)
    System.StartCoroutine(self, "OnSpinButtonClicked")
end

function Game006BaseGameMachine:OnBecameVisible()
	System.Print("Game006BaseGameMachine OnBecameVisible tile id={0}", self.id)
end

Game006BaseGameMachine.BaseGameStateDispatchTable = {
    Waiting = Game006BaseGameMachine.BaseGameWaiting,
    Spinning = Game006BaseGameMachine.BaseGameSpinning,
    Completed = Game006BaseGameMachine.BaseGameCompleted,
    Paying = Game006BaseGameMachine.BaseGamePaying,
    WaitingForPayToComplete = Game006BaseGameMachine.WaitingForPayToComplete,
}

return Game006BaseGameMachine:new()