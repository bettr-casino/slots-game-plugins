require "math"
require "Core"
require "Game006BaseGameMachineWaysMechanic"

Game006BaseGameMachineMechanics = {
    Config = {
        Machine = "Game006",
        Variant = "WheelsMythicalRealm",
        Experiment = "control",
    },
    WaysMechanic = nil,
}

function Game006BaseGameMachineMechanics:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game006BaseGameMachineMechanics:OnError(callStack)
	System.Error("BaseGameMachineMechanics Error CallStack: {0}", callStack)
end

function Game006BaseGameMachineMechanics:Initialize(machine)
     self.WaysMechanic = Game006BaseGameMachineWaysMechanic:new()
     self.WaysMechanic:Initialize(machine)
end

function Game006BaseGameMachineMechanics:StartMachine(machine)
    if self.ChooseASideMechanic ~= nil then
        self.ChooseASideMechanic:StartMachine(machine)
    elseif self.HorizontalReelsShiftMechanic ~= nil then
        self.HorizontalReelsShiftMechanic:StartMachine(machine)
    else
        machine:StartMachine()
    end
end

function Game006BaseGameMachineMechanics:ShowSettings(machine, mainLobbyScene)
    series
        do
            if self.HorizontalReelsShiftMechanic ~= nil then
                self.HorizontalReelsShiftMechanic:ShowSettings(machine, mainLobbyScene)
            else
                machine:ShowSettingsDefault(mainLobbyScene)
            end
        end
    end
end

function Game006BaseGameMachineMechanics:BaseGamePayout(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.WaysMechanic ~= nil then
       self.WaysMechanic:BaseGamePayout(machine)
    elseif self.CascadingReelsMechanic ~= nil then
       self.CascadingReelsMechanic:BaseGamePayout(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:BaseGamePayout(machine)
    end
end

function Game006BaseGameMachineMechanics:TryPaying(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.HorizontalReelsShiftMechanic ~= nil then
       return self.HorizontalReelsShiftMechanic:TryPaying(machine)
    elseif self.WaysMechanic ~= nil then
       return self.WaysMechanic:TryPaying(machine)
    elseif self.PaylinesMechanic ~= nil then
       return self.PaylinesMechanic:TryPaying(machine)
    end
    return 0
end

function Game006BaseGameMachineMechanics:OnPayingCompleted(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.WaysMechanic ~= nil then
       self.WaysMechanic:OnPayingCompleted(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:OnPayingCompleted(machine)
    end
end

function Game006BaseGameMachineMechanics:RollupCredits(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.WaysMechanic ~= nil then
       self.WaysMechanic:RollupCredits(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:RollupCredits(machine)
    end
end

function Game006BaseGameMachineMechanics:OnBaseGameSpinCompleted(machine)
    series
        do
            if self.ChooseASideMechanic ~= nil then
                self.ChooseASideMechanic:OnBaseGameSpinCompleted(machine)            
            elseif self.HorizontalReelsShiftMechanic ~= nil then
                self.HorizontalReelsShiftMechanic:OnBaseGameSpinCompleted(machine)            
            elseif self.ScattersMechanic ~= nil then
                self.ScattersMechanic:OnBaseGameSpinCompleted(machine)
                if self.ReelMatrixMechanic ~= nil then
                    self.ReelMatrixMechanic:OnBaseGameSpinCompleted(machine)            
                end
            else
                machine:OnBaseGameSpinCompleted()
            end
        end
    end
end

function Game006BaseGameMachineMechanics:CanSpin(machine, canSpin)
    return canSpin
end

function Game006BaseGameMachineMechanics:ApplyOutcomeReceived(machine)
    series
        do
            if self.HorizontalReelsShiftMechanic ~= nil then
                self.HorizontalReelsShiftMechanic:ApplyOutcomeReceived(machine)
            else
                machine:OnApplyOutcomeReceived()
            end
        end
    end
end

function Game006BaseGameMachineMechanics:SpinEngines(machine)
end

function Game006BaseGameMachineMechanics:StartReelMatrixEngines(reelMatrixMechanic, machine)
    reelMatrixMechanic:StartEnginesDefault(machine)    
end

function Game006BaseGameMachineMechanics:SpinReelMatrixEngines(reelMatrixMechanic, machine)
    reelMatrixMechanic:SpinEnginesDefault(machine)    
end