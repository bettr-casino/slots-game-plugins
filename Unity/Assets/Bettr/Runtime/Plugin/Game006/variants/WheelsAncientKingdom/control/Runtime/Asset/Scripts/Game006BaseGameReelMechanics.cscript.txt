require "math"
require "Core"
require "Game006BaseGameReelWaysMechanic"

Game006BaseGameReelMechanics = {
    Config = {
        Machine = "Game006",
        Variant = "WheelsAncientKingdom",
        Experiment = "control",
    },
    WaysMechanic = nil,
}

function Game006BaseGameReelMechanics:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game006BaseGameReelMechanics:Initialize(reel)
    self.WaysMechanic = Game006BaseGameReelWaysMechanic:new()
    self.WaysMechanic:Initialize(reel)
end

function Game006BaseGameReelMechanics:SpinReelSpinStartedRollBack(reel)
end

function Game006BaseGameReelMechanics:SpinReelSpinStartedRollForward(reel)
end

function Game006BaseGameReelMechanics:SpinReelSpinEndingRollBack(reel)
end

function Game006BaseGameReelMechanics:SpinReelSpinEndingRollForward(reel)
end

function Game006BaseGameReelMechanics:SpinReelReachedOutcomeStopIndex(reel)
end

function Game006BaseGameReelMechanics:OnSpinReelsStopped(reel)
end

function Game006BaseGameReelMechanics:StartEngines(reel, machine)
    if self.ChooseASideMechanic then
        self.ChooseASideMechanic:StartEngines(reel, machine)
    end
    if self.ScattersMechanic then
       self.ScattersMechanic:StartEngines(reel, machine)
    end
    if self.ReelAnticipationMechanic then
       self.ReelAnticipationMechanic:StartEngines(reel, machine)
    end
end

function Game006BaseGameReelMechanics:OnOutcomeReceived(reel)
    if self.ChooseASideMechanic then
        self.ChooseASideMechanic:OnOutcomeReceived(reel)
    end
    if self.ScattersMechanic then
       self.ScattersMechanic:OnOutcomeReceived(reel)
    end
end

function Game006BaseGameReelMechanics:OnApplyOutcomeReceived(reel)
    if self.ReelAnticipationMechanic then
        self.ReelAnticipationMechanic:OnApplyOutcomeReceived(reel)
    else
        reel.BettrReelController.OnApplyOutcomeReceived(reel)
    end
end

function Game006BaseGameReelMechanics:SpinEngines(reel)
end



