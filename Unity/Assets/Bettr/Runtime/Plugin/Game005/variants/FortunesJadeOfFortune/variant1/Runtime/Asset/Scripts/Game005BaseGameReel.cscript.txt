require "math"
require "Core"
require "Utils"
require "Game005BaseGameReelMechanics"

Game005BaseGameReel = {
    Config = {
        Machine = "Game005",
        Variant = "FortunesJadeOfFortune",
        Experiment = "variant1",
    },
    Mechanics = nil,
}

function Game005BaseGameReel:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game005BaseGameReel:destroy()
	System.Print("Game005BaseGameReel destroy tile id={0}", self.id)
end

function Game005BaseGameReel:OnError(callStack)
	System.Error("Game005BaseGameReel Error CallStack: {0}", callStack)
end

function Game005BaseGameReel:Awake()
	System.Print("Game005BaseGameReel Awake tile id={0}", self.id)
	self.Mechanics = Game005BaseGameReelMechanics:new()
	self.Mechanics:Initialize(self)
end

function Game005BaseGameReel:StartEngines(machine)
    series
        do
            self.BettrReelStripController.StartEngines()
            self.Mechanics:StartEngines(self, machine)                          
        end
    end
end

function Game005BaseGameReel:OnOutcomeReceived()
    series
        do
            self.BettrReelStripController.OnOutcomeReceived()
            self.Mechanics:OnOutcomeReceived(self)
        end
    end
end

function Game005BaseGameReel:OnApplyOutcomeReceived()
    series
        do
            self.Mechanics:OnApplyOutcomeReceived(self)
        end
    end
end

function Game005BaseGameReel:SpinEngines()
    self.BettrReelStripController.SpinEngines()
    self.Mechanics.SpinEngines(self)
end

function Game005BaseGameReel:Update()
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local reelIsLocked = reelState.ReelIsLocked
    if reelIsLocked then
        return
    end
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    local spinState = reelSpinState.ReelSpinState
    self.ReelSpinStateDispatchTable[spinState](self)    
end

function Game005BaseGameReel:SpinReelSpinStartedRollBack()
    self.BettrReelStripController.SpinReelSpinStartedRollBack()
    self.Mechanics:SpinReelSpinStartedRollBack(self)    
end

function Game005BaseGameReel:SpinReelSpinStartedRollForward()
    self.BettrReelStripController.SpinReelSpinStartedRollForward()
    self.Mechanics:SpinReelSpinStartedRollForward(self)    
end

function Game005BaseGameReel:SpinReelSpinEndingRollBack()    
    self.BettrReelStripController.SpinReelSpinEndingRollBack()
    self.Mechanics:SpinReelSpinEndingRollBack(self)    
end

function Game005BaseGameReel:SpinReelSpinEndingRollForward()
    self.BettrReelStripController.SpinReelSpinEndingRollForward()
    self.Mechanics:SpinReelSpinEndingRollForward(self)    
end

function Game005BaseGameReel:SpinReelReachedOutcomeStopIndex()
    BettrAudioController.PlayAudioOnce("reelstop")
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    reelSpinState.ReelSpinState = "SpinEndingRollForward"
    self.Mechanics:SpinReelReachedOutcomeStopIndex(self)
end

function Game005BaseGameReel:SpinReelStopped()
    local reelCount = Game005BaseGameLayout.ReelCount.First.Value
    local lastReelID = "Reel" .. reelCount
    self.Mechanics:OnSpinReelStopped(self)
    if self.ReelID == lastReelID then
        Game005BaseGameMachine:OnSpinReelsStopped()
    end
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    reelSpinState.ReelSpinState = "StoppedWaiting"
end

function Game005BaseGameReel:SpinReelStoppedWaiting()    
end

function Game005BaseGameReel:SpinReelWaiting()    
end

function Game005BaseGameReel:SpinReelSpinning()
    return self.BettrReelStripController.SpinReelSpinning()    
end

function Game005BaseGameReel:PlaySpinReelSpinEndingRollBackAnimation()
    series
        do        
            local spinEndingRollbackAnimation = Game005BaseGameSpinEndingRollBackAnimation[self.ReelID]
            
            if spinEndingRollbackAnimation == nil then
                return
            end
                      
            if spinEndingRollbackAnimation.First.Counter > 0 then
                return                
            end               
            
            spinEndingRollbackAnimation.First.Counter = 1 
                                                       
            local reelState = Game005BaseGameReelState[self.ReelID].First
            local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
            local reelSymbolsState = Game005BaseGameReelSymbolsState[self.ReelID].Array
                        
            local rollbackAnimationArray = spinEndingRollbackAnimation.Array            
            
            local animatorGroupPrefix = "SymbolLandWinAnimatorGroup"
            
            for i=1,#rollbackAnimationArray do
                local rowIndex = rollbackAnimationArray[i].RowIndex
                self:PlaySymbolAnimation(rowIndex, animatorGroupPrefix, false)
            end
        end
    end
end

function Game005BaseGameReel:PlaySymbolAnimation(rowIndex, animatorGroupPrefix, waitForAnimationComplete)
    local animationDuration = 0.0
    series
        do                    
            if rowIndex >= 0 then
                local luaIndex = rowIndex + 1       
                local animatorGroupProperty = self[animatorGroupPrefix .. luaIndex]
                local symbolGroupProperty = self["SymbolGroup" .. luaIndex]
                local currentKey = symbolGroupProperty.CurrentKey
                local animatorProperty = animatorGroupProperty[currentKey]
                animatorProperty.waitForAnimationComplete = waitForAnimationComplete
                -- animationDuration = Core.Animator:PlayAnimatorProperty(currentKey, animatorProperty)
                animationDuration = BettrVisualsController.PlayAnimatorProperty(animatorProperty)
            end
        end
    end
    return animationDuration
end

function Game005BaseGameReel:CloneAndOverlayCurrentSymbol(rowIndex)
    local overlaySymbol = nil
    series
        do                    
            overlaySymbol = self:CloneCurrentSymbol(rowIndex)
            if overlaySymbol ~= nil then
                BettrVisualsController.SetLayerRecursively(overlaySymbol, Core.Layers.SLOT_REELS_OVERLAY)
            end
        end
    end
    return overlaySymbol
end

function Game005BaseGameReel:CloneCurrentSymbol(rowIndex)
    local clonedSymbol = nil
    series
        do                    
            if rowIndex >= 0 then
                local luaIndex = rowIndex + 1       
                local symbolGroupProperty = self["SymbolGroup" .. luaIndex] 
                clonedSymbol = symbolGroupProperty.CloneCurrent                               
            end
        end
    end
    return clonedSymbol
end

Game005BaseGameReel.ReelSpinStateDispatchTable = {
    Waiting = Game005BaseGameReel.SpinReelWaiting,
    Spinning = Game005BaseGameReel.SpinReelSpinning,
    Stopped = Game005BaseGameReel.SpinReelStopped,
    StoppedWaiting = Game005BaseGameReel.SpinReelStoppedWaiting,
    ReachedOutcomeStopIndex = Game005BaseGameReel.SpinReelReachedOutcomeStopIndex,
    SpinStartedRollBack = Game005BaseGameReel.SpinReelSpinStartedRollBack,
    SpinStartedRollForward = Game005BaseGameReel.SpinReelSpinStartedRollForward,
    SpinEndingRollForward = Game005BaseGameReel.SpinReelSpinEndingRollForward,
    SpinEndingRollBack = Game005BaseGameReel.SpinReelSpinEndingRollBack
}

return Game005BaseGameReel:new()