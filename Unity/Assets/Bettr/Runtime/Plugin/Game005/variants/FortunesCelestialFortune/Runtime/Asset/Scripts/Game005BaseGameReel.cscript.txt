require "math"
require "Core"
require "Utils"
require "Game005BaseGameReelMechanics"

Game005BaseGameReel = {
    Mechanics = nil,
}

function Game005BaseGameReel:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game005BaseGameReel:destroy()
	System.Print("Game005BaseGameReel destroy tile id={0}", self.id)
end

function Game005BaseGameReel:OnError(callStack)
	System.Error("Game005BaseGameReel Error CallStack: {0}", callStack)
end

function Game005BaseGameReel:Awake()
	System.Print("Game005BaseGameReel Awake tile id={0}", self.id)
	self.Mechanics = Game005BaseGameReelMechanics:new()
	self.Mechanics:Initialize(self)
end

function Game005BaseGameReel:Start()
    series
        do
	        System.Print("Game005BaseGameReel Start tile id={0}", self.id)	        
        end
    end
end

function Game005BaseGameReel:StartEngines()
    System.Print("Game005BaseGameReel StartEngines tile id={0}", self.id)
    series
        do
            local reelGo = self.gameObject
            local reelSymbols = Game005BaseGameReelSet[self.ReelID].Array
            local reelState = Game005BaseGameReelState[self.ReelID].First
            local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
            local reelSymbolsState = Game005BaseGameReelSymbolsState[self.ReelID].Array
            local reelStopIndex = reelSpinState.ReelStopIndex
            local reelSymbolCount = reelState.ReelSymbolCount                        
            for i = 1, #reelSymbolsState do
                local symbolState = reelSymbolsState[i]
                local reelPosition = symbolState.ReelPosition
                local symbolStopIndex = 1 + (reelSymbolCount + reelStopIndex + reelPosition) % reelSymbolCount 
                local reelSymbol = reelSymbols[symbolStopIndex].ReelSymbol
                local symbolGroupProperty = self["SymbolGroup" .. i]
                if symbolGroupProperty.Current ~= nil then
                    symbolGroupProperty.Current.SetActive(false)
                    symbolGroupProperty.CurrentKey = null
                end
                local currentValue = symbolGroupProperty[reelSymbol]
                currentValue.SetActive(true)
                symbolGroupProperty.Current = currentValue
                symbolGroupProperty.CurrentKey = reelSymbol
            end                                
        end
    end
end

function Game005BaseGameReel:OnOutcomeReceived()
    series
        do
            local reelState = Game005BaseGameReelState[self.ReelID].First
            local delayInSeconds = reelState.ReelStopDelayInSeconds
            System.WaitForSeconds(delayInSeconds)
            self:SpliceReel()
            reelState.OutcomeReceived = true
        end
    end
end

function Game005BaseGameReel:SpinEngines()
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    reelSpinState.ReelSpinState = "SpinStartedRollBack"
    local reelState = Game005BaseGameReelState[self.ReelID].First
    reelState.OutcomeReceived = false
end

function Game005BaseGameReel:Update()
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local reelIsLocked = reelState.ReelIsLocked
    if reelIsLocked then
        return
    end
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    local spinState = reelSpinState.ReelSpinState
    self.ReelSpinStateDispatchTable[spinState](self)    
end

function Game005BaseGameReel:SpinReelSpinStartedRollBack()
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    reelSpinState.SpeedInSymbolUnitsPerSecond = reelState.SpinStartedRollBackSpeedInSymbolUnitsPerSecond
    local reelSpinDirection = reelSpinState.ReelSpinDirection
    local spinDirectionIsDown = reelSpinDirection == "Down"
    local slideDistanceThresholdInSymbolUnits = reelState.SpinStartedRollBackDistanceInSymbolUnits
    local slideDistanceInSymbolUnits = self:CalculateSlideDistanceInSymbolUnits()
    if spinDirectionIsDown then
        if slideDistanceInSymbolUnits > slideDistanceThresholdInSymbolUnits then
            self:SlideReelSymbols(slideDistanceThresholdInSymbolUnits)
            reelSpinState.ReelSpinState = "SpinStartedRollForward"
        else
            self:SlideReelSymbols(slideDistanceInSymbolUnits)
        end
    else
        if slideDistanceInSymbolUnits < slideDistanceThresholdInSymbolUnits then
            self:SlideReelSymbols(slideDistanceThresholdInSymbolUnits)
            reelSpinState.ReelSpinState = "SpinStartedRollForward"
        else
            self:SlideReelSymbols(slideDistanceInSymbolUnits)
        end
    end    
end

function Game005BaseGameReel:SpinReelSpinStartedRollForward()
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    reelSpinState.SpeedInSymbolUnitsPerSecond = reelState.SpinStartedRollForwardSpeedInSymbolUnitsPerSecond
    local reelSpinDirection = reelSpinState.ReelSpinDirection
    local spinDirectionIsDown = reelSpinDirection == "Down"
    local slideDistanceInSymbolUnits = self:CalculateSlideDistanceInSymbolUnits()
    if spinDirectionIsDown then
        if slideDistanceInSymbolUnits < 0 then
            self:SlideReelSymbols(0)
            reelSpinState.ReelSpinState = "Spinning"
        else
            self:SlideReelSymbols(slideDistanceInSymbolUnits)
        end
    else
        if slideDistanceInSymbolUnits > 0 then
            self:SlideReelSymbols(0)
            reelSpinState.ReelSpinState = "Spinning"
        else
            self:SlideReelSymbols(slideDistanceInSymbolUnits)
        end
    end    
end

function Game005BaseGameReel:SpinReelSpinEndingRollBack()    
    
    -- spin ending roll back animation
    System.StartCoroutine(self, "PlaySpinReelSpinEndingRollBackAnimation")
    
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    local reelSymbolsState = Game005BaseGameReelSymbolsState[self.ReelID].Array
    
    local reelStopIndex = reelSpinState.ReelStopIndex
    
    reelSpinState.SpeedInSymbolUnitsPerSecond = reelState.SpinEndingRollBackSpeedInSymbolUnitsPerSecond
    local reelSpinDirection = reelSpinState.ReelSpinDirection
    local spinDirectionIsDown = reelSpinDirection == "Down"
    local slideDistanceInSymbolUnits = self:CalculateSlideDistanceInSymbolUnits()
    if spinDirectionIsDown then
        if slideDistanceInSymbolUnits > 0 then
            self:SlideReelSymbols(0)
            reelSpinState.ReelSpinState = "Stopped"
        else
            self:SlideReelSymbols(slideDistanceInSymbolUnits)
        end
    else
        if slideDistanceInSymbolUnits < 0 then
            self:SlideReelSymbols(0)
            reelSpinState.ReelSpinState = "Stopped"
        else
            self:SlideReelSymbols(slideDistanceInSymbolUnits)
        end
    end    
end

function Game005BaseGameReel:SpinReelSpinEndingRollForward()
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    reelSpinState.SpeedInSymbolUnitsPerSecond = reelState.SpinEndingRollForwardSpeedInSymbolUnitsPerSecond
    local reelSpinDirection = reelSpinState.ReelSpinDirection
    local spinDirectionIsDown = reelSpinDirection == "Down"
    local slideDistanceThresholdInSymbolUnits = reelState.SpinEndingRollForwardDistanceInSymbolUnits
    local slideDistanceInSymbolUnits = self:CalculateSlideDistanceInSymbolUnits()
    if spinDirectionIsDown then
        if slideDistanceInSymbolUnits < slideDistanceThresholdInSymbolUnits then
            self:SlideReelSymbols(slideDistanceThresholdInSymbolUnits)
            reelSpinState.ReelSpinState = "SpinEndingRollBack"
        else
            self:SlideReelSymbols(slideDistanceInSymbolUnits)
        end
    else
        if slideDistanceInSymbolUnits > slideDistanceThresholdInSymbolUnits then
            self:SlideReelSymbols(slideDistanceThresholdInSymbolUnits)
            reelSpinState.ReelSpinState = "SpinEndingRollBack"
        else
            self:SlideReelSymbols(slideDistanceInSymbolUnits)
        end
    end    
end

function Game005BaseGameReel:SpinReelReachedOutcomeStopIndex()
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    reelSpinState.ReelSpinState = "SpinEndingRollForward"
end

function Game005BaseGameReel:SpinReelStopped()
    local reelCount = Game005BaseGameLayout.ReelCount.First.Value
    local lastReeID = "Reel" .. reelCount
    if self.ReelID == lastReeID then
        Game005BaseGameMachine:OnSpinReelsStopped()
    end 
end

function Game005BaseGameReel:SpinReelWaiting()
end

function Game005BaseGameReel:SpinReelSpinning()
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    reelSpinState.SpeedInSymbolUnitsPerSecond = reelState.SpinSpeedInSymbolUnitsPerSecond
    local slideDistanceInSymbolUnits = self:AdvanceReel()
    self:SlideReelSymbols(slideDistanceInSymbolUnits)
    return true    
end

function Game005BaseGameReel:CalculateSlideDistanceInSymbolUnits()
    local frameDurationInSeconds = Time.deltaTime;
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    local speedInSymbolUnits = reelSpinState.SpeedInSymbolUnitsPerSecond;
    local distanceInSymbolUnits = speedInSymbolUnits * frameDurationInSeconds;
    local reelSpinDirection = reelSpinState.ReelSpinDirection
    local spinDirectionIsDown = reelSpinDirection == "Down"
    local slideDistanceInSymbolUnits = reelSpinState.SlideDistanceInSymbolUnits
    slideDistanceInSymbolUnits = slideDistanceInSymbolUnits + distanceInSymbolUnits
    return slideDistanceInSymbolUnits
end

function Game005BaseGameReel:AdvanceReel()
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    local reelSpinDirection = reelSpinState.ReelSpinDirection
    local spinDirectionIsDown = reelSpinDirection == "Down"
    local slideDistanceOffsetInSymbolUnits = (spinDirectionIsDown and 1 or -1)
    local slideDistanceInSymbolUnits = self:CalculateSlideDistanceInSymbolUnits()
    while ( (spinDirectionIsDown and slideDistanceInSymbolUnits < -1) or (not spinDirectionIsDown and slideDistanceInSymbolUnits > 1))
    do
        self:AdvanceSymbols()        
        self:UpdateReelStopIndexes()        
        self:ApplySpinReelStop()    
        slideDistanceInSymbolUnits = slideDistanceInSymbolUnits + slideDistanceOffsetInSymbolUnits
    end
    local spinState = reelSpinState.ReelSpinState     
    if spinState == "ReachedOutcomeStopIndex" then
        slideDistanceInSymbolUnits = 0
    end
    if spinState == "Stopped" then
        slideDistanceInSymbolUnits = 0
    end      
    return slideDistanceInSymbolUnits
end

function Game005BaseGameReel:AdvanceSymbols()
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local symbolCount = reelState.SymbolCount
    for i = 1, symbolCount do        
        self:UpdateReelSymbolForSpin(i)
    end    
end

function Game005BaseGameReel:UpdateReelSymbolForSpin(symbolIndex)    
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    local reelSymbolsState = Game005BaseGameReelSymbolsState[self.ReelID].Array
    local symbolState = reelSymbolsState[symbolIndex]
    local symbolIsLocked = symbolState.SymbolIsLocked
    if symbolIsLocked then
        return
    end
    local reelSymbols = Game005BaseGameReelSet[self.ReelID].Array
    local rowVisible = symbolState.RowVisible 
    local reelStopIndex = reelSpinState.ReelStopIndex
    local reelSymbolCount = reelState.ReelSymbolCount
    local reelPosition = symbolState.ReelPosition
    local symbolStopIndex = 1 + (reelSymbolCount + reelStopIndex + reelPosition) % reelSymbolCount
    local reelSymbol = reelSymbols[symbolStopIndex].ReelSymbol
    local symbolGroupProperty = self["SymbolGroup" .. symbolIndex]
    if symbolGroupProperty.Current ~= nil then
        symbolGroupProperty.Current.SetActive(false)
        symbolGroupProperty.CurrentKey = null
    end
    local currentValue = symbolGroupProperty[reelSymbol]
    currentValue.SetActive(true)
    symbolGroupProperty.Current = currentValue
    symbolGroupProperty.CurrentKey = reelSymbol
end

function Game005BaseGameReel:UpdateReelStopIndexes()
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    local reelSymbolCount = reelState.ReelSymbolCount
    local reelStopIndex = reelSpinState.ReelStopIndex
    local reelStopIndexAdvanceOffset = reelState.ReelStopIndexAdvanceOffset
    reelStopIndex = reelStopIndex + reelStopIndexAdvanceOffset
    reelStopIndex = (reelSymbolCount + reelStopIndex) % reelSymbolCount
    reelSpinState.ReelStopIndex = reelStopIndex
end

function Game005BaseGameReel:ApplySpinReelStop()
    local reelState = Game005BaseGameReelState[self.ReelID].First
    if not reelState.OutcomeReceived then
        return
    end
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First    
    local spinOutcome = Game005BaseGameReelSpinOutcome[self.ReelID].First   
    local reelSymbolCount = reelState.ReelSymbolCount     
    local reelStopIndex = reelSpinState.ReelStopIndex
    local reelStopIndexAdvanceOffset = reelState.ReelStopIndexAdvanceOffset
    reelStopIndex = reelStopIndex - reelStopIndexAdvanceOffset
    reelStopIndex = (reelSymbolCount + reelStopIndex) % reelSymbolCount
    local outcomeReelStopIndex = spinOutcome.OutcomeReelStopIndex
    if outcomeReelStopIndex == reelStopIndex then
        reelSpinState.ReelSpinState = "ReachedOutcomeStopIndex"
    end
end

function Game005BaseGameReel:SlideReelSymbols(slideDistanceInSymbolUnits)
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local symbolCount = reelState.SymbolCount
    for i = 1, symbolCount do        
        self:SlideSymbol(i, slideDistanceInSymbolUnits)
    end
    reelSpinState.SlideDistanceInSymbolUnits = slideDistanceInSymbolUnits    
end

function Game005BaseGameReel:SlideSymbol(symbolIndex, slideDistanceInSymbolUnits)
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local reelSymbolsState = Game005BaseGameReelSymbolsState[self.ReelID].Array
    local symbolState = reelSymbolsState[symbolIndex]
    local symbolIsLocked = symbolState.SymbolIsLocked
    if symbolIsLocked then
        return
    end
    local symbolProperty = self["Symbol" .. symbolIndex]
    local localPosition = symbolProperty.gameObject.transform.localPosition
    local symbolPosition = symbolState.SymbolPosition
    local verticalSpacing = reelState.SymbolVerticalSpacing
    local symbolOffsetY = reelState.SymbolOffsetY
    local yLocalPosition = verticalSpacing * symbolPosition
    yLocalPosition = yLocalPosition + verticalSpacing * slideDistanceInSymbolUnits + symbolOffsetY
    localPosition = Vector3:new(
                localPosition.x,
                yLocalPosition,
                localPosition.z)
    symbolProperty.gameObject.transform.localPosition = localPosition
end

function Game005BaseGameReel:SpliceReel()
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    local spinOutcome = Game005BaseGameReelSpinOutcome[self.ReelID].First
    local d1 = spinOutcome.OutcomeReelStopIndex
    local d2 = reelState.SpliceDistance
    local reelSymbolCount = reelState.ReelSymbolCount
    local spinDirectionIsDown = reelSpinState.ReelSpinDirection == "Down"    
    
    local skipSplice = self:SkipSpliceReel()          
    if spinDirectionIsDown then
        if not skipSplice then
            local reelStopIndex = (d1 + d2 + reelSymbolCount) % reelSymbolCount
            reelSpinState.ReelStopIndex = reelStopIndex - 1
        end
    elseif not spinDirectionIsDown then
        if not skipSplice then
            local reelStopIndex = (d1 - d2 + reelSymbolCount) % reelSymbolCount
            reelSpinState.ReelStopIndex = reelStopIndex + 1
        end
    end
end

function Game005BaseGameReel:SkipSpliceReel()
    -- if the reel stop index will be reached by current spin
    -- there is no need to splice
    
    local reelState = Game005BaseGameReelState[self.ReelID].First
    local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
    local spinOutcome = Game005BaseGameReelSpinOutcome[self.ReelID].First
    local spinDirectionIsDown = reelSpinState.ReelSpinDirection == "Down"
    local reelStopIndex = reelSpinState.ReelStopIndex
    local outcomeReelStopIndex = spinOutcome.OutcomeReelStopIndex
    
    local topSymbolCount = reelState.TopSymbolCount
    local bottomSymbolCount = reelState.BottomSymbolCount
    local visibleSymbolCount = reelState.VisibleSymbolCount
    
    local inTopSymbolOffset = outcomeReelStopIndex >= reelStopIndex - topSymbolCount and outcomeReelStopIndex < reelStopIndex
    local inBottomSymbolOffset = outcomeReelStopIndex >= reelStopIndex + visibleSymbolCount and outcomeReelStopIndex < reelStopIndex + visibleSymbolCount + bottomSymbolCount
        
    if spinDirectionIsDown then
        -- for a spin down, this would occur if the outcome reel stop index is 
        -- in the top symbol offset or visible symbols
        -- but not the bottom visible symbols
        local skipSlice = inTopSymbolOffset
        return skipSlice
    end
    
    if not spinDirectionIsDown then
        -- for a spin up, this would occur if the reel stop index is 
        -- in the bottom symbol offset 
        -- but not in the top symbol offset or visible symbols
        local skipSlice = inBottomSymbolOffset
        return skipSlice
    end
    
    return false
end

function Game005BaseGameReel:PlaySpinReelSpinEndingRollBackAnimation()
    series
        do        
            local spinEndingRollbackAnimation = Game005BaseGameSpinEndingRollBackAnimation[self.ReelID]
            
            if spinEndingRollbackAnimation == nil then
                return
            end
                      
            if spinEndingRollbackAnimation.First.Counter > 0 then
                return                
            end               
            
            spinEndingRollbackAnimation.First.Counter = 1 
                                                       
            local reelState = Game005BaseGameReelState[self.ReelID].First
            local reelSpinState = Game005BaseGameReelSpinState[self.ReelID].First
            local reelSymbolsState = Game005BaseGameReelSymbolsState[self.ReelID].Array
                        
            local rollbackAnimationArray = spinEndingRollbackAnimation.Array            
            
            local animatorGroupPrefix = "SymbolLandWinAnimatorGroup"
            
            for i=1,#rollbackAnimationArray do
                local rowIndex = rollbackAnimationArray[i].RowIndex
                self:PlaySymbolAnimation(rowIndex, animatorGroupPrefix, false)
            end
        end
    end
end

function Game005BaseGameReel:PlaySymbolAnimation(rowIndex, animatorGroupPrefix, waitForAnimationComplete)
    local animationDuration = 0.0
    series
        do                    
            if rowIndex >= 0 then
                local luaIndex = rowIndex + 1       
                local animatorGroupProperty = self[animatorGroupPrefix .. luaIndex]
                local symbolGroupProperty = self["SymbolGroup" .. luaIndex]
                local currentKey = symbolGroupProperty.CurrentKey
                local animatorProperty = animatorGroupProperty[currentKey]
                animatorProperty.waitForAnimationComplete = waitForAnimationComplete
                -- animationDuration = Core.Animator:PlayAnimatorProperty(currentKey, animatorProperty)
                animationDuration = BettrVisualsController.PlayAnimatorProperty(animatorProperty)
            end
        end
    end
    return animationDuration
end

function Game005BaseGameReel:CloneAndOverlayCurrentSymbol(rowIndex)
    local overlaySymbol = nil
    series
        do                    
            overlaySymbol = self:CloneCurrentSymbol(rowIndex)
            if overlaySymbol ~= nil then
                BettrVisualsController.SetLayerRecursively(overlaySymbol, Core.Layers.SLOT_REELS_OVERLAY)
            end
        end
    end
    return overlaySymbol
end

function Game005BaseGameReel:CloneCurrentSymbol(rowIndex)
    local clonedSymbol = nil
    series
        do                    
            if rowIndex >= 0 then
                local luaIndex = rowIndex + 1       
                local symbolGroupProperty = self["SymbolGroup" .. luaIndex] 
                clonedSymbol = symbolGroupProperty.CloneCurrent                               
            end
        end
    end
    return clonedSymbol
end

Game005BaseGameReel.ReelSpinStateDispatchTable = {
    Waiting = Game005BaseGameReel.SpinReelWaiting,
    Spinning = Game005BaseGameReel.SpinReelSpinning,
    Stopped = Game005BaseGameReel.SpinReelStopped,
    ReachedOutcomeStopIndex = Game005BaseGameReel.SpinReelReachedOutcomeStopIndex,
    SpinStartedRollBack = Game005BaseGameReel.SpinReelSpinStartedRollBack,
    SpinStartedRollForward = Game005BaseGameReel.SpinReelSpinStartedRollForward,
    SpinEndingRollForward = Game005BaseGameReel.SpinReelSpinEndingRollForward,
    SpinEndingRollBack = Game005BaseGameReel.SpinReelSpinEndingRollBack
}

return Game005BaseGameReel:new()