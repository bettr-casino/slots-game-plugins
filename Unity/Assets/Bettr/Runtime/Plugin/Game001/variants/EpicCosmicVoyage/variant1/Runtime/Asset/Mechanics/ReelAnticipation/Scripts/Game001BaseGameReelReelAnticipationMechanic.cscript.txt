require "math"
require "Core"

Game001BaseGameReelReelAnticipationMechanic = {
    Config = {
        Machine = "Game001",
        Variant = "EpicCosmicVoyage",
        Experiment = "variant1",
        Mechanic = "ReelAnticipation",
    },
}

function Game001BaseGameReelReelAnticipationMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game001BaseGameReelReelAnticipationMechanic:destroy()
	System.Print("Game001BaseGameReelReelAnticipationMechanic destroy tile id={0}", self.id)
end

function Game001BaseGameReelReelAnticipationMechanic:Initialize(reel)
    self.State = {
        MechanicsPrefab = nil,
    }
end

function Game001BaseGameReelReelAnticipationMechanic:StartEngines(reel, machine)
    local mechanicPrefab = machine.Mechanics.ReelAnticipationMechanic.State.MechanicsPrefab
    local clonedMechanicPrefab = BettrVisualsController.CloneAndOverlayGameObject(mechanicPrefab)
    clonedMechanicPrefab.name = mechanicPrefab.name .. reel.ReelID
    BettrVisualsController.OverlayFirstOverSecond(clonedMechanicPrefab, reel.gameObject)
    BettrVisualsController.ScaleFirstToSecond(clonedMechanicPrefab, reel.gameObject)
    BettrVisualsController.SetZeroZPosition(clonedMechanicPrefab)
    self.State.MechanicsPrefab = clonedMechanicPrefab
end

function Game001BaseGameReelReelAnticipationMechanic:OnApplyOutcomeReceived(reel) 
    local mechanicsPrefab = self.State.MechanicsPrefab
    mechanicsPrefab.SetActive(true)
    reel.BettrReelController.OnApplyOutcomeReceived()
end


