require "math"
require "Core"

Game001BaseGameMachineChooseASideMechanic = {
    Config = {
        Machine = "Game001",
        Variant = "EpicAtlantisTreasures",
        Experiment = "control",
    },
    State = {
        MechanicsPrefab = nil
    }
}

function Game001BaseGameMachineChooseASideMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game001BaseGameMachineChooseASideMechanic:Initialize(machine)
    series
        do
            local manifest = Game001.Manifest
            local prefabName = "BaseGameMachineChooseASide"
            local machineParent = machine.MachineParent
            machineParent.SetActive(false)
            local mechanicsParent = machine.MechanicsParent
            mechanicsParent.SetActive(true)
            System.Print("Game001BaseGameMachineChooseASideMechanic:Initialize before manifest.BundleName={0} manifest.BundleVersion={1} prefabName={2} mechanicsParentGameObject={3}", manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject.name)    
            local mechanicsPrefab = BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject)
            mechanicsPrefab.SetActive(false)
            self.State.MechanicsPrefab = mechanicsPrefab
            System.Print("Game001BaseGameMachineCascadingReelsMultiplierMechanic:Initialize mechanicsPrefab={0}", mechanicsPrefab.name)            
        end
    end
end

function Game001BaseGameMachineChooseASideMechanic:StartMachine(machine)
    series
        do
            BettrDialogController.ShowModalDialog(self.State.MechanicsPrefab)
        end
    end
end

function Game001BaseGameMachineChooseASideMechanic:TryPaying(machine)
end


