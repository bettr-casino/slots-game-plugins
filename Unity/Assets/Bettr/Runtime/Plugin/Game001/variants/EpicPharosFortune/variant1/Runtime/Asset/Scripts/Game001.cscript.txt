require "math"
require "Core"

Game001 = {
    Manifest = {        
        BundleName = "game001epicpharosfortune",
        BundleVersion = "variant1",
        BaseGameBackgroundPrefabName = "Game001BaseGameBackground",
        BaseGameMachinePrefabName = "Game001BaseGameMachine",
    }
}

function Game001:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game001:destroy()
	System.Print("Game001 destroy tile id={0}", self.id)
end

function Game001:OnError(callStack)
	System.Error("Game001 Error CallStack: {0}", callStack)
end

function Game001:Awake()
	System.Print("Game001 Awake tile id={0}", self.id)
end

function Game001:Start()
    series
        do
            BettrVisualsController.SwitchOrientationToLandscape()
        end
        do
            Game001BaseGameBackground:StartBackground()
        end
-- NOTE: Commented out: UNTIL WE HAVE BETTER AUDIO        
--        do
--            BettrAudioController.LoadBackgroundAudio("Game001EpicPharosFortune")
--        end
--        do
--            BettrAudioController.PlayGameAudioLoop("Game001EpicPharosFortune", "variant1", "Game001EpicPharosFortuneBackgroundMusic")
--        end
-- NOTE: Commented out: Will be controlled by the BettrMainLobbySceneController
--        do
--            BettrVideoController.LoadBackgroundVideo(Game001BaseGameBackground, "Game001", "EpicPharosFortune", "variant1")
--        end        
--        do
--            BettrVideoController.PlayBackgroundVideo(Game001BaseGameBackground, "Game001", "EpicPharosFortune", "variant1")
--        end
-- NOTE: Commented out: Will be preloaded into the Scene
--        do
--            System.Print("Game001:Start Load Machine Prefabs tile id={0}", self.id)
--
--            self:LoadBaseGamePrefab()
--
--        end
-- NOTE: Commented out: Will be controlled by the BettrMainLobbySceneController        
--        do
--            self:SetBaseGameActive(true)
--        end
    end
end

-- NOTE: Commented out: Will be preloaded into the Scene
-- function Game001:LoadBaseGameBackgroundPrefab()
--     series
--         do
--             System.Print("Game001:LoadBaseGameBackgroundPrefab tile id={0}", self.id)
--             local manifest = self.Manifest
--             local backgroundParentProperty = self.BaseGameBackgroundParent
--             local backgroundParent = backgroundParentProperty["Pivot"]                        
--             BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, manifest.BaseGameBackgroundPrefabName, backgroundParent)
--         end
--     end
-- end

-- NOTE: Commented out: Will be preloaded into the Scene
-- function Game001:LoadBaseGamePrefab()
--    series
--         do            
--             local manifest = self.Manifest
--             local baseGameMachineParentProperty = self.BaseGameMachineParent
--             local baseGameMachineParent = baseGameMachineParentProperty["Pivot"]
--             BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, manifest.BaseGameMachinePrefabName, baseGameMachineParent)
--         end
--     end
-- end

-- NOTE: Commented out: Will be preloaded into the Scene
-- function Game001:SetBaseGameActive(active)
--     if active then
--         self.BaseGameMachineParent.SetActive(true)
--         Game001MachineState.Current.First.ActiveGame = "BaseGame"
--     else
--         self.BaseGameMachineParent.SetActive(false)
--     end
-- end

function Game001:ActiveGame()
    return Game001MachineState.Current.First.ActiveGame
end

function Game001:OnBecameVisible()
	System.Print("Game001 OnBecameVisible tile id={0}", self.id)
end

function Game001:OnPointerClick()
	System.Print("Game001 OnPointerClick tile id={0}", self.id)
end

function Game001:OnPointerClick1Param(param)
	System.Print("Game001 OnPointerClick1Param param={0} tile id={1}", param, self.id)
end

return Game001:new()