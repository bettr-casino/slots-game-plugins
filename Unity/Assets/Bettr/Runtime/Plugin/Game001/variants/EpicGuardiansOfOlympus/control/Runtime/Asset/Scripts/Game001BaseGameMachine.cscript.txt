require "math"
require "Core"
require "Game001BaseGameReel"
require "Game001BaseGameMachineMechanics"

Game001BaseGameMachine = {
    Mechanics = nil,
    InPreviewMode = false,
    PreviewSpinsRemaining = 0,
}

function Game001BaseGameMachine:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	
	return o
end

function Game001BaseGameMachine:destroy()
	System.Print("Game001BaseGameMachine destroy tile id={0}", self.id)
end

function Game001BaseGameMachine:OnError(callStack)
	System.Error("Game001BaseGameMachine Error CallStack: {0}", callStack)
end

function Game001BaseGameMachine:Awake()
	System.Print("Game001BaseGameMachine Awake tile id={0}", self.id)
	self.Mechanics = Game001BaseGameMachineMechanics:new()
	self.Mechanics:Initialize(self)
end

function Game001BaseGameMachine:Start()
    series
        do
            BettrAudioController.StopAudio()
            self:ConfigurePreviewMode()
	        self:ConfigureSettings()
	        self:ShowSettings()
	        self:PlayStartAnimations()
	        self:StartEngines()
        end
    end
end

function Game001BaseGameMachine:OnSpinButtonClicked()
    series
        do
            BettrAudioController.StopAudio()
            BettrAudioController.PlayAudioOnce("spinbutton")
            self.Mechanics:OnSpinButtonClicked(self)
            self:SpinEngines()
            self:WaitForApplyOutcomeDelay()
            self:LoadServerOutcome()
            self:OnOutcomeReceived()
        end
    end
end

function Game001BaseGameMachine:ConfigurePreviewMode()
    local userInPreviewMode = BettrUserController.UserInPreviewMode
    self.InPreviewMode = userInPreviewMode
    if userInPreviewMode then
        self.PreviewSpinsRemaining = BettrUserController.UserPreviewModeSpins
        local statusTexts = self.StatusTexts
        local goodLuckText = statusTexts["GoodLuckText"]
        goodLuckText.SetText("PREVIEW MODE Spins Remaining " .. self.PreviewSpinsRemaining)
        statusTexts.SetCurrentActive("GoodLuckText")    
    end
end

function Game001BaseGameMachine:ConfigureSettings()
    self.CreditsText.SetText(BettrUser.Coins)
    self.WinText.SetText("0")       
    self.BetText.SetText(Game001BetMultiplierState.Current.First.BetMultiplier) 
end

function Game001BaseGameMachine:ShowSettings()
    series
        do
            local settings = self["Settings"]
            settings.SetActive(true)
        end
    end
end

function Game001BaseGameMachine:HideSettings()
    series
        do
            local settings = self["Settings"]
            settings.SetActive(false)
        end
    end
end

function Game001BaseGameMachine:ResetSettings()
    self.WinText.SetText("0")
end

function Game001BaseGameMachine:Update()
    local spinState = Game001BaseGameState.SpinState.First.State
    self.BaseGameStateDispatchTable[spinState](self)    
end

function Game001BaseGameMachine:BaseGameSpinning()    
end

function Game001BaseGameMachine:BaseGameWaiting()    
end

function Game001BaseGameMachine:BaseGameCompleted()
   self:ShowSettings()
   Game001BaseGameState.SpinState.First.State = "Waiting"
end

function Game001BaseGameMachine:OnBaseGameSpinCompleted()
    series
        do
            Game001BaseGameState.SpinState.First.State = "Completed"
        end
    end
end

function Game001BaseGameMachine:BaseGamePayout()
    series
        do
            self.Mechanics:BaseGamePayout(self)
        end
    end      
end

function Game001BaseGameMachine:UpdateStatusText(text)
end

function Game001BaseGameMachine:PlayStartAnimations()
    series
        do
            local animatorProperty = self["start"]
            BettrVisualsController.PlayAnimatorProperty(animatorProperty)
        end        
    end
end

function Game001BaseGameMachine:StartEngines()
    parallel
    
        do
            Game001BaseGameReel1:StartEngines()
        end
        
        do
            Game001BaseGameReel2:StartEngines()
        end
        
        do
            Game001BaseGameReel3:StartEngines()
        end
        
        do
            Game001BaseGameReel4:StartEngines()
        end
        
        do
            Game001BaseGameReel5:StartEngines()
        end
        
    end
end

function Game001BaseGameMachine:LoadServerOutcome()
    series
        do
            BettrOutcomeController.LoadServerOutcome("Game001", "EpicGuardiansOfOlympus")
        end
    end
end

function Game001BaseGameMachine:WaitForApplyOutcomeDelay()
    series
        do
            local outcomeDelayInMs = Game001BaseGameSpinProperties.ApplyOutcomeDelay.First.Value
            if outcomeDelayInMs > 0 then
                System.WaitForSeconds(outcomeDelayInMs / 1000)
            end
        end
    end
end

function Game001BaseGameMachine:SpinEngines()
    local inPreviewMode = self.InPreviewMode
    local winSymbols = self.WinSymbols
    local statusTexts = self.StatusTexts
    winSymbols.SetAllInactive()
    local goodLuckText = statusTexts["GoodLuckText"]
    statusTexts.SetCurrentActive("GoodLuckText")
    if inPreviewMode then 
        if self.PreviewSpinsRemaining <= 0 then
            self.PreviewSpinsRemaining = 0
            System.Print("Game001BaseGameMachine:SpinEngines PreviewSpinsRemaining reached 0")
            return
        end
        self.PreviewSpinsRemaining = self.PreviewSpinsRemaining - 1
        goodLuckText.SetText("PREVIEW MODE Spins Remaining " .. self.PreviewSpinsRemaining)
    end
    local baseWager = Game001BaseGameProperties.BaseWager.First.Value
    if BettrUser.Coins < baseWager then
        System.Print("Game001BaseGameMachine:SpinEngines Reset user coins to 1000 coins since currentCoins={0} less than wager={1}", currentCoins, baseWager)
        BettrUser.Coins = 1000
    end
    local oldCoins = BettrUser.Coins
    local newCoins = BettrUser.Coins - baseWager
    System.Print("Game001BaseGameMachine:SpinEngines applying wager oldCoins={0} newCoins={1} wager={2}", oldCoins, newCoins, baseWager)
    BettrUser.Coins = newCoins
    BettrVisualsController.RollUpCounter(self.CreditsText, oldCoins, newCoins, 0.05)
    Game001BaseGameState.SpinState.First.State = "Spinning"
    self:ResetSettings()
    parallel
        
                    do
                        Game001BaseGameReel1:SpinEngines()
                    end
                
                    do
                        Game001BaseGameReel2:SpinEngines()
                    end
                
                    do
                        Game001BaseGameReel3:SpinEngines()
                    end
                
                    do
                        Game001BaseGameReel4:SpinEngines()
                    end
                
                    do
                        Game001BaseGameReel5:SpinEngines()
                    end
                
    end
end

function Game001BaseGameMachine:UpdateBaseGameReelsSpinState(state)

    Game001BaseGameReelSpinState.Reel1.First.ReelSpinState = state

    Game001BaseGameReelSpinState.Reel2.First.ReelSpinState = state

    Game001BaseGameReelSpinState.Reel3.First.ReelSpinState = state

    Game001BaseGameReelSpinState.Reel4.First.ReelSpinState = state

    Game001BaseGameReelSpinState.Reel5.First.ReelSpinState = state

end

function Game001BaseGameMachine:TryPaying()
    Game001BaseGameState.SpinState.First.State = "Paying"
end

function Game001BaseGameMachine:CurrentSpinState()
    return Game001BaseGameState.SpinState.First.State
end

function Game001BaseGameMachine:OnPayingCompleted()
    BettrAudioController.StopAudio()
    self:OnBaseGameSpinCompleted()
end

function Game001BaseGameMachine:OnSpinReelsStopped()
    self:UpdateBaseGameReelsSpinState("Waiting")
    self.StatusTexts.SetAllInactive()
    self:TryPaying()
end

function Game001BaseGameMachine:OnOutcomeReceived()
    parallel
        
                    do
                        Game001BaseGameReel1:OnOutcomeReceived()
                    end
                
                    do
                        Game001BaseGameReel2:OnOutcomeReceived()
                    end
                
                    do
                        Game001BaseGameReel3:OnOutcomeReceived()
                    end
                
                    do
                        Game001BaseGameReel4:OnOutcomeReceived()
                    end
                
                    do
                        Game001BaseGameReel5:OnOutcomeReceived()
                    end
                
    end
end

function Game001BaseGameMachine:OnPointerClick()
    System.Print("Game001BaseGameMachine OnPointerClick tile id={0}", self.id)
    System.StartCoroutine(self, "OnSpinButtonClicked")
end

function Game001BaseGameMachine:OnPointerClick1Param(param)
	System.Print("Game001BaseGameMachine OnPointerClick1Param param={0} tile id={1}", param, self.id)
    if Game001BaseGameState.SpinState.First.State ~= "Waiting" then
        System.Print("Game001BaseGameMachine OnPointerClick1Param param={0} ignoring click when not in Waiting state", param)
        return
    end	
	if param == "Prev" then
        BettrMainLobbySceneController.LoadPreviousMachine()
    elseif param == "Next" then
        BettrMainLobbySceneController.LoadNextMachine()
    elseif param == "Lobby" then
        BettrMainLobbySceneController.LoadMainLobby()
    end
end

function Game001BaseGameMachine:OnBecameVisible()
	System.Print("Game001BaseGameMachine OnBecameVisible tile id={0}", self.id)
end

Game001BaseGameMachine.BaseGameStateDispatchTable = {
    Waiting = Game001BaseGameMachine.BaseGameWaiting,
    Spinning = Game001BaseGameMachine.BaseGameSpinning,
    Completed = Game001BaseGameMachine.BaseGameCompleted,
}

return Game001BaseGameMachine:new()