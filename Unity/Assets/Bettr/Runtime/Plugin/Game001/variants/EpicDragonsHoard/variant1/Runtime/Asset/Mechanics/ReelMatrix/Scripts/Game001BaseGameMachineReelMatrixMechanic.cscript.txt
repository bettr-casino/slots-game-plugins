require "math"
require "Core"

Game001BaseGameMachineReelMatrixMechanic = {
    Config = {
        Machine = "Game001",
        Variant = "EpicDragonsHoard",
        Experiment = "variant1",
        Mechanic = "ReelMatrix",
    },
    State = {
        MechanicsPrefab = nil,
        ReelMatrixController = nil,
    }
}

function Game001BaseGameMachineReelMatrixMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game001BaseGameMachineReelMatrixMechanic:Initialize(machine)
    series
        do
            local manifest = Game001.Manifest
            local prefabName = "BaseGameMachineReelMatrix"
            local machineParent = machine.MachineParent
            local mechanicsParent = machine.MechanicsParent
            local mechanicsPrefab = BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject)
            mechanicsPrefab.SetActive(false)
            mechanicsPrefab.name = self.Config.Mechanic
            self.State.MechanicsPrefab = mechanicsPrefab
            self.State.ReelMatrixController = _G["Game001BaseGameMachineReelMatrixController"]        
            System.Print("Game001BaseGameMachineReelMatrixMechanic:Initialize mechanicsPrefab={0}", self.State.MechanicsPrefab.name)
        end
    end
end

function Game001BaseGameMachineReelMatrixMechanic:OnBaseGameSpinCompleted(machine)
    series
        do
            local freeSpinsMechanic = machine.Mechanics.FreeSpinsMechanic
            if freeSpinsMechanic == nil then
                return
            end       
            
            local summaryTable = BettrMathController.GetBaseGameMechanicSummary(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic)            
            local outcomeCount = summaryTable.OutcomeCount
            if outcomeCount <= 0 then
                return
            end 
            
            Game001BaseGameState.SpinState.First.State = "Waiting"                

            local reelStripData = BettrMathController.GetBaseGameMechanicDataMatrix(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic, "ReelStrip")
            local outcomesTable = BettrMathController.GetBaseGameMechanicMatrix(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic, "Outcomes")
            
            local mechanicsPrefab = self.State.MechanicsPrefab            
            local machineParent = machine.MachineParent

            machineParent.SetActive(false)
            
            System.WaitForSeconds(1)
            
            mechanicsPrefab.SetActive(true)            
            System.WaitForFrame(2)                     
            
            self:SetReelStripData(reelStripData)
            self:SetReelStripSymbolTextures(freeSpinsMechanic.State.MechanicsPrefab)
            self:SetOutcomes(outcomesTable)
            self:ShowReelMatrix()            
            self:StartEngines() 
            
            local lockedSymbols = nil
            local lockedSymbolsMechanic = machine.Mechanics.LockedSymbolsMechanic
            if lockedSymbolsMechanic ~= nil then
                lockedSymbols = BettrMathController.GetBaseGameMechanicMatrix(lockedSymbolsMechanic.Config.Machine, lockedSymbolsMechanic.Config.Mechanic, "LockedSymbols")
            end
            
            System.WaitForFrame(2)
            
            local freeSpins = 10
            
            while freeSpins > 0 do
                freeSpins = freeSpins - 1
                self:SpinEngines(machine)
                
                if lockedSymbols ~= nil then
                    local outcomeIndex = self:OutcomeIndex()
                    local filteredTable = {}
                    BettrMathController.FilterTable(lockedSymbols, filteredTable, "LockOutcomeIndex", outcomeIndex)
                    self:LockEngines(filteredTable)
                end
                
                System.WaitForSeconds(1)
            end     
            
            System.WaitForSeconds(1)
            
            mechanicsPrefab.SetActive(false)
            
            System.WaitForSeconds(1)
                                    
            machineParent.SetActive(true)   
            
            machine:OnBaseGameSpinCompleted()
            
        end
    end
end

function Game001BaseGameMachineReelMatrixMechanic:SetReelStripData(reelStripData)
    self.State.ReelMatrixController:SetReelStripData(reelStripData)
end

function Game001BaseGameMachineReelMatrixMechanic:SetReelStripSymbolTextures(prefab)
    self.State.ReelMatrixController:SetReelStripSymbolTextures(prefab)
end

function Game001BaseGameMachineReelMatrixMechanic:SetOutcomes(outcomesTable)
    self.State.ReelMatrixController:SetOutcomes(outcomesTable)
end

function Game001BaseGameMachineReelMatrixMechanic:ShowReelMatrix()
    self.State.ReelMatrixController["Pivot"].SetActive(true)
end

function Game001BaseGameMachineReelMatrixMechanic:StartEngines()
    self.State.ReelMatrixController:StartEngines()            
end

function Game001BaseGameMachineReelMatrixMechanic:SpinEngines(machine)
    self.State.ReelMatrixController:SpinEngines()
end

function Game001BaseGameMachineReelMatrixMechanic:OutcomeIndex()
    return self.State.ReelMatrixController:OutcomeIndex()
end

function Game001BaseGameMachineReelMatrixMechanic:LockEngines(lockedSymbolsReelMatrix)
    return self.State.ReelMatrixController:LockEngines(lockedSymbolsReelMatrix)
end



