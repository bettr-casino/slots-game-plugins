require "math"
require "Core"

Game001BaseGameMachineLockedSymbolsMechanic = {
    Config = {
        Machine = "Game001",
        Variant = "EpicDragonsHoard",
        Experiment = "variant1",
        Mechanic = "LockedSymbols",
    },
    State = {
        MechanicsPrefab = nil,
        ActiveAlgorithmsTable = nil,
    }
}

function Game001BaseGameMachineLockedSymbolsMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game001BaseGameMachineLockedSymbolsMechanic:Initialize(machine)
    series
        do
            local manifest = Game001.Manifest
            local prefabName = "BaseGameMachineLockedSymbols"
            local machineParent = machine.MachineParent
            local mechanicsParent = machine.MechanicsParent
            local mechanicsPrefab = BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject)
            mechanicsPrefab.SetActive(true)
            mechanicsPrefab.name = self.Config.Mechanic
            self.State.MechanicsPrefab = mechanicsPrefab
        end
    end
end

function Game001BaseGameMachineLockedSymbolsMechanic:OnBaseGameSpinCompleted(machine)
    series
        do
            local reelMatrixMechanic = machine.Mechanics.ReelMatrixMechanic
            local reelMatrixState = reelMatrixMechanic.State
            
            local freeSpinsMechanic = machine.Mechanics.FreeSpinsMechanic
            if freeSpinsMechanic == nil then
                return
            end   
            
            local freeSpinsRemaining = 0
            local fsDataSummaryTable = BettrMathController.GetBaseGameMechanicDataSummary(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic)
            if fsDataSummaryTable ~= nil then
                freeSpinsRemaining = fsDataSummaryTable.InitialFreeSpins
            end     
            
            local fsSummaryTable = BettrMathController.GetBaseGameMechanicSummary(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic)            
            local fsOutcomeCount = fsSummaryTable.OutcomeCount
            if fsOutcomeCount <= 0 then
                return
            end 
            
            local summaryTable = BettrMathController.GetBaseGameMechanicSummary(self.Config.Machine, self.Config.Mechanic)
            local outcomeCount = summaryTable.OutcomeCount
            if outcomeCount <= 0 then
                return
            end
            
            Game001BaseGameState.SpinState.First.State = "Waiting"                

            local reelStripData = BettrMathController.GetBaseGameMechanicDataMatrix(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic, "ReelStrip")
            local outcomesTable = BettrMathController.GetBaseGameMechanicMatrix(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic, "Outcomes")
            
            local tableName = "BaseGame" .. self.Config.Mechanic .. "3"
            local activeAlgorithmsTable = BettrMathController.GetTableArray(tableName, self.Config.Machine, "LockedSymbols")
            self.State.ActiveAlgorithmsTable = activeAlgorithmsTable
            
            local mechanicsPrefab = reelMatrixState.MechanicsPrefab            
            local machineParent = machine.MachineParent

            local reelCount = Game001BaseGameLayout.ReelCount.First.Value
            local initialMeshRenderers = BettrMechanicsController.GetSymbolMatrixMeshRenderers(self.Config.Machine, reelCount)            
            
            mechanicsPrefab.SetActive(true)            
            System.WaitForFrame(2)                     
            
            reelMatrixMechanic:ShowReelMatrix(initialMeshRenderers)
            machineParent.SetActive(false)
                                    
            System.WaitForSeconds(1)
                                 
            reelMatrixMechanic:SetReelStripData(reelStripData)
            local texturesGo = self.State.MechanicsPrefab
            local meshRenderers = BettrMechanicsController.GetSymbolGroupMeshRenderers(texturesGo)
            reelMatrixMechanic:ResetEngines()
            reelMatrixMechanic:SetReelStripSymbolTextures(meshRenderers)
            reelMatrixMechanic:SetOutcomes(outcomesTable)
            reelMatrixMechanic:StartEngines() 
            
            local lockedSymbolsControls = machine.LockedSymbolsControls
            local startButton = lockedSymbolsControls["StartButton"]
            
            startButton.GameObject.SetActive(true)
            BettrDialogController.WaitForDialogAction(startButton.GameObject)
            startButton.GameObject.SetActive(false)
            
            machine.Spin.SetActive(false)
            machine.Bet.SetActive(false) 

            machine.FreeSpinsInitialText.SetText(freeSpinsRemaining)
            machine.FreeSpinsRemainingText.SetActive(false)
            machine.FreeSpinsInitialText.SetActive(false)
            machine.FreeSpinsAddedText.SetActive(false)
            
            machine.FreeSpinsRemaining.SetActive(true)
                                   
            machine.FreeSpinsInitialText.SetActive(true)
            BettrVisualsController.PlayAnimatorProperty(machine.FreeSpinsInitialAnimation)
            
            machine.FreeSpinsInitialText.SetActive(false)            
            
            machine.FreeSpinsRemainingText.SetText(freeSpinsRemaining)
            machine.FreeSpinsRemainingText.SetActive(true)
            
            local groupKey = machine.LockedSymbolsHeapAccumulators
            
            groupKey["Green"].SetActive(false)
            groupKey["Yellow"].SetActive(false)
            groupKey["Blue"].SetActive(false)
            
            for i = 1, #activeAlgorithmsTable do
                local row = activeAlgorithmsTable[i]
                if row.Algorithm == "GreenMultiplierAccumulator" or row.Algorithm == "GreenCreditsAccumulator" then
                    groupKey["Green"].SetActive(true)
                elseif row.Algorithm == "YellowMultiplierAccumulator" or row.Algorithm == "YellowCreditsAccumulator" then
                    groupKey["Yellow"].SetActive(true)
                elseif row.Algorithm == "BlueMultiplierAccumulator" or row.Algorithm == "BlueCreditsAccumulator" then
                    groupKey["Blue"].SetActive(true)
                end
            end                           
            
            local lockedSymbols = BettrMathController.GetBaseGameMechanic(self.Config.Machine, self.Config.Mechanic, "LockedSymbols")
            local algorithms = BettrMathController.GetBaseGameMechanicMatrix(self.Config.Machine, self.Config.Mechanic, "Algorithms")
            local locks = BettrMathController.GetBaseGameMechanicMatrix(2, self.Config.Machine, self.Config.Mechanic, "Locks")
            local credits = BettrMathController.GetBaseGameMechanicMatrix(3, self.Config.Machine, self.Config.Mechanic, "Credits")
            local multipliers = BettrMathController.GetBaseGameMechanicMatrix(4, self.Config.Machine, self.Config.Mechanic, "Multipliers")
            local freeSpins = BettrMathController.GetBaseGameMechanicMatrix(5, self.Config.Machine, self.Config.Mechanic, "FreeSpins")
            local accumulators = BettrMathController.GetBaseGameMechanicMatrix(6, self.Config.Machine, self.Config.Mechanic, "Accumulators")
            
            System.WaitForSeconds(2)
            
            while outcomeCount > 0 do
                outcomeCount = outcomeCount - 1
                freeSpinsRemaining = freeSpinsRemaining - 1
                machine.FreeSpinsRemainingText.SetText(freeSpinsRemaining)
                reelMatrixMechanic:SpinEngines(machine)                
                local outcomeIndex = reelMatrixMechanic:OutcomeIndex()
-------------------- ALGORITHMS
                local filteredAlgorithmsTable = {}
                BettrMathController.FilterTable(algorithms, filteredAlgorithmsTable, "OutcomeIndex", outcomeIndex)                
-------------------- FREE SPINS
                local filteredFreeSpinsTable = {}
                BettrMathController.FilterTable(freeSpins, filteredFreeSpinsTable, "AppliedByOutcomeIndex", outcomeIndex)
-------------------- LOCKS                
                local filteredLocksTable = {}
                BettrMathController.FilterTable(locks, filteredLocksTable, "OutcomeIndex", outcomeIndex)
-------------------- CREDITS                
                local filteredCreditsTable = {}
                BettrMathController.FilterTable(credits, filteredCreditsTable, "AppliedByOutcomeIndex", outcomeIndex)
-------------------- MULTIPLIERS                
                local filteredMultipliersTable = {}
                BettrMathController.FilterTable(multipliers, filteredMultipliersTable, "AppliedByOutcomeIndex", outcomeIndex)
-------------------- ACCUMULATORS - GREEN                
                local filteredGreenAccumulatorsTable = {}
                BettrMathController.FilterTable(accumulators, filteredGreenAccumulatorsTable, "AppliedByOutcomeIndex", outcomeIndex, "AccumulatorAlgo", "GreenMultiplierAccumulator")
-------------------- ACCUMULATORS - GREEN                
                local filteredYellowAccumulatorsTable = {}
                BettrMathController.FilterTable(accumulators, filteredYellowAccumulatorsTable, "AppliedByOutcomeIndex", outcomeIndex, "AccumulatorAlgo", "YellowMultiplierAccumulator")
-------------------- ACCUMULATORS - GREEN                
                local filteredBlueAccumulatorsTable = {}
                BettrMathController.FilterTable(accumulators, filteredBlueAccumulatorsTable, "AppliedByOutcomeIndex", outcomeIndex, "AccumulatorAlgo", "BlueMultiplierAccumulator")
-------------------- APPLY LOCK ANIMATION                   
                if locks ~= nil then
                    reelMatrixMechanic:LockEngines(filteredLocksTable)
                    for i = 1, #filteredLocksTable parallel do
                        local row = filteredLocksTable[i]
                        local reelID = row.ReelID
                        local lockCreditsRow = BettrMathController.GetTableRow(filteredCreditsTable, "ReelID", reelID, "AppliedByReelID", reelID, "OutcomeIndex", outcomeIndex)
                        local lockCredits = lockCreditsRow.CreditsAdded
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"]                        
                        textMeshProProp.SetText(lockCredits)
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__LockAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                    end
                end
-------------------- RESET THE FREE SPINS REMAINING
                local updatedFreeSpinsRemaining = freeSpinsRemaining
                for i = 1, #filteredFreeSpinsTable do
                    local row = filteredFreeSpinsTable[i]
                    local fsRemaining = row.FreeSpinsRemainingAfter
                    updatedFreeSpinsRemaining = fsRemaining
                end
                if updatedFreeSpinsRemaining > freeSpinsRemaining then
                    local addedFreeSpins = updatedFreeSpinsRemaining - freeSpinsRemaining
                    freeSpinsRemaining = updatedFreeSpinsRemaining                    
                    machine.FreeSpinsRemainingText.SetActive(false)                    
                    machine.FreeSpinsAddedText.SetActive(true)
                    machine.FreeSpinsAddedText.Format(addedFreeSpins)                    
                    BettrVisualsController.PlayAnimatorProperty(machine.FreeSpinsAddAnimation)                    
                    machine.FreeSpinsRemainingText.SetText(freeSpinsRemaining)
                    machine.FreeSpinsRemainingText.SetActive(true)                    
                    machine.FreeSpinsAddedText.SetActive(false)                
                end                
-------------------- APPLY ANY ADDED CREDITS 
-------------------- FROM SPECIAL SYMBOLS
                local specialSymbolCreditsAlgosTable = {}
                BettrMathController.FilterTable(filteredAlgorithmsTable, specialSymbolCreditsAlgosTable, "Algo", "SpecialSymbolCredits")
                for i = 1, #specialSymbolCreditsAlgosTable parallel do
                    local row = specialSymbolCreditsAlgosTable[i]
                    local reelID = row.ReelID
                    local specialSymbolCreditsRow = BettrMathController.GetTableRow(filteredCreditsTable, "AppliedByReelID", reelID)
                    local creditsAdded = specialSymbolCreditsRow.CreditsAdded
                    local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                    local textMeshProProp = textMeshProGroupProp["SC"]
                    BettrVisualsController.RollUpCounter(winTextProperty, 0, pays, 0.3)
                end
-------------------- FROM ACCUMULATORS                                  
-------------------- APPLY ANY ADDED MULTIPLIERS 
-------------------- FROM SPECIAL SYMBOLS
-------------------- FROM ACCUMULATORS                                  
                System.WaitForSeconds(1)
            end                 
            System.WaitForSeconds(1)            
            groupKey["Green"].SetActive(false)
            groupKey["Yellow"].SetActive(false)
            groupKey["Blue"].SetActive(false)
            
            mechanicsPrefab.SetActive(false)
            
            System.WaitForSeconds(1)
                                    
            machineParent.SetActive(true)   
            
            machine.Spin.SetActive(true)
            machine.Bet.SetActive(true)
            
            machine:OnBaseGameSpinCompleted()
            
        end
    end
end

