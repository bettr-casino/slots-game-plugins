require "math"
require "Core"

Game001BaseGameMachineLockedSymbolsMechanic = {
    Config = {
        Machine = "Game001",
        Variant = "EpicDragonsHoard",
        Experiment = "variant1",
        Mechanic = "LockedSymbols",
    },
    State = {
        MechanicsPrefab = nil,
        ActiveAlgorithmsTable = nil,
        ReelMatrixControllerIsInitialized = false,
    }
}

function Game001BaseGameMachineLockedSymbolsMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game001BaseGameMachineLockedSymbolsMechanic:Initialize(machine)
    series
        do
            local manifest = Game001.Manifest
            local prefabName = "BaseGameMachineLockedSymbols"
            local machineParent = machine.MachineParent
            local mechanicsParent = machine.MechanicsParent
            local mechanicsPrefab = BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject)
            mechanicsPrefab.SetActive(true)
            mechanicsPrefab.name = self.Config.Mechanic
            self.State.MechanicsPrefab = mechanicsPrefab
            self.State.ReelMatrixControllerIsInitialized = false
        end
    end
end

function Game001BaseGameMachineLockedSymbolsMechanic:OnBaseGameSpinCompleted(machine)
    series
        do
            local reelMatrixMechanic = machine.Mechanics.ReelMatrixMechanic
            local reelMatrixState = reelMatrixMechanic.State
            
            local freeSpinsMechanic = machine.Mechanics.FreeSpinsMechanic
            if freeSpinsMechanic == nil then
                return
            end   
            
            local freeSpinsRemaining = 0
            local fsDataSummaryTable = BettrMathController.GetBaseGameMechanicDataSummary(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic)
            if fsDataSummaryTable ~= nil then
                freeSpinsRemaining = fsDataSummaryTable.InitialFreeSpins
            end     
            
            local fsSummaryTable = BettrMathController.GetBaseGameMechanicSummary(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic)            
            local fsOutcomeCount = fsSummaryTable.OutcomeCount
            if fsOutcomeCount <= 0 then
                return
            end 
            
            local summaryTable = BettrMathController.GetBaseGameMechanicSummary(self.Config.Machine, self.Config.Mechanic)
            local outcomeCount = summaryTable.OutcomeCount
            if outcomeCount <= 0 then
                return
            end
            
            Game001BaseGameState.SpinState.First.State = "Waiting"   
            
            local lockedSymbolsTable = BettrMathController.GetBaseGameMechanic(self.Config.Machine, self.Config.Mechanic, "LockedSymbols")

            local freeSpinsTable = BettrMathController.GetBaseGameMechanic(2, self.Config.Machine, self.Config.Mechanic, "FreeSpins")
            local freeSpinsMatrix = BettrMathController.GetBaseGameMechanicMatrix(2, self.Config.Machine, self.Config.Mechanic, "FreeSpins")

            local lockCreditsTable = BettrMathController.GetBaseGameMechanic(3, self.Config.Machine, self.Config.Mechanic, "LockCredits")
            local lockCreditsMatrix = BettrMathController.GetBaseGameMechanicMatrix(3, self.Config.Machine, self.Config.Mechanic, "LockCredits")            
            
            local lockMultipliersTable = BettrMathController.GetBaseGameMechanic(4, self.Config.Machine, self.Config.Mechanic, "LockMultipliers")
            local lockMultipliersMatrix = BettrMathController.GetBaseGameMechanicMatrix(4, self.Config.Machine, self.Config.Mechanic, "LockMultipliers")
            
            local accumulatorCreditsTable = BettrMathController.GetBaseGameMechanic(5, self.Config.Machine, self.Config.Mechanic, "AccumulatorCredits")
            local accumulatorCreditsMatrix = BettrMathController.GetBaseGameMechanicMatrix(5, self.Config.Machine, self.Config.Mechanic, "AccumulatorCredits")
            
            local accumulatorMultipliersTable = BettrMathController.GetBaseGameMechanic(6, self.Config.Machine, self.Config.Mechanic, "AccumulatorMultipliers")
            local accumulatorMultipliersMatrix = BettrMathController.GetBaseGameMechanicMatrix(6, self.Config.Machine, self.Config.Mechanic, "AccumulatorMultipliers")
            
            local heapAccumulatorCreditsTable = BettrMathController.GetBaseGameMechanic(7, self.Config.Machine, self.Config.Mechanic, "HeapAccumulatorCredits")
            local heapAccumulatorCreditsMatrix = BettrMathController.GetBaseGameMechanicMatrix(7, self.Config.Machine, self.Config.Mechanic, "HeapAccumulatorCredits")
            
            local heapAccumulatorMultipliersTable = BettrMathController.GetBaseGameMechanic(8, self.Config.Machine, self.Config.Mechanic, "HeapAccumulatorMultipliers")
            local heapAccumulatorMultipliersMatrix = BettrMathController.GetBaseGameMechanicMatrix(8, self.Config.Machine, self.Config.Mechanic, "HeapAccumulatorMultipliers")
            
            local meshRenderersMatrix = BettrMathController.GetBaseGameMechanicMatrix(9, self.Config.Machine, self.Config.Mechanic, "MeshRenderers")
            
            local algorithms = BettrMathController.GetBaseGameMechanicMatrix(self.Config.Machine, self.Config.Mechanic, "Algorithms")                         

            local reelStripData = BettrMathController.GetBaseGameMechanicDataMatrix(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic, "ReelStrip")
            local outcomesTable = BettrMathController.GetBaseGameMechanicMatrix(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic, "Outcomes")
            
            local tableName = "BaseGame" .. self.Config.Mechanic .. "Summary2"
            local activeAlgorithmsTable = BettrMathController.GetTableArray(tableName, self.Config.Machine, "Algorithms")
            self.State.ActiveAlgorithmsTable = activeAlgorithmsTable
            
            local mechanicsPrefab = reelMatrixState.MechanicsPrefab            
            local machineParent = machine.MachineParent

            local reelCount = Game001BaseGameLayout.ReelCount.First.Value
            local initialMeshRenderers = BettrMechanicsController.GetSymbolMatrixMeshRenderers(self.Config.Machine, reelCount)            
            
            mechanicsPrefab.SetActive(true)
            if not self.State.ReelMatrixControllerIsInitialized then
                self.State.ReelMatrixControllerIsInitialized = true
                System.WaitForFrame(2)  
            end            
            
            reelMatrixMechanic:ShowReelMatrix(initialMeshRenderers)
                                    
            reelMatrixMechanic:SetReelStripData(reelStripData)
            local texturesGo = self.State.MechanicsPrefab
            local meshRenderers = BettrMechanicsController.GetSymbolGroupMeshRenderers(texturesGo)
            reelMatrixMechanic:ResetEngines()
            reelMatrixMechanic:SetReelStripSymbolTextures(meshRenderersMatrix, meshRenderers)
            reelMatrixMechanic:SetOutcomes(outcomesTable)
            reelMatrixMechanic:StartEngines() 
            
            local lockedSymbolsControls = machine.LockedSymbolsControls
            local startButton = lockedSymbolsControls["StartButton"]
            
            startButton.GameObject.SetActive(true)
            BettrDialogController.WaitForDialogAction(startButton.GameObject)
            startButton.GameObject.SetActive(false)
            
            machine.Spin.SetActive(false)
            machine.Bet.SetActive(false) 

            machine.FreeSpinsInitialText.SetText(freeSpinsRemaining)
            machine.FreeSpinsRemainingText.SetActive(false)
            machine.FreeSpinsInitialText.SetActive(false)
            machine.FreeSpinsAddedText.SetActive(false)
            
            machine.FreeSpinsRemaining.SetActive(true)
                                   
            machine.FreeSpinsInitialText.SetActive(true)
            BettrVisualsController.PlayAnimatorProperty(machine.FreeSpinsInitialAnimation)
            
            machine.FreeSpinsInitialText.SetActive(false)            
            
            machine.FreeSpinsRemainingText.SetText(freeSpinsRemaining)
            machine.FreeSpinsRemainingText.SetActive(true)
            
            local heapAccumulatorsGroup = machine.LockedSymbolsHeapAccumulators            
            heapAccumulatorsGroup["Green"].SetActive(false)
            heapAccumulatorsGroup["Yellow"].SetActive(false)
            heapAccumulatorsGroup["Blue"].SetActive(false)
            
            local accumulatorsGroup = machine.LockedSymbolsAccumulators
            accumulatorsGroup["Multipliers"].SetActive(true)
            accumulatorsGroup["Credits"].SetActive(true)
            
            local accumulatorsTexts = machine.LockedSymbolsAccumulatorTexts
            accumulatorsTexts["Multipliers"].Format("x", 1)
            accumulatorsTexts["Credits"].Format("+", 0)
            
            local hasHeapAccumulators = false
            local hasCreditsHeapAccumulators = false
            local hasMultipliersHeapAccumulators = false
            local hasAccumulators = false
            local hasCreditsAccumulators = false
            local hasMultipliersAccumulators = false
            
            for i = 1, #activeAlgorithmsTable do
                local row = activeAlgorithmsTable[i]
                if row.Algo == "GreenMultipliersAccumulator" then
                    heapAccumulatorsGroup["Green"].SetActive(true)
                    hasHeapAccumulators = true
                    hasMultipliersHeapAccumulators = true
                end
                if row.Algo == "GreenCreditsAccumulator" then
                    heapAccumulatorsGroup["Green"].SetActive(true)
                    hasHeapAccumulators = true
                    hasCreditsHeapAccumulators = true
                end
                if row.Algo == "YellowMultipliersAccumulator" then
                    heapAccumulatorsGroup["Yellow"].SetActive(true)
                    hasHeapAccumulators = true
                    hasMultipliersHeapAccumulators = true
                end
                if row.Algo == "YellowCreditsAccumulator" then
                    heapAccumulatorsGroup["Yellow"].SetActive(true)
                    hasHeapAccumulators = true
                    hasCreditsHeapAccumulators = true
                end
                if row.Algo == "BlueMultipliersAccumulator" then
                    heapAccumulatorsGroup["Blue"].SetActive(true)
                    hasHeapAccumulators = true
                    hasMultipliersHeapAccumulators = true
                end
                if row.Algo == "BlueCreditsAccumulator" then
                    heapAccumulatorsGroup["Blue"].SetActive(true)
                    hasHeapAccumulators = true
                    hasCreditsHeapAccumulators = true
                end
            end             
            
            machineParent.SetActive(false)                                     
            
            System.WaitForSeconds(2)
            
            while outcomeCount > 0 do
                outcomeCount = outcomeCount - 1
                freeSpinsRemaining = freeSpinsRemaining - 1
                machine.FreeSpinsRemainingText.SetText(freeSpinsRemaining)
                reelMatrixMechanic:SpinEngines(machine)                
                local outcomeIndex = reelMatrixMechanic:OutcomeIndex()
-------------------- ALGORITHMS
                local filteredAlgorithmsTable = {}
                BettrMathController.FilterTable(algorithms, filteredAlgorithmsTable, "OutcomeIndex", outcomeIndex)                
-------------------- FREE SPINS
                local filteredFreeSpinsTable = {}
                BettrMathController.FilterTable(freeSpinsMatrix, filteredFreeSpinsTable, "OutcomeIndex", outcomeIndex)
-------------------- LOCKS - CREDITS                
                local filteredLockCreditsTable = {}
                BettrMathController.FilterTable(lockCreditsMatrix, filteredLockCreditsTable, "OutcomeIndex", outcomeIndex)
-------------------- LOCKS - MULTIPLIERS                
                local filteredLockMultipliersTable = {}
                BettrMathController.FilterTable(lockMultipliersMatrix, filteredLockMultipliersTable, "OutcomeIndex", outcomeIndex)
-------------------- ACCUMULATORS - CREDITS                
                local filteredAccumulatorCreditsTable = {}
                BettrMathController.FilterTable(accumulatorCreditsMatrix, filteredAccumulatorCreditsTable, "OutcomeIndex", outcomeIndex)
-------------------- ACCUMULATORS - MULTIPLIERS                
                local filteredAccumulatorMultipliersTable = {}
                BettrMathController.FilterTable(accumulatorMultipliersMatrix, filteredAccumulatorMultipliersTable, "OutcomeIndex", outcomeIndex)
-------------------- HEAP ACCUMULATORS - CREDITS                
                local filteredHeapAccumulatorCreditsTable = {}
                BettrMathController.FilterTable(heapAccumulatorCreditsMatrix, filteredHeapAccumulatorCreditsTable, "OutcomeIndex", outcomeIndex)
-------------------- HEAP ACCUMULATORS - MULTIPLIERS                
                local filteredHeapAccumulatorMultipliersTable = {}
                BettrMathController.FilterTable(heapAccumulatorMultipliersMatrix, filteredHeapAccumulatorMultipliersTable, "OutcomeIndex", outcomeIndex)
-------------------- APPLY LOCK ANIMATION                   
                if #filteredLockCreditsTable > 0 then
                    reelMatrixMechanic:LockEngines(filteredLockCreditsTable)
                    for i = 1, #filteredLockCreditsTable parallel do
                        local row = filteredLockCreditsTable[i]
                        local reelID = row.ReelID
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__LockAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                    end
                    for i = 1, #filteredLockCreditsTable parallel do
                        local row = filteredLockCreditsTable[i]
                        local reelID = row.ReelID
                        local lockCreditsRow = BettrMathController.GetTableRow(filteredLockCreditsTable, "ReelID", reelID)
                        local lockCredits = lockCreditsRow.CreditsAdded
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"]                        
                        textMeshProProp.Format("+",lockCredits)
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__CreditsAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                    end
                end
                if #filteredLockMultipliersTable > 0 then
                    reelMatrixMechanic:LockEngines(filteredLockMultipliersTable)
                    for i = 1, #filteredLockMultipliersTable parallel do
                        local row = filteredLockMultipliersTable[i]
                        local reelID = row.ReelID
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__LockAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                    end
                    for i = 1, #filteredLockMultipliersTable parallel do
                        local row = filteredLockMultipliersTable[i]
                        local reelID = row.ReelID
                        local lockMultipliersRow = BettrMathController.GetTableRow(filteredLockMultipliersTable, "ReelID", reelID)
                        local lockMultipliers = lockMultipliersRow.MultipliersAdded
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"]                        
                        textMeshProProp.Format("x",lockMultipliers + 1)
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__MultipliersAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                    end
                end
                if #filteredAccumulatorMultipliersTable > 0 then
                    for i = 1, #filteredAccumulatorMultipliersTable parallel do
                        local row = filteredAccumulatorMultipliersTable[i]
                        local reelID = row.ReelID
                        local lockAccumulatorMultipliersRow = BettrMathController.GetTableRow(filteredAccumulatorMultipliersTable, "ReelID", reelID)
                        local lockAccumulatorMultipliers = lockAccumulatorMultipliersRow.MultipliersAdded
                        local lockAccumulatorMultipliersAfter = lockAccumulatorMultipliersRow.MultipliersAfter
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"]                        
                        textMeshProProp.Format("x",lockAccumulatorMultipliers)
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__MultipliersAccumulatorAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                        BettrVisualsController.FireballMoveTo(nil, textMeshProProp.GameObject, 0, 1, false)
                        parallel
                            do
                                BettrVisualsController.FireballMoveTo(textMeshProProp.GameObject, accumulatorsGroup["Multipliers"].GameObject, 0, 1, true)
                                accumulatorsTexts["Multipliers"].Format("x", lockAccumulatorMultipliersAfter + 1)
                            end
                            do
                                animatorProp = animatorGroupProp["SC__HideAnimation"]
                                BettrVisualsController.PlayAnimatorProperty(animatorProp)
                            end
                        end
                    end
                end
-------------------- RESET THE FREE SPINS REMAINING
                local updatedFreeSpinsRemaining = freeSpinsRemaining
                for i = 1, #filteredFreeSpinsTable do
                    local row = filteredFreeSpinsTable[i]
                    local fsRemaining = row.FreeSpinsAfter
                    updatedFreeSpinsRemaining = fsRemaining
                end
                if updatedFreeSpinsRemaining > freeSpinsRemaining then
                    local addedFreeSpins = updatedFreeSpinsRemaining - freeSpinsRemaining
                    freeSpinsRemaining = updatedFreeSpinsRemaining                    
                    machine.FreeSpinsRemainingText.SetActive(false)                    
                    machine.FreeSpinsAddedText.SetActive(true)
                    machine.FreeSpinsAddedText.Format(addedFreeSpins)                    
                    BettrVisualsController.PlayAnimatorProperty(machine.FreeSpinsAddAnimation)                    
                    machine.FreeSpinsRemainingText.SetText(freeSpinsRemaining)
                    machine.FreeSpinsRemainingText.SetActive(true)                    
                    machine.FreeSpinsAddedText.SetActive(false)                
                end                          
                System.WaitForSeconds(1)
            end                 
            System.WaitForSeconds(1)      
            
                        
            if #lockCreditsMatrix > 0 then
                if hasMultipliersAccumulators then
                    BettrVisualsController.FireballMoveTo(nil, accumulatorsGroup["Multipliers"].GameObject, 0, 1, false)
                    for i = 1, #lockCreditsMatrix do                
                        local row = lockCreditsMatrix[i]
                        local reelID = row.ReelID
                        local creditsAdded = row.CreditsAdded
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"]                               
                        do
                            BettrVisualsController.FireballMoveTo(accumulatorsGroup["Multipliers"].GameObject, textMeshProProp.GameObject, 0, 1, true)
                        end
                    end
                end
            end
               
            
            for i=1,#algorithms parallel do
                local row = algorithms[i]
                local reelID = row.ReelID
                local algo = row.Algo
                local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                local animatorProp = animatorGroupProp["SC__HideAnimation"]
                BettrVisualsController.PlayAnimatorProperty(animatorProp)
            end
            
            reelMatrixMechanic:ResetTextures()
            
            heapAccumulatorsGroup["Green"].SetActive(false)
            heapAccumulatorsGroup["Yellow"].SetActive(false)
            heapAccumulatorsGroup["Blue"].SetActive(false)
            
            accumulatorsGroup["Multipliers"].SetActive(false)
            accumulatorsGroup["Credits"].SetActive(false)   
            
            mechanicsPrefab.SetActive(false)
            
            System.WaitForSeconds(1)
                                    
            machineParent.SetActive(true)   
            
            machine.Spin.SetActive(true)
            machine.Bet.SetActive(true)
            
            machine:OnBaseGameSpinCompleted()
            
        end
    end
end

