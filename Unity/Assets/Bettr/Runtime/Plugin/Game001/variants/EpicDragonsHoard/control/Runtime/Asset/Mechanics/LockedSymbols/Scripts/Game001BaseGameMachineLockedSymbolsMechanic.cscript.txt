require "math"
require "Core"

Game001BaseGameMachineLockedSymbolsMechanic = {
    Config = {
        Machine = "Game001",
        Variant = "EpicDragonsHoard",
        Experiment = "variant1",
        Mechanic = "LockedSymbols",
    },
    State = {
        MechanicsPrefab = nil,
        ActiveAlgorithmsTable = nil,
        ReelMatrixControllerIsInitialized = false,
    }
}

function Game001BaseGameMachineLockedSymbolsMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game001BaseGameMachineLockedSymbolsMechanic:Initialize(machine)
    series
        do
            local manifest = Game001.Manifest
            local prefabName = "BaseGameMachineLockedSymbols"
            local machineParent = machine.MachineParent
            local mechanicsParent = machine.MechanicsParent
            local mechanicsPrefab = BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject)
            mechanicsPrefab.SetActive(true)
            mechanicsPrefab.name = self.Config.Mechanic
            self.State.MechanicsPrefab = mechanicsPrefab
            self.State.ReelMatrixControllerIsInitialized = false
        end
    end
end

function Game001BaseGameMachineLockedSymbolsMechanic:OnBaseGameSpinCompleted(machine)
    series
        do
            local reelMatrixMechanic = machine.Mechanics.ReelMatrixMechanic
            local reelMatrixState = reelMatrixMechanic.State
            
            local freeSpinsMechanic = machine.Mechanics.FreeSpinsMechanic
            if freeSpinsMechanic == nil then
                return
            end   
            
            local freeSpinsRemaining = 0
            local fsDataSummaryTable = BettrMathController.GetBaseGameMechanicDataSummary(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic)
            if fsDataSummaryTable ~= nil then
                freeSpinsRemaining = fsDataSummaryTable.InitialFreeSpins
            end     
            
            local fsSummaryTable = BettrMathController.GetBaseGameMechanicSummary(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic)            
            local fsOutcomeCount = fsSummaryTable.OutcomeCount
            if fsOutcomeCount <= 0 then
                return
            end 
            
            local summaryTable = BettrMathController.GetBaseGameMechanicSummary(self.Config.Machine, self.Config.Mechanic)
            local outcomeCount = summaryTable.OutcomeCount
            if outcomeCount <= 0 then
                machine:OnBaseGameSpinCompleted() 
                return
            end
            
            local payout = summaryTable.Payout
            BettrUser.SpinCoins = BettrUser.SpinCoins + payout                        
            
            Game001BaseGameState.SpinState.First.State = "Waiting"   
            
            local lockedSymbolsTable = BettrMathController.GetBaseGameMechanic(self.Config.Machine, self.Config.Mechanic, "LockedSymbols")

            local freeSpinsTable = BettrMathController.GetBaseGameMechanic(2, self.Config.Machine, self.Config.Mechanic, "FreeSpins")
            local freeSpinsMatrix = BettrMathController.GetBaseGameMechanicMatrix(2, self.Config.Machine, self.Config.Mechanic, "FreeSpins")

            local lockCreditsTable = BettrMathController.GetBaseGameMechanic(3, self.Config.Machine, self.Config.Mechanic, "LockCredits")
            local lockCreditsMatrix = BettrMathController.GetBaseGameMechanicMatrix(3, self.Config.Machine, self.Config.Mechanic, "LockCredits")            
            
            local lockMultipliersTable = BettrMathController.GetBaseGameMechanic(4, self.Config.Machine, self.Config.Mechanic, "LockMultipliers")
            local lockMultipliersMatrix = BettrMathController.GetBaseGameMechanicMatrix(4, self.Config.Machine, self.Config.Mechanic, "LockMultipliers")
            
            local accumulatorCreditsTable = BettrMathController.GetBaseGameMechanic(5, self.Config.Machine, self.Config.Mechanic, "AccumulatorCredits")
            local accumulatorCreditsMatrix = BettrMathController.GetBaseGameMechanicMatrix(5, self.Config.Machine, self.Config.Mechanic, "AccumulatorCredits")
            
            local accumulatorMultipliersTable = BettrMathController.GetBaseGameMechanic(6, self.Config.Machine, self.Config.Mechanic, "AccumulatorMultipliers")
            local accumulatorMultipliersMatrix = BettrMathController.GetBaseGameMechanicMatrix(6, self.Config.Machine, self.Config.Mechanic, "AccumulatorMultipliers")
            
            local heapAccumulatorCreditsTable = BettrMathController.GetBaseGameMechanic(7, self.Config.Machine, self.Config.Mechanic, "HeapAccumulatorCredits")
            local heapAccumulatorCreditsMatrix = BettrMathController.GetBaseGameMechanicMatrix(7, self.Config.Machine, self.Config.Mechanic, "HeapAccumulatorCredits")
            
            local heapAccumulatorMultipliersTable = BettrMathController.GetBaseGameMechanic(8, self.Config.Machine, self.Config.Mechanic, "HeapAccumulatorMultipliers")
            local heapAccumulatorMultipliersMatrix = BettrMathController.GetBaseGameMechanicMatrix(8, self.Config.Machine, self.Config.Mechanic, "HeapAccumulatorMultipliers")
            
            local meshRenderersMatrix = BettrMathController.GetBaseGameMechanicMatrix(9, self.Config.Machine, self.Config.Mechanic, "MeshRenderers")
            
            local algorithms = BettrMathController.GetBaseGameMechanicMatrix(self.Config.Machine, self.Config.Mechanic, "Algorithms")
            
            local reelStripData = BettrMathController.GetBaseGameMechanicDataMatrix(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic, "ReelStrip")
            local outcomesTable = BettrMathController.GetBaseGameMechanicMatrix(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic, "Outcomes")
            
            local tableName = "BaseGame" .. self.Config.Mechanic .. "Summary2"
            local activeAlgorithmsTable = BettrMathController.GetTableArray(tableName, self.Config.Machine, "Algorithms")
            self.State.ActiveAlgorithmsTable = activeAlgorithmsTable
            
            local mechanicsPrefab = reelMatrixState.MechanicsPrefab            
            local machineParent = machine.MachineParent

            local reelCount = Game001BaseGameLayout.ReelCount.First.Value
            local initialMeshRenderers = BettrMechanicsController.GetSymbolMatrixMeshRenderers(self.Config.Machine, reelCount)            
            
            mechanicsPrefab.SetActive(true)
            if not self.State.ReelMatrixControllerIsInitialized then
                self.State.ReelMatrixControllerIsInitialized = true
                System.WaitForFrame(2)  
            end            
            
            reelMatrixMechanic:ShowReelMatrix(initialMeshRenderers)
                                    
            reelMatrixMechanic:SetReelStripData(reelStripData)
            local texturesGo = self.State.MechanicsPrefab
            local meshRenderers = BettrMechanicsController.GetSymbolGroupMeshRenderers(texturesGo)
            reelMatrixMechanic:ResetEngines()
            reelMatrixMechanic:SetReelStripSymbolTextures(meshRenderersMatrix, meshRenderers)
            reelMatrixMechanic:SetOutcomes(outcomesTable)
            reelMatrixMechanic:StartEngines() 
            
            local lockedSymbolsControls = machine.LockedSymbolsControls
            local startButton = lockedSymbolsControls["StartButton"]
            local summaryButton = lockedSymbolsControls["SummaryButton"]
            
            local lockedSymbolsControlsText = machine.LockedSymbolsControlsText
            local summaryText = lockedSymbolsControlsText["SummaryText"]
            
            startButton.GameObject.SetActive(true)
            BettrDialogController.WaitForDialogAction(startButton.GameObject)
            startButton.GameObject.SetActive(false)
            
            machine.Spin.SetActive(false)
            machine.Bet.SetActive(false) 

            machine.FreeSpinsInitialText.SetText(freeSpinsRemaining)
            machine.FreeSpinsRemainingText.SetActive(false)
            machine.FreeSpinsInitialText.SetActive(false)
            machine.FreeSpinsAddedText.SetActive(false)
            
            machine.FreeSpinsRemaining.SetActive(true)
                                   
            machine.FreeSpinsInitialText.SetActive(true)
            BettrVisualsController.PlayAnimatorProperty(machine.FreeSpinsInitialAnimation)
            
            machine.FreeSpinsInitialText.SetActive(false)            
            
            machine.FreeSpinsRemainingText.SetText(freeSpinsRemaining)
            machine.FreeSpinsRemainingText.SetActive(true)
            
            local heapAccumulatorsGroup = machine.LockedSymbolsHeapAccumulators            
            heapAccumulatorsGroup["Green"].SetActive(false)
            heapAccumulatorsGroup["Yellow"].SetActive(false)
            heapAccumulatorsGroup["Blue"].SetActive(false)
            
            local accumulatorsGroup = machine.LockedSymbolsAccumulators
            accumulatorsGroup["Multipliers"].SetActive(true)
            accumulatorsGroup["Credits"].SetActive(true)
            
            local accumulatorCredits = 0
            local accumulatorMultipliers = 1
            
            local accumulatorGreenHeapCredits = 0
            local accumulatorGreenHeapMultipliers = 1
            
            local accumulatorYellowHeapCredits = 0
            local accumulatorYellowHeapMultipliers = 1
            
            local accumulatorBlueHeapCredits = 0
            local accumulatorBlueHeapMultipliers = 1
            
            local accumulatorsTextsGroup = machine.LockedSymbolsAccumulatorTexts
            accumulatorsTextsGroup["Multipliers"].Format(accumulatorMultipliers)
            accumulatorsTextsGroup["Credits"].Format(accumulatorCredits)
            
            local heapAccumulatorTexts = machine.LockedSymbolsHeapAccumulatorTexts
            local heapAccumulatorCountTexts = machine.LockedSymbolsHeapAccumulatorCountTexts
            
            local hasHeapAccumulators = false
            local hasCreditsHeapAccumulators = false
            local hasMultipliersHeapAccumulators = false
            local hasAccumulators = false
            local hasCreditsAccumulators = false
            local hasMultipliersAccumulators = false
            
            for i = 1, #activeAlgorithmsTable do
                local row = activeAlgorithmsTable[i]
                if row.Algo == "GreenMultipliersAccumulator" then
                    heapAccumulatorTexts["Green"].FormattedText = "x{0}"
                    heapAccumulatorTexts["Green"].Format(accumulatorGreenHeapMultipliers)
                    heapAccumulatorTexts["Green"].SetActive(true)
                    heapAccumulatorCountTexts["Green"].Format(0, row.HitCountThreshold)
                    heapAccumulatorCountTexts["Green"].SetActive(true)                    
                    heapAccumulatorsGroup["Green"].SetActive(true)
                    hasHeapAccumulators = true
                    hasMultipliersHeapAccumulators = true
                end
                if row.Algo == "GreenCreditsAccumulator" then
                    heapAccumulatorTexts["Green"].FormattedText = "+{0}"
                    heapAccumulatorTexts["Green"].Format(accumulatorGreenHeapCredits)
                    heapAccumulatorTexts["Green"].SetActive(true)
                    heapAccumulatorCountTexts["Green"].Format(0, row.HitCountThreshold)
                    heapAccumulatorCountTexts["Green"].SetActive(true)                    
                    heapAccumulatorsGroup["Green"].SetActive(true)
                    hasHeapAccumulators = true
                    hasCreditsHeapAccumulators = true
                end
                if row.Algo == "YellowMultipliersAccumulator" then
                    heapAccumulatorTexts["Yellow"].FormattedText = "x{0}"
                    heapAccumulatorTexts["Yellow"].Format(accumulatorYellowHeapMultipliers)
                    heapAccumulatorTexts["Yellow"].SetActive(true)
                    heapAccumulatorCountTexts["Yellow"].Format(0, row.HitCountThreshold)
                    heapAccumulatorCountTexts["Yellow"].SetActive(true)                    
                    heapAccumulatorsGroup["Yellow"].SetActive(true)
                    hasHeapAccumulators = true
                    hasMultipliersHeapAccumulators = true
                end
                if row.Algo == "YellowCreditsAccumulator" then
                    heapAccumulatorTexts["Yellow"].FormattedText = "+{0}"
                    heapAccumulatorTexts["Yellow"].Format(accumulatorYellowHeapCredits)
                    heapAccumulatorTexts["Yellow"].SetActive(true)
                    heapAccumulatorCountTexts["Yellow"].Format(0, row.HitCountThreshold)
                    heapAccumulatorCountTexts["Yellow"].SetActive(true)                    
                    heapAccumulatorsGroup["Yellow"].SetActive(true)
                    hasHeapAccumulators = true
                    hasCreditsHeapAccumulators = true
                end
                if row.Algo == "BlueMultipliersAccumulator" then
                    heapAccumulatorTexts["Blue"].FormattedText = "x{0}"
                    heapAccumulatorTexts["Blue"].Format(accumulatorBlueHeapMultipliers)
                    heapAccumulatorTexts["Blue"].SetActive(true)
                    heapAccumulatorCountTexts["Blue"].Format(0, row.HitCountThreshold)
                    heapAccumulatorCountTexts["Blue"].SetActive(true)                    
                    heapAccumulatorsGroup["Blue"].SetActive(true)
                    hasHeapAccumulators = true
                    hasMultipliersHeapAccumulators = true
                end
                if row.Algo == "BlueCreditsAccumulator" then
                    heapAccumulatorTexts["Blue"].FormattedText = "+{0}"
                    heapAccumulatorTexts["Blue"].Format(accumulatorBlueHeapCredits)
                    heapAccumulatorTexts["Blue"].SetActive(true)
                    heapAccumulatorCountTexts["Blue"].Format(0, row.HitCountThreshold)
                    heapAccumulatorCountTexts["Blue"].SetActive(true)                    
                    heapAccumulatorsGroup["Blue"].SetActive(true)
                    hasHeapAccumulators = true
                    hasCreditsHeapAccumulators = true
                end
            end       
            
            local accumulatedHeapCredits = {}
            accumulatedHeapCredits["GreenCreditsAccumulator"] = 0
            accumulatedHeapCredits["YellowCreditsAccumulator"] = 0
            accumulatedHeapCredits["BlueCreditsAccumulator"] = 0            
    
            local accumulatedHeapMultipliers = {}
            accumulatedHeapMultipliers["GreenMultipliersAccumulator"] = 0
            accumulatedHeapMultipliers["YellowMultipliersAccumulator"] = 0
            accumulatedHeapMultipliers["BlueMultipliersAccumulator"] = 0                  
            
            local accumulatedHeapCreditsHits = {}
            accumulatedHeapCreditsHits["GreenCreditsAccumulator"] = 0
            accumulatedHeapCreditsHits["YellowCreditsAccumulator"] = 0
            accumulatedHeapCreditsHits["BlueCreditsAccumulator"] = 0                  
            
            local accumulatedHeapMultipliersHits = {}
            accumulatedHeapMultipliersHits["GreenMultipliersAccumulator"] = 0
            accumulatedHeapMultipliersHits["YellowMultipliersAccumulator"] = 0
            accumulatedHeapMultipliersHits["BlueMultipliersAccumulator"] = 0                  
            
            machineParent.SetActive(false)                                     
            
            System.WaitForSeconds(2)
            
            while outcomeCount > 0 do
                outcomeCount = outcomeCount - 1
                freeSpinsRemaining = freeSpinsRemaining - 1
                machine.FreeSpinsRemainingText.SetText(freeSpinsRemaining)
                reelMatrixMechanic:SpinEngines(machine)                
                local outcomeIndex = reelMatrixMechanic:OutcomeIndex()
-------------------- ALGORITHMS
                local filteredAlgorithmsTable = {}
                BettrMathController.FilterTable(algorithms, filteredAlgorithmsTable, "OutcomeIndex", outcomeIndex)                
-------------------- FREE SPINS
                local filteredFreeSpinsTable = {}
                BettrMathController.FilterTable(freeSpinsMatrix, filteredFreeSpinsTable, "OutcomeIndex", outcomeIndex)
-------------------- LOCKS - CREDITS                
                local filteredLockCreditsTable = {}
                BettrMathController.FilterTable(lockCreditsMatrix, filteredLockCreditsTable, "OutcomeIndex", outcomeIndex)
-------------------- LOCKS - MULTIPLIERS                
                local filteredLockMultipliersTable = {}
                BettrMathController.FilterTable(lockMultipliersMatrix, filteredLockMultipliersTable, "OutcomeIndex", outcomeIndex)
-------------------- ACCUMULATORS - CREDITS                
                local filteredAccumulatorCreditsTable = {}
                BettrMathController.FilterTable(accumulatorCreditsMatrix, filteredAccumulatorCreditsTable, "OutcomeIndex", outcomeIndex)
-------------------- ACCUMULATORS - MULTIPLIERS                
                local filteredAccumulatorMultipliersTable = {}
                BettrMathController.FilterTable(accumulatorMultipliersMatrix, filteredAccumulatorMultipliersTable, "OutcomeIndex", outcomeIndex)
-------------------- HEAP ACCUMULATORS - CREDITS                
                local filteredHeapAccumulatorCreditsTable = {}
                BettrMathController.FilterTable(heapAccumulatorCreditsMatrix, filteredHeapAccumulatorCreditsTable, "OutcomeIndex", outcomeIndex)
-------------------- HEAP ACCUMULATORS - MULTIPLIERS                
                local filteredHeapAccumulatorMultipliersTable = {}
                BettrMathController.FilterTable(heapAccumulatorMultipliersMatrix, filteredHeapAccumulatorMultipliersTable, "OutcomeIndex", outcomeIndex)
-------------------- APPLY LOCK ANIMATION                   
                if #filteredLockCreditsTable > 0 then
                    reelMatrixMechanic:LockEngines(filteredLockCreditsTable)
                    for i = 1, #filteredLockCreditsTable parallel do
                        local row = filteredLockCreditsTable[i]
                        local reelID = row.ReelID
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__LockAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                    end
                    for i = 1, #filteredLockCreditsTable parallel do
                        local row = filteredLockCreditsTable[i]
                        local reelID = row.ReelID
                        local credits = row.CreditsAdded
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"]                        
                        textMeshProProp.FormattedText = "+{0}"           
                        textMeshProProp.Format(credits)
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__CreditsAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                    end
                end
                if #filteredLockMultipliersTable > 0 then
                    reelMatrixMechanic:LockEngines(filteredLockMultipliersTable)
                    for i = 1, #filteredLockMultipliersTable parallel do
                        local row = filteredLockMultipliersTable[i]
                        local reelID = row.ReelID
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__LockAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                    end
                    for i = 1, #filteredLockMultipliersTable parallel do
                        local row = filteredLockMultipliersTable[i]
                        local reelID = row.ReelID
                        local multipliers = row.MultipliersAdded
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"]                        
                        textMeshProProp.FormattedText = "x{0}"           
                        textMeshProProp.Format(multipliers + 1)
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__MultipliersAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                    end
                end                
-------------------- APPLY SYMBOL ACCUMULATORS                   
                if #filteredAccumulatorCreditsTable > 0 then
                    for i = 1, #filteredAccumulatorCreditsTable parallel do
                        local row = filteredAccumulatorCreditsTable[i]
                        local reelID = row.ReelID
                        local credits = row.CreditsAdded
                        local accumulatorCreditsBefore = accumulatorCredits
                        accumulatorCredits = accumulatorCredits + credits
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"] 
                        textMeshProProp.FormattedText = "+{0}"                        
                        textMeshProProp.Format(credits)
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__CreditsAccumulatorAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                        BettrVisualsController.FireballMoveTo(nil, textMeshProProp.GameObject, 0, 0.5, false)
                        local textMeshProTarget = accumulatorsTextsGroup["Credits"]
                        parallel
                            do
                                BettrVisualsController.FireballMoveTo(textMeshProProp.GameObject, textMeshProTarget.GameObject, 0, 0.5, true)
                                BettrVisualsController.RollUpFormatCounter(textMeshProTarget, accumulatorCreditsBefore, accumulatorCredits, 0.5)                                
                            end
                            do
                                animatorProp = animatorGroupProp["SC__HideAnimation"]
                                BettrVisualsController.PlayAnimatorProperty(animatorProp)
                            end
                        end
                    end
                end                
                if #filteredAccumulatorMultipliersTable > 0 then
                    for i = 1, #filteredAccumulatorMultipliersTable parallel do
                        local row = filteredAccumulatorMultipliersTable[i]
                        local reelID = row.ReelID
                        local multipliers = row.MultipliersAdded
                        local accumulatorMultipliersBefore = accumulatorMultipliers
                        accumulatorMultipliers = accumulatorMultipliers + multipliers
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"]
                        textMeshProProp.FormattedText = "x{0}"
                        textMeshProProp.Format(multipliers)
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__MultipliersAccumulatorAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                        BettrVisualsController.FireballMoveTo(nil, textMeshProProp.GameObject, 0, 0.5, false)
                        local textMeshProTarget = accumulatorsTextsGroup["Multipliers"]
                        parallel
                            do
                                BettrVisualsController.FireballMoveTo(textMeshProProp.GameObject, textMeshProTarget.GameObject, 0, 0.5, true)
                                BettrVisualsController.RollUpFormatCounter(textMeshProTarget, accumulatorMultipliersBefore, accumulatorMultipliers, 0.5)                                
                            end
                            do
                                animatorProp = animatorGroupProp["SC__HideAnimation"]
                                BettrVisualsController.PlayAnimatorProperty(animatorProp)
                            end
                        end
                    end
                end
-------------------- APPLY HEAP ACCUMULATORS   
                if #filteredHeapAccumulatorCreditsTable > 0 then
                    for i = 1, #filteredHeapAccumulatorCreditsTable parallel do
                        local row = filteredHeapAccumulatorCreditsTable[i]
                        local reelID = row.ReelID
                        local algo = row.Algo
                        local heapCredits = row.CreditsAccumulated
                        local heapAccumulatorCredits = accumulatedHeapCredits[algo]
                        row.HeapAccumulatorCreditsBefore = heapAccumulatorCredits
                        heapAccumulatorCredits = heapAccumulatorCredits + heapCredits
                        row.HeapAccumulatorCreditsAfter = heapAccumulatorCredits
                        accumulatedHeapCredits[algo] = heapAccumulatorCredits
                        local creditsAdded = row.CreditsAdded
                        row.CreditsAdded = creditsAdded
                        local hits = row.AccumulatorAdded
                        local isHit = row.IsAccumulatorHit
                        local heapAccumulatorHits = accumulatedHeapCreditsHits[algo]
                        row.HeapAccumulatorHitsBefore = heapAccumulatorHits
                        heapAccumulatorHits = heapAccumulatorHits + hits
                        row.HeapAccumulatorHitsAfter = heapAccumulatorHits
                        accumulatedHeapCreditsHits[algo] = heapAccumulatorHits
                        row.IsHeapHit = isHit
                        if isHit then
                            row.AccumulatorCreditsBefore = accumulatorCredits
                            accumulatorCredits = accumulatorCredits + creditsAdded
                            row.AccumulatorCreditsAfter = accumulatorCredits
                            accumulatedHeapCredits[algo] = 0
                        end
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"] 
                        textMeshProProp.FormattedText = "+{0}"                        
                        textMeshProProp.Format(heapCredits)
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__CreditsAccumulatorAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                    end                    
                    for i = 1, #filteredHeapAccumulatorCreditsTable do
                        local row = filteredHeapAccumulatorCreditsTable[i]
                        local reelID = row.ReelID
                        local algo = row.Algo
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"] 
                        BettrVisualsController.FireballMoveTo(nil, textMeshProProp.GameObject, 0, 0.5, false)
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local textMeshProTarget = nil
                        local textMeshProCountTarget = nil
                        if algo == "GreenCreditsAccumulator" then
                            textMeshProTarget = heapAccumulatorTexts["Green"]
                            textMeshProCountTarget = heapAccumulatorCountTexts["Green"]
                        elseif algo == "YellowCreditsAccumulator" then
                            textMeshProTarget = heapAccumulatorTexts["Yellow"]
                            textMeshProCountTarget = heapAccumulatorCountTexts["Yellow"]
                        elseif algo == "BlueCreditsAccumulator" then
                            textMeshProTarget = heapAccumulatorTexts["Blue"]
                            textMeshProCountTarget = heapAccumulatorCountTexts["Blue"]
                        end
                        local textMeshProAccumulatorsCreditsTarget = accumulatorsTextsGroup["Credits"]
                        if row.IsHeapHit then
                            parallel
                                do
                                    BettrVisualsController.FireballMoveTo(textMeshProProp.GameObject, textMeshProTarget.GameObject, 0, 0.5, true)
                                    BettrVisualsController.RollUpFormatCounter(textMeshProTarget, row.HeapAccumulatorCreditsBefore, row.HeapAccumulatorCreditsAfter, 0.5)
                                    textMeshProCountTarget.Format(row.HeapAccumulatorHitsAfter, row.AccumulatorThreshold)
                                    BettrVisualsController.FireballMoveTo(nil, textMeshProTarget.GameObject, 0, 0.5, false)
                                    BettrVisualsController.FireballMoveTo(textMeshProTarget.GameObject, textMeshProAccumulatorsCreditsTarget.GameObject, 0, 0.5, true)
                                    BettrVisualsController.RollUpFormatCounter(textMeshProAccumulatorsCreditsTarget, row.AccumulatorCreditsBefore, row.AccumulatorCreditsAfter, 0.5)
                                    BettrVisualsController.RollUpFormatCounter(textMeshProTarget, row.HeapAccumulatorCreditsAfter, 0, 0.5)
                                    System.WaitForSeconds(0.5)
                                end
                                do
                                    animatorProp = animatorGroupProp["SC__HideAnimation"]
                                    BettrVisualsController.PlayAnimatorProperty(animatorProp)
                                end
                            end
                        else
                            parallel
                                do
                                    BettrVisualsController.FireballMoveTo(textMeshProProp.GameObject, textMeshProTarget.GameObject, 0, 0.5, true)
                                    BettrVisualsController.RollUpFormatCounter(textMeshProTarget, row.HeapAccumulatorCreditsBefore, row.HeapAccumulatorCreditsAfter, 0.5)
                                    textMeshProCountTarget.Format(row.HeapAccumulatorHitsAfter, row.AccumulatorThreshold)
                                end
                                do
                                    animatorProp = animatorGroupProp["SC__HideAnimation"]
                                    BettrVisualsController.PlayAnimatorProperty(animatorProp)
                                end
                            end
                        end
                    end                    
                end                
                if #filteredHeapAccumulatorMultipliersTable > 0 then
                    for i = 1, #filteredHeapAccumulatorMultipliersTable parallel do
                        local row = filteredHeapAccumulatorMultipliersTable[i]
                        local reelID = row.ReelID
                        local algo = row.Algo
                        local heapMultipliers = row.MultipliersAccumulated
                        local heapAccumulatorMultipliers = accumulatedHeapMultipliers[algo]
                        row.HeapAccumulatorMultipliersBefore = heapAccumulatorMultipliers
                        heapAccumulatorMultipliers = heapAccumulatorMultipliers + heapMultipliers
                        row.HeapAccumulatorMultipliersAfter = heapAccumulatorMultipliers
                        accumulatedHeapMultipliers[algo] = heapAccumulatorMultipliers
                        local hits = row.AccumulatorAdded
                        local heapAccumulatorHits = accumulatedHeapMultipliersHits[algo]
                        row.HeapAccumulatorHitsBefore = heapAccumulatorHits
                        heapAccumulatorHits = heapAccumulatorHits + hits
                        row.HeapAccumulatorHitsAfter = heapAccumulatorHits
                        accumulatedHeapMultipliersHits[algo] = heapAccumulatorHits
                        local multipliersAdded = row.MultipliersAdded
                        row.MultipliersAdded = multipliersAdded
                        local isHit = row.IsAccumulatorHit
                        row.IsHeapHit = isHit
                        if isHit then
                            row.AccumulatorMultipliersBefore = accumulatorMultipliers
                            accumulatorMultipliers = accumulatorMultipliers + multipliersAdded
                            row.AccumulatorMultipliersAfter = accumulatorMultipliers
                            accumulatedHeapMultipliers[algo] = 0
                        end
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"]
                        textMeshProProp.FormattedText = "x{0}"
                        textMeshProProp.Format(heapMultipliers)
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local animatorProp = animatorGroupProp["SC__MultipliersAccumulatorAnimation"]
                        BettrVisualsController.PlayAnimatorProperty(animatorProp)
                    end
                    for i = 1, #filteredHeapAccumulatorMultipliersTable do
                        local row = filteredHeapAccumulatorMultipliersTable[i]
                        local reelID = row.ReelID
                        local algo = row.Algo
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"]
                        BettrVisualsController.FireballMoveTo(nil, textMeshProProp.GameObject, 0, 0.5, false)
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")
                        local textMeshProTarget = nil
                        local textMeshProCountTarget = nil
                        if algo == "GreenMultipliersAccumulator" then
                            textMeshProTarget = heapAccumulatorTexts["Green"]
                            textMeshProCountTarget = heapAccumulatorCountTexts["Green"]
                        elseif algo == "YellowMultipliersAccumulator" then
                            textMeshProTarget = heapAccumulatorTexts["Yellow"]
                            textMeshProCountTarget = heapAccumulatorCountTexts["Yellow"]
                        elseif algo == "BlueMultipliersAccumulator" then
                            textMeshProTarget = heapAccumulatorTexts["Blue"]
                            textMeshProCountTarget = heapAccumulatorCountTexts["Blue"]
                        end
                        local textMeshProAccumulatorsMultipliersTarget = accumulatorsTextsGroup["Multipliers"]
                        if row.IsHeapHit then
                            parallel
                                do
                                    BettrVisualsController.FireballMoveTo(textMeshProProp.GameObject, textMeshProTarget.GameObject, 0, 0.5, true)
                                    BettrVisualsController.RollUpFormatCounter(textMeshProTarget, row.HeapAccumulatorMultipliersBefore, row.HeapAccumulatorMultipliersAfter, 0.5)
                                    textMeshProCountTarget.Format(row.HeapAccumulatorHitsAfter, row.AccumulatorThreshold)
                                    BettrVisualsController.FireballMoveTo(nil, textMeshProTarget.GameObject, 0, 0.5, false)
                                    BettrVisualsController.FireballMoveTo(textMeshProTarget.GameObject, textMeshProAccumulatorsMultipliersTarget.GameObject, 0, 0.5, true)
                                    BettrVisualsController.RollUpFormatCounter(textMeshProAccumulatorsMultipliersTarget, row.AccumulatorMultipliersBefore, row.AccumulatorMultipliersAfter, 0.5)
                                    BettrVisualsController.RollUpFormatCounter(textMeshProTarget, row.HeapAccumulatorMultipliersAfter, 0, 0.5)
                                    System.WaitForSeconds(0.5)
                                end
                                do
                                    animatorProp = animatorGroupProp["SC__HideAnimation"]
                                    BettrVisualsController.PlayAnimatorProperty(animatorProp)
                                end
                            end
                        else
                            parallel
                                do
                                    BettrVisualsController.FireballMoveTo(textMeshProProp.GameObject, textMeshProTarget.GameObject, 0, 0.5, true)
                                    BettrVisualsController.RollUpFormatCounter(textMeshProTarget, row.HeapAccumulatorMultipliersBefore, row.HeapAccumulatorMultipliersAfter, 0.5)
                                    textMeshProCountTarget.Format(row.HeapAccumulatorHitsAfter, row.AccumulatorThreshold)
                                end
                                do
                                    animatorProp = animatorGroupProp["SC__HideAnimation"]
                                    BettrVisualsController.PlayAnimatorProperty(animatorProp)
                                end
                            end
                        end
                    end                    
                end                
-------------------- RESET THE FREE SPINS REMAINING
                local updatedFreeSpinsRemaining = freeSpinsRemaining
                for i = 1, #filteredFreeSpinsTable do
                    local row = filteredFreeSpinsTable[i]
                    local fsRemaining = row.FreeSpinsAfter
                    updatedFreeSpinsRemaining = fsRemaining
                end
                if updatedFreeSpinsRemaining > freeSpinsRemaining then
                    local addedFreeSpins = updatedFreeSpinsRemaining - freeSpinsRemaining
                    freeSpinsRemaining = updatedFreeSpinsRemaining                    
                    machine.FreeSpinsRemainingText.SetActive(false)                    
                    machine.FreeSpinsAddedText.SetActive(true)
                    machine.FreeSpinsAddedText.Format(addedFreeSpins)                    
                    BettrVisualsController.PlayAnimatorProperty(machine.FreeSpinsAddAnimation)                    
                    machine.FreeSpinsRemainingText.SetText(freeSpinsRemaining)
                    machine.FreeSpinsRemainingText.SetActive(true)                    
                    machine.FreeSpinsAddedText.SetActive(false)                
                end                          
                System.WaitForSeconds(0.3)
            end                 
--- AFTER FREE SPINS - BEGIN PAYOUTS
            System.WaitForSeconds(0.3)      
            
            if #lockMultipliersMatrix > 0 then
                for i = 1, #lockMultipliersMatrix do                
                    local row = lockMultipliersMatrix[i]
                    if row.OutcomeIndex >= 0 then
                        local reelID = row.ReelID
                        local multipliersAdded = row.MultipliersAdded
                        local accumulatorMultipliersBefore = accumulatorMultipliers
                        local accumulatorMultipliersAfter = accumulatorMultipliersBefore + multipliersAdded
                        accumulatorMultipliers = accumulatorMultipliersAfter + 1
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"]                               
                        BettrVisualsController.FireballMoveTo(nil, textMeshProProp.GameObject, 0, 0.5, false)
                        BettrVisualsController.FireballMoveTo(textMeshProProp.GameObject, accumulatorsTextsGroup["Multipliers"].GameObject, 0, 0.5, true)
                        parallel
                            do
                                BettrVisualsController.RollUpFormatCounter(textMeshProProp, multipliersAdded, 0, 0.5)
                            end
                            do
                                BettrVisualsController.RollUpFormatCounter(accumulatorsTextsGroup["Multipliers"], accumulatorMultipliersBefore, accumulatorMultipliersAfter, 0.5)
                            end
                        end
                    end
                end
            end
                        
            if #lockCreditsMatrix > 0 then
                for i = 1, #lockCreditsMatrix do                
                    local row = lockCreditsMatrix[i]
                    if row.OutcomeIndex >= 0 then
                        local reelID = row.ReelID
                        local creditsAdded = row.CreditsAdded
                        local accumulatorCreditsBefore = accumulatorCredits
                        local accumulatorCreditsAfter = accumulatorCreditsBefore + creditsAdded
                        accumulatorCredits = accumulatorCreditsAfter
                        local textMeshProGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolText2")
                        local textMeshProProp = textMeshProGroupProp["SC"]               
                        local animatorGroupProp = reelMatrixMechanic:GetProperty(reelID .. "SymbolAnimator2")                
                        local hideAnimationProp = animatorGroupProp["SC__HideAnimation"]
                        BettrVisualsController.FireballMoveTo(nil, textMeshProProp.GameObject, 0, 0.5, false)
                        BettrVisualsController.FireballMoveTo(textMeshProProp.GameObject, accumulatorsTextsGroup["Credits"].GameObject, 0, 0.5, true)
                        BettrVisualsController.RollUpFormatCounter(accumulatorsTextsGroup["Credits"], accumulatorCreditsBefore, accumulatorCreditsAfter, 0.5)
                        BettrVisualsController.RollUpFormatCounter(textMeshProProp, creditsAdded, 0, 0.5)
                        BettrVisualsController.PlayAnimatorProperty(hideAnimationProp)
                    end
                end
            end
            
            local accumulatorCreditsBefore = accumulatorCredits
            local accumulatorCreditsAfter = accumulatorCreditsBefore * (accumulatorMultipliers)
            if accumulatorMultipliers > 1 then
                BettrVisualsController.FireballMoveTo(nil, accumulatorsTextsGroup["Multipliers"].GameObject, 0, 0.5, false)
                BettrVisualsController.FireballMoveTo(accumulatorsTextsGroup["Multipliers"].GameObject, accumulatorsTextsGroup["Credits"].GameObject, 0, 0.5, true)
            end
            BettrVisualsController.RollUpFormatCounter(accumulatorsTextsGroup["Credits"], accumulatorCreditsBefore, accumulatorCreditsAfter, 0.5)   
            if accumulatorMultipliers > 1 then
                BettrVisualsController.RollUpFormatCounter(accumulatorsTextsGroup["Multipliers"], accumulatorMultipliers, 1, 0.5)
            end         
            System.WaitForSeconds(0.5)
            accumulatorsGroup["Multipliers"].SetActive(false)
            
            summaryText.Format(0)
            summaryText.SetActive(true)
            summaryButton.GameObject.SetActive(true)
            
            BettrVisualsController.FireballMoveTo(nil, accumulatorsTextsGroup["Credits"].GameObject, 0, 0.5, false)
            BettrVisualsController.FireballMoveTo(accumulatorsTextsGroup["Credits"].GameObject, summaryText.GameObject, 0, 0.5, true)            
                        
            BettrVisualsController.RollUpFormatCounter(summaryText, 0, payout, 0.5)
            BettrVisualsController.RollUpFormatCounter(accumulatorsTextsGroup["Credits"], payout, 0, 0.5)
            System.WaitForSeconds(0.5)
            accumulatorsGroup["Credits"].SetActive(false)
            
            BettrDialogController.WaitForDialogAction(summaryButton.GameObject)
            
            reelMatrixMechanic:ResetTextures()
            
            heapAccumulatorsGroup["Green"].SetActive(false)
            heapAccumulatorsGroup["Yellow"].SetActive(false)
            heapAccumulatorsGroup["Blue"].SetActive(false)
            
            accumulatorsGroup["Multipliers"].SetActive(false)
            accumulatorsGroup["Credits"].SetActive(false)   
            
            BettrVisualsController.FireballMoveTo(nil, summaryText.GameObject, 0, 0.5, false)
            BettrVisualsController.FireballMoveTo(summaryText.GameObject, machine.WinText.GameObject, 0, 0.5, true)
            
            machine:RollupCredits()
            System.WaitForSeconds(2)
            
            summaryButton.GameObject.SetActive(false)            
            mechanicsPrefab.SetActive(false)
            machine.FreeSpinsRemaining.SetActive(false)
            
            System.WaitForSeconds(1)
                                    
            machineParent.SetActive(true)   
            
            machine.Spin.SetActive(true)
            machine.Bet.SetActive(true)
            
            machine:OnBaseGameSpinCompleted()    
            
        end
    end
end

