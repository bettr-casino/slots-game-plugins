require "math"
require "Core"

Game001BaseGameMachineLockedSymbolsMechanic = {
    Config = {
        Machine = "Game001",
        Variant = "EpicDragonsHoard",
        Experiment = "control",
        Mechanic = "LockedSymbols",
    },
    State = {
        MechanicsPrefab = nil,
        ActiveAlgorithmsTable = nil,
    }
}

function Game001BaseGameMachineLockedSymbolsMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game001BaseGameMachineLockedSymbolsMechanic:Initialize(machine)
    series
        do
            local manifest = Game001.Manifest
            local prefabName = "BaseGameMachineLockedSymbols"
            local machineParent = machine.MachineParent
            local mechanicsParent = machine.MechanicsParent
            local mechanicsPrefab = BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject)
            mechanicsPrefab.SetActive(true)
            mechanicsPrefab.name = self.Config.Mechanic
            self.State.MechanicsPrefab = mechanicsPrefab
        end
    end
end

function Game001BaseGameMachineLockedSymbolsMechanic:OnBaseGameSpinCompleted(machine)
    series
        do
            local reelMatrixMechanic = machine.Mechanics.ReelMatrixMechanic
            local reelMatrixState = reelMatrixMechanic.State
            
            local freeSpinsMechanic = machine.Mechanics.FreeSpinsMechanic
            if freeSpinsMechanic == nil then
                return
            end       
            
            local fsSummaryTable = BettrMathController.GetBaseGameMechanicSummary(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic)            
            local fsOutcomeCount = fsSummaryTable.OutcomeCount
            if fsOutcomeCount <= 0 then
                return
            end 
            
            local summaryTable = BettrMathController.GetBaseGameMechanicSummary(self.Config.Machine, self.Config.Mechanic)
            local outcomeCount = summaryTable.OutcomeCount
            if outcomeCount <= 0 then
                return
            end
            
            Game001BaseGameState.SpinState.First.State = "Waiting"                

            local reelStripData = BettrMathController.GetBaseGameMechanicDataMatrix(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic, "ReelStrip")
            local outcomesTable = BettrMathController.GetBaseGameMechanicMatrix(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic, "Outcomes")
            
            local tableName = "BaseGame" .. self.Config.Mechanic .. "3"
            local activeAlgorithmsTable = BettrMathController.GetTableArray(tableName, self.Config.Machine, "LockedSymbols")
            self.State.ActiveAlgorithmsTable = activeAlgorithmsTable
            
            local mechanicsPrefab = reelMatrixState.MechanicsPrefab            
            local machineParent = machine.MachineParent

            local reelCount = Game001BaseGameLayout.ReelCount.First.Value
            local initialMeshRenderers = BettrMechanicsController.GetSymbolMatrixMeshRenderers(self.Config.Machine, reelCount)            
            
            mechanicsPrefab.SetActive(true)            
            System.WaitForFrame(2)                     
            
            reelMatrixMechanic:ShowReelMatrix(initialMeshRenderers)
            machineParent.SetActive(false)
                                    
            System.WaitForSeconds(1)
                                 
            reelMatrixMechanic:SetReelStripData(reelStripData)
            local texturesGo = self.State.MechanicsPrefab
            local meshRenderers = BettrMechanicsController.GetSymbolGroupMeshRenderers(texturesGo)
            reelMatrixMechanic:ResetEngines()
            reelMatrixMechanic:SetReelStripSymbolTextures(meshRenderers)
            reelMatrixMechanic:SetOutcomes(outcomesTable)
            reelMatrixMechanic:StartEngines() 
            
            local lockedSymbolsControls = machine.LockedSymbolsControls
            local startButton = lockedSymbolsControls["StartButton"]
            
            startButton.GameObject.SetActive(true)
            BettrDialogController.WaitForDialogAction(startButton.GameObject)
            startButton.GameObject.SetActive(false)
            
            local groupKey = machine.LockedSymbolsHeapAccumulators
            
            groupKey["Green"].SetActive(false)
            groupKey["Yellow"].SetActive(false)
            groupKey["Blue"].SetActive(false)
            
            for i = 1, #activeAlgorithmsTable do
                local row = activeAlgorithmsTable[i]
                if row.Algorithm == "GreenMultiplierAccumulator" or row.Algorithm == "GreenCreditsAccumulator" then
                    groupKey["Green"].SetActive(true)
                elseif row.Algorithm == "YellowMultiplierAccumulator" or row.Algorithm == "YellowCreditsAccumulator" then
                    groupKey["Yellow"].SetActive(true)
                elseif row.Algorithm == "BlueMultiplierAccumulator" or row.Algorithm == "BlueCreditsAccumulator" then
                    groupKey["Blue"].SetActive(true)
                end
            end                           
            
            local lockedSymbols = BettrMathController.GetBaseGameMechanic(self.Config.Machine, self.Config.Mechanic, "LockedSymbols")
            
            System.WaitForSeconds(2)
            
            while outcomeCount > 0 do
                outcomeCount = outcomeCount - 1
                reelMatrixMechanic:SpinEngines(machine)
                
                if lockedSymbols ~= nil then
                    local outcomeIndex = reelMatrixMechanic:OutcomeIndex()
                    local filteredTable = {}
                    BettrMathController.FilterTable(lockedSymbols, filteredTable, "LockOutcomeIndex", outcomeIndex)
                    reelMatrixMechanic:LockEngines(filteredTable)
                end
                
                System.WaitForSeconds(1)
            end     
            
            System.WaitForSeconds(1)
            
            groupKey["Green"].SetActive(false)
            groupKey["Yellow"].SetActive(false)
            groupKey["Blue"].SetActive(false)
            
            mechanicsPrefab.SetActive(false)
            
            System.WaitForSeconds(1)
                                    
            machineParent.SetActive(true)   
            
            machine:OnBaseGameSpinCompleted()
            
        end
    end
end

