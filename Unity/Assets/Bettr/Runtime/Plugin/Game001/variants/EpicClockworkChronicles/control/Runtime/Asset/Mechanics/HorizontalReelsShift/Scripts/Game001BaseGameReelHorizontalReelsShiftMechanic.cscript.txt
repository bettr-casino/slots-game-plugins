require "math"
require "Core"

Game001BaseGameReelHorizontalReelsShiftMechanic = {
    Config = {
        Machine = "Game001",
        Variant = "EpicClockworkChronicles",
        Experiment = "control",
        Mechanic = "HorizontalReelsShift",
    },
}

function Game001BaseGameReelHorizontalReelsShiftMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game001BaseGameReelHorizontalReelsShiftMechanic:Initialize(reel)
end

function Game001BaseGameReelHorizontalReelsShiftMechanic:OnOutcomeReceived(reel)
    local thisReelID = reel.ReelID
    local summary = BettrMathController.GetBaseGameMechanicSummary(self.Config.Machine, self.Config.Mechanic)
    local numShifts = summary.NumShifts
    System.Print("Game001BaseGameReelHorizontalReelsShiftMechanic:OnOutcomeReceived reelID={0} numShifts={1}", thisReelID, numShifts)
    local otherReelID = nil
    if numShifts > 0 then
        for i=1,numShifts do
            if otherReelID ~= nil then
                break
            end
            local matrix = BettrMathController.GetBaseGameMechanicMatrix(self.Config.Machine, self.Config.Mechanic, "Shift" .. i)
            for j=1,#matrix do
                local matrixRow = matrix[j]
                if matrixRow.ReelID2 == thisReelID then
                    otherReelID = matrixRow.ReelID1
                    break
                end
            end
        end
    end
    if otherReelID ~= nil then
        local otherReel = _G["Game001BaseGame" .. otherReelID]
        BettrMechanicsController.SwapReelsForSpin(reel, otherReel)
    end
end

