require "math"
require "Core"
require "Game001BaseGameReelWaysMechanic"
require "Game001BaseGameReelCascadingReelsMechanic"
require "Game001BaseGameReelCascadingReelsMultiplierMechanic"

Game001BaseGameReelMechanics = {
    Config = {
        Machine = "Game001",
        Variant = "EpicAncientAdventures",
        Experiment = "control",
    },
    WaysMechanic = nil,
    CascadingReelsMechanic = nil,
    CascadingReelsMultiplierMechanic = nil,
}

function Game001BaseGameReelMechanics:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game001BaseGameReelMechanics:Initialize(reel)
    self.WaysMechanic = Game001BaseGameReelWaysMechanic:new()
    self.WaysMechanic:Initialize(reel)
    self.CascadingReelsMechanic = Game001BaseGameReelCascadingReelsMechanic:new()
    self.CascadingReelsMechanic:Initialize(reel)
    self.CascadingReelsMultiplierMechanic = Game001BaseGameReelCascadingReelsMultiplierMechanic:new()
    self.CascadingReelsMultiplierMechanic:Initialize(reel)
end

function Game001BaseGameReelMechanics:SpinReelSpinStartedRollBack(reel)
end

function Game001BaseGameReelMechanics:SpinReelSpinStartedRollForward(reel)
end

function Game001BaseGameReelMechanics:SpinReelSpinEndingRollBack(reel)
end

function Game001BaseGameReelMechanics:SpinReelSpinEndingRollForward(reel)
end

function Game001BaseGameReelMechanics:SpinReelReachedOutcomeStopIndex(reel)
end

function Game001BaseGameReelMechanics:OnSpinReelsStopped(reel)
end

function Game001BaseGameReelMechanics:StartEngines(reel)
end

function Game001BaseGameReelMechanics:OnOutcomeReceived(reel)
end

function Game001BaseGameReelMechanics:SpinEngines(reel)
end



