require "math"
require "Core"
require "Game007BaseGameMachinePaylinesMechanic"

Game007BaseGameMachineMechanics = {
    Config = {
        Machine = "Game007",
        Variant = "TrueVegasSuper7s",
        Experiment = "control",
    },
    PaylinesMechanic = nil,
}

function Game007BaseGameMachineMechanics:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game007BaseGameMachineMechanics:OnError(callStack)
	System.Error("BaseGameMachineMechanics Error CallStack: {0}", callStack)
end

function Game007BaseGameMachineMechanics:Initialize(machine)
     self.PaylinesMechanic = Game007BaseGameMachinePaylinesMechanic:new()
     self.PaylinesMechanic:Initialize(machine)
end

function Game007BaseGameMachineMechanics:StartMachine(machine)
    if self.ChooseASideMechanic ~= nil then
        self.ChooseASideMechanic:StartMachine(machine)
    else
        machine:StartMachine()
    end
end

function Game007BaseGameMachineMechanics:BaseGamePayout(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.WaysMechanic ~= nil then
       self.WaysMechanic:BaseGamePayout(machine)
    elseif self.CascadingReelsMechanic ~= nil then
       self.CascadingReelsMechanic:BaseGamePayout(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:BaseGamePayout(machine)
    end
end

function Game007BaseGameMachineMechanics:TryPaying(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.WaysMechanic ~= nil then
       return self.WaysMechanic:TryPaying(machine)
    elseif self.PaylinesMechanic ~= nil then
       return self.PaylinesMechanic:TryPaying(machine)
    end
    return 0
end

function Game007BaseGameMachineMechanics:OnPayingCompleted(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.WaysMechanic ~= nil then
       self.WaysMechanic:OnPayingCompleted(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:OnPayingCompleted(machine)
    end
end

function Game007BaseGameMachineMechanics:RollupCredits(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.WaysMechanic ~= nil then
       self.WaysMechanic:RollupCredits(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:RollupCredits(machine)
    end
end

function Game007BaseGameMachineMechanics:OnBaseGameSpinCompleted(machine)
    series
        do
            -- this is hardcoded
            -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
            if self.CascadingReelsMechanic ~= nil then
               self.CascadingReelsMechanic:OnBaseGameSpinCompleted(machine)
            elseif self.WaysMechanic ~= nil then
               self.WaysMechanic:OnBaseGameSpinCompleted(machine)
            elseif self.PaylinesMechanic ~= nil then
               self.PaylinesMechanic:OnBaseGameSpinCompleted(machine)
            end 
        end
    end
end
