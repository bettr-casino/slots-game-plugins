require "math"
require "Core"

require "Game007BaseGameMachinePaylinesMechanic"


Game007BaseGameMachineMechanics = {

    PaylinesMechanic = nil,

}

function Game007BaseGameMachineMechanics:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function Game007BaseGameMachineMechanics:Initialize(machine)

    self.PaylinesMechanic = Game007BaseGameMachinePaylinesMechanic:new()
    self.PaylinesMechanic:Initialize(machine)

end

function Game007BaseGameMachineMechanics:BaseGamePayout(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.CascadingReelsMechanic ~= nil then
       self.CascadingReelsMechanic:BaseGamePayout(machine)
    elseif self.WaysMechanic ~= nil then
       self.WaysMechanic:BaseGamePayout(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:BaseGamePayout(machine)
    end
end

function Game007BaseGameMachineMechanics:TryPaying(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.CascadingReelsMechanic ~= nil then
       self.CascadingReelsMechanic:TryPaying(machine)
    elseif self.WaysMechanic ~= nil then
       self.WaysMechanic:TryPaying(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:TryPaying(machine)
    end
end
