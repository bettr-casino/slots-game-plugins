require "math"
require "Core"

{{machineName}}BaseGameMachineChooseASideMechanic = {
    Config = {
        Machine = "{{machineName}}",
        Variant = "{{machineVariant}}",
        Experiment = "{{experimentVariant}}",
    },
    State = {
        MechanicsPrefab = nil
    }
}

function {{machineName}}BaseGameMachineChooseASideMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function {{machineName}}BaseGameMachineChooseASideMechanic:Initialize(machine)
    series
        do
            local manifest = {{machineName}}.Manifest
            local prefabName = "BaseGameMachineChooseASide"
            local machineParent = machine.MachineParent
            machineParent.SetActive(false)
            local mechanicsParent = machine.MechanicsParent
            mechanicsParent.SetActive(true)
            System.Print("{{machineName}}BaseGameMachineChooseASideMechanic:Initialize before manifest.BundleName={0} manifest.BundleVersion={1} prefabName={2} mechanicsParentGameObject={3}", manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject.name)    
            local mechanicsPrefab = BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject)
            mechanicsPrefab.SetActive(false)
            self.State.MechanicsPrefab = mechanicsPrefab
            System.Print("{{machineName}}BaseGameMachineCascadingReelsMultiplierMechanic:Initialize mechanicsPrefab={0}", mechanicsPrefab.name)            
        end
    end
end

function {{machineName}}BaseGameMachineChooseASideMechanic:StartMachine(machine)
    series
        do
            self.State.MechanicsPrefab.SetActive(true);            
            System.WaitForFrame(1)
            machine.ChooseASideMechanicSliderParent.SetActive(true)
            local result = BettrDialogController.ShowModalDialog(self.State.MechanicsPrefab)
            System.Print("{{machineName}}BaseGameMachineChooseASideMechanic:StartMachine result={0}", result)
            local machineParent = machine.MachineParent
            if result == "Evil" then
                self:_ActivateMechanic(machine, machine.ChooseASideMechanicDialogEvilText, machine.ChooseASideMechanicEvilText)
                machine.ChooseASideMechanicDialogEvilImage.SetActive(false)
                machine.ChooseASideMechanicDialogEvilText.GameObject.SetActive(false)
                machine.ChooseASideMechanicEvilImage.SetActive(true)
                machine.ChooseASideMechanicEvilText.GameObject.SetActive(true)
                self:_ActivateMechanic(machine, machine.ChooseASideMechanicDialogGoodText, machine.ChooseASideMechanicGoodText)
                machine.ChooseASideMechanicDialogGoodImage.SetActive(false)
                machine.ChooseASideMechanicDialogGoodText.GameObject.SetActive(false)
                machine.ChooseASideMechanicGoodImage.SetActive(true)
                machine.ChooseASideMechanicGoodText.GameObject.SetActive(true)
            else
                self:_ActivateMechanic(machine, machine.ChooseASideMechanicDialogGoodText, machine.ChooseASideMechanicGoodText)            
                machine.ChooseASideMechanicDialogGoodImage.SetActive(false)
                machine.ChooseASideMechanicDialogGoodText.GameObject.SetActive(false)
                machine.ChooseASideMechanicGoodImage.SetActive(true)
                machine.ChooseASideMechanicGoodText.GameObject.SetActive(true)
                self:_ActivateMechanic(machine, machine.ChooseASideMechanicDialogEvilText, machine.ChooseASideMechanicEvilText)
                machine.ChooseASideMechanicDialogEvilImage.SetActive(false)
                machine.ChooseASideMechanicDialogEvilText.GameObject.SetActive(false)
                machine.ChooseASideMechanicEvilImage.SetActive(true)
                machine.ChooseASideMechanicEvilText.GameObject.SetActive(true)
            end
            machine.ChooseASideMechanicDialogParent.SetActive(false)
            local sliderPointerGameObject = machine.ChooseASideMechanicSliderPointer.GameObject
            BettrVisualsController.FireballMoveTo(nil, sliderPointerGameObject, 0, 1, false)
            machine.ChooseASideMechanicSliderBar.SetActive(true)
            sliderPointerGameObject.SetActive(true)
            local sliderCount = machine.ChooseASliderMechanicSliderCount
            local middleSliderIndex = machine.ChooseASliderMechanicMiddleSliderIndex
            local sliderGroup = machine.ChooseASideMechanicSliderSlots
            local middleSliderSlot = sliderGroup["SliderSlot" .. middleSliderIndex]
            local startSliderSlot = sliderGroup["SliderSlot1"]
            local endSliderSlot = sliderGroup["SliderSlot" .. sliderCount]
            local startSliderText = machine.ChooseASideMechanicEvilText
            local endSliderText = machine.ChooseASideMechanicGoodText
            if result == "Good" then
                local tmpSliderSlot = endSliderSlot
                endSliderSlot = startSliderSlot
                startSliderSlot = tmpSliderSlot
                local tmpSliderText = endSliderText
                endSliderText = startSliderText
                startSliderText = tmpSliderText
            end
            local startSliderTextOriginal = startSliderText.Text
            local endSliderTextOriginal = endSliderText.Text
            BettrVisualsController.TweenGameObject(sliderPointerGameObject, nil, middleSliderSlot.GameObject, 0.3, false)
            BettrVisualsController.TweenGameObject(sliderPointerGameObject, middleSliderSlot.GameObject, startSliderSlot.GameObject, 1, true)
            startSliderText.SetText("YOU WIN")
            System.WaitForSeconds(1)
            startSliderText.SetText(startSliderTextOriginal)
            BettrVisualsController.TweenGameObject(sliderPointerGameObject, startSliderSlot.GameObject, endSliderSlot.GameObject, 2, true)
            endSliderText.SetText("YOU LOSE")
            System.WaitForSeconds(1)
            endSliderText.SetText(endSliderTextOriginal)
            BettrVisualsController.TweenGameObject(sliderPointerGameObject, endSliderSlot.GameObject, middleSliderSlot.GameObject, 1, true)
            machineParent.SetActive(true)
            machine:StartMachine()
        end
    end
end

function {{machineName}}BaseGameMachineChooseASideMechanic:TryPaying(machine)
end

function {{machineName}}BaseGameMachineChooseASideMechanic:_ActivateMechanic(machine, startTmPro, endTmPro)
    BettrVisualsController.FireballMoveTo(nil, startTmPro.GameObject, 0, 1, false)
    BettrVisualsController.FireballMoveTo(startTmPro.GameObject, endTmPro.GameObject, 0, 1, true)
    BettrVisualsController.FireballMoveTo(nil, endTmPro.GameObject, 0, 1, false)
end


