require "math"
require "Core"

{{machineName}}BaseGameMachineChooseASideMechanic = {
    Config = {
        Machine = "{{machineName}}",
        Variant = "{{machineVariant}}",
        Experiment = "{{experimentVariant}}",
    },
    State = {
        MechanicsPrefab = nil
    }
}

function {{machineName}}BaseGameMachineChooseASideMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function {{machineName}}BaseGameMachineChooseASideMechanic:Initialize(machine)
    series
        do
            local manifest = {{machineName}}.Manifest
            local prefabName = "BaseGameMachineChooseASide"
            local machineParent = machine.MachineParent
            machineParent.SetActive(false)
            local mechanicsParent = machine.MechanicsParent
            mechanicsParent.SetActive(true)
            System.Print("{{machineName}}BaseGameMachineChooseASideMechanic:Initialize before manifest.BundleName={0} manifest.BundleVersion={1} prefabName={2} mechanicsParentGameObject={3}", manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject.name)    
            local mechanicsPrefab = BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject)
            mechanicsPrefab.SetActive(false)
            self.State.MechanicsPrefab = mechanicsPrefab
            System.Print("{{machineName}}BaseGameMachineCascadingReelsMultiplierMechanic:Initialize mechanicsPrefab={0}", mechanicsPrefab.name)            
        end
    end
end

function {{machineName}}BaseGameMachineChooseASideMechanic:StartMachine(machine)
    series
        do
            self.State.MechanicsPrefab.SetActive(true);            
            System.WaitForFrame(1)
            machine.ChooseASideMechanicSliderParent.SetActive(true)
            local result = BettrDialogController.ShowModalDialog(self.State.MechanicsPrefab)
            System.Print("{{machineName}}BaseGameMachineChooseASideMechanic:StartMachine result={0}", result)
            if result == "Evil" then
                machine.ChooseASideMechanicDialogGoodText.GameObject.SetActive(false)
                machine.ChooseASideMechanicDialogGoodImage.SetActive(false)
            else
                machine.ChooseASideMechanicDialogEvilText.GameObject.SetActive(false)
                machine.ChooseASideMechanicDialogEvilImage.SetActive(false)
            end
            local startGameObject = machine.ChooseASideMechanicDialogGoodText.GameObject
            local endGameObject = machine.ChooseASideMechanicGoodText.GameObject
            if result == "Evil" then
                startGameObject = machine.ChooseASideMechanicDialogEvilText.GameObject
                endGameObject = machine.ChooseASideMechanicEvilText.GameObject
            end
            local machineParent = machine.MachineParent
            BettrVisualsController.FireballMoveTo(nil, startGameObject, 0, 1, false)
            BettrVisualsController.FireballMoveTo(startGameObject, endGameObject, 0, 1, true)
            machine.ChooseASideMechanicDialogParent.SetActive(false)
            BettrVisualsController.FireballMoveTo(nil, endGameObject, 0, 1, false)
            if result == "Evil" then 
                machine.ChooseASideMechanicEvilText.SetText("WIN")
                machine.ChooseASideMechanicGoodText.SetText("LOSE")
            else
                machine.ChooseASideMechanicEvilText.SetText("LOSE")
                machine.ChooseASideMechanicGoodText.SetText("WIN")
            end
            local sliderPointerGameObject = machine.ChooseASideMechanicSliderPointer.GameObject
            BettrVisualsController.FireballMoveTo(nil, sliderPointerGameObject, 0, 1, false)
            sliderPointerGameObject.SetActive(true)
            machineParent.SetActive(true)
            machine:StartMachine()
        end
    end
end

function {{machineName}}BaseGameMachineChooseASideMechanic:TryPaying(machine)
end


