require "math"
require "Core"

{{machineName}}BaseGameMachine{{mechanicName}}Mechanic = {
    Config = {
        Machine = "{{machineName}}",
        Variant = "{{machineVariant}}",
        Experiment = "{{experimentVariant}}",
        Mechanic = "{{mechanicName}}",
    },
    State = {
        MechanicsPrefab = nil,
    }
}

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:Initialize(machine)
    series
        do
            local manifest = {{machineName}}.Manifest
            local prefabName = "BaseGameMachine{{mechanicName}}"
            local machineParent = machine.MachineParent
            local mechanicsParent = machine.MechanicsParent
            local mechanicsPrefab = BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject)
            mechanicsPrefab.SetActive(true)
            mechanicsPrefab.name = self.Config.Mechanic
            self.State.MechanicsPrefab = mechanicsPrefab
        end
    end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:OnBaseGameSpinCompleted(machine)
    series
        do
            local reelMatrixMechanic = machine.Mechanics.ReelMatrixMechanic
            local reelMatrixState = reelMatrixMechanic.State
            
            local freeSpinsMechanic = machine.Mechanics.FreeSpinsMechanic
            if freeSpinsMechanic == nil then
                return
            end       
            
            local summaryTable = BettrMathController.GetBaseGameMechanicSummary(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic)            
            local outcomeCount = summaryTable.OutcomeCount
            if outcomeCount <= 0 then
                return
            end 
            
            {{machineName}}BaseGameState.SpinState.First.State = "Waiting"                

            local reelStripData = BettrMathController.GetBaseGameMechanicDataMatrix(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic, "ReelStrip")
            local outcomesTable = BettrMathController.GetBaseGameMechanicMatrix(freeSpinsMechanic.Config.Machine, freeSpinsMechanic.Config.Mechanic, "Outcomes")
            
            local mechanicsPrefab = reelMatrixState.MechanicsPrefab            
            local machineParent = machine.MachineParent

            machineParent.SetActive(false)
            
            System.WaitForSeconds(1)
            
            mechanicsPrefab.SetActive(true)            
            System.WaitForFrame(2)                     
            
            reelMatrixMechanic:SetReelStripData(reelStripData)
            local texturesGo = self.State.MechanicsPrefab.transform.GetChild(0).gameObject
            reelMatrixMechanic:SetReelStripSymbolTextures(texturesGo)
            reelMatrixMechanic:SetOutcomes(outcomesTable)
            reelMatrixMechanic:ShowReelMatrix()            
            reelMatrixMechanic:StartEngines() 
            
            local lockedSymbols = nil
            local lockedSymbolsMechanic = self
            if lockedSymbolsMechanic ~= nil then
                lockedSymbols = BettrMathController.GetBaseGameMechanic(lockedSymbolsMechanic.Config.Machine, lockedSymbolsMechanic.Config.Mechanic, "{{mechanicName}}")
            end
            
            System.WaitForSeconds(2)
            
            local freeSpins = 10
            
            while freeSpins > 0 do
                freeSpins = freeSpins - 1
                reelMatrixMechanic:SpinEngines(machine)
                
                if lockedSymbols ~= nil then
                    local outcomeIndex = reelMatrixMechanic:OutcomeIndex()
                    local filteredTable = {}
                    BettrMathController.FilterTable(lockedSymbols, filteredTable, "LockOutcomeIndex", outcomeIndex)
                    reelMatrixMechanic:LockEngines(filteredTable)
                end
                
                System.WaitForSeconds(1)
            end     
            
            System.WaitForSeconds(1)
            
            mechanicsPrefab.SetActive(false)
            
            System.WaitForSeconds(1)
                                    
            machineParent.SetActive(true)   
            
            machine:OnBaseGameSpinCompleted()
            
        end
    end
end

