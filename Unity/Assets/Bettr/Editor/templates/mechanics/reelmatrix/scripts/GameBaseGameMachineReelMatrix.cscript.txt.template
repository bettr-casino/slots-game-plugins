require "math"
require "Core"
require "Utils"

{{machineName}}BaseGame{{mechanicName}} = {
    Config = {
        Machine = "{{machineName}}",
        Variant = "{{machineVariant}}",
        Experiment = "{{experimentVariant}}",
    },
}

function {{machineName}}BaseGame{{mechanicName}}:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function {{machineName}}BaseGame{{mechanicName}}:destroy()
	System.Print("{{machineName}}BaseGame{{mechanicName}} destroy tile id={0}", self.id)
end

function {{machineName}}BaseGame{{mechanicName}}:OnError(callStack)
	System.Error("{{machineName}}BaseGame{{mechanicName}} Error CallStack: {0}", callStack)
end

function {{machineName}}BaseGame{{mechanicName}}:Awake()
	System.Print("{{machineName}}BaseGame{{mechanicName}} Awake tile id={0}", self.id)
end

function {{machineName}}BaseGame{{mechanicName}}:StartEngines(machine)
    series
        do
            self.Bettr{{mechanicName}}CellController.StartEngines()
        end
    end
end

function {{machineName}}BaseGame{{mechanicName}}:SpinEngines()
    self.Bettr{{mechanicName}}CellController.SpinEngines()
end

function {{machineName}}BaseGame{{mechanicName}}:Update()
    local reelState = {{machineName}}BaseGame{{mechanicName}}State[self.ReelID].First
    local reelIsLocked = reelState.ReelIsLocked
    if reelIsLocked then
        return
    end
    local reelSpinState = {{machineName}}BaseGame{{mechanicName}}SpinState[self.ReelID].First
    local spinState = reelSpinState.ReelSpinState
    self.ReelSpinStateDispatchTable[spinState](self)    
end

function {{machineName}}BaseGame{{mechanicName}}:SpinReelSpinStartedRollBack()
    self.Bettr{{mechanicName}}CellController.SpinReelSpinStartedRollBack()
end

function {{machineName}}BaseGame{{mechanicName}}:SpinReelSpinStartedRollForward()
    self.Bettr{{mechanicName}}CellController.SpinReelSpinStartedRollForward()
end

function {{machineName}}BaseGame{{mechanicName}}:SpinReelSpinEndingRollBack()    
    self.Bettr{{mechanicName}}CellController.SpinReelSpinEndingRollBack()
end

function {{machineName}}BaseGame{{mechanicName}}:SpinReelSpinEndingRollForward()
    self.Bettr{{mechanicName}}CellController.SpinReelSpinEndingRollForward()
end

function {{machineName}}BaseGame{{mechanicName}}:SpinReelReachedOutcomeStopIndex()
    BettrAudioController.PlayAudioOnce("reelstop")
    local reelSpinState = {{machineName}}BaseGame{{mechanicName}}SpinState[self.ReelID].First
    reelSpinState.ReelSpinState = "SpinEndingRollForward"
end

function {{machineName}}BaseGame{{mechanicName}}:SpinReelStopped()
    local reelCount = {{machineName}}BaseGameLayout.ReelCount.First.Value
    local lastReelID = "Reel" .. reelCount
    if self.ReelID == lastReelID then
        {{machineName}}BaseGameMachine:OnSpinReelsStopped()
    end
    local reelSpinState = {{machineName}}BaseGame{{mechanicName}}SpinState[self.ReelID].First
    reelSpinState.ReelSpinState = "StoppedWaiting"
end

function {{machineName}}BaseGame{{mechanicName}}:SpinReelStoppedWaiting()    
end

function {{machineName}}BaseGame{{mechanicName}}:SpinReelWaiting()    
end

function {{machineName}}BaseGame{{mechanicName}}:SpinReelSpinning()
    return self.Bettr{{mechanicName}}CellController.SpinReelSpinning()    
end

function {{machineName}}BaseGame{{mechanicName}}:PlaySpinReelSpinEndingRollBackAnimation()
    series
        do        
            local spinEndingRollbackAnimation = {{machineName}}BaseGameSpinEndingRollBackAnimation[self.ReelID]
            
            if spinEndingRollbackAnimation == nil then
                return
            end
                      
            if spinEndingRollbackAnimation.First.Counter > 0 then
                return                
            end               
            
            spinEndingRollbackAnimation.First.Counter = 1 
                                                       
            local reelState = {{machineName}}BaseGame{{mechanicName}}State[self.ReelID].First
            local reelSpinState = {{machineName}}BaseGame{{mechanicName}}SpinState[self.ReelID].First
            local reelSymbolsState = {{machineName}}BaseGame{{mechanicName}}SymbolsState[self.ReelID].Array
                        
            local rollbackAnimationArray = spinEndingRollbackAnimation.Array            
            
            local animatorGroupPrefix = "SymbolLandWinAnimatorGroup"
            
            for i=1,#rollbackAnimationArray do
                local rowIndex = rollbackAnimationArray[i].RowIndex
                self:PlaySymbolAnimation(rowIndex, animatorGroupPrefix, false)
            end
        end
    end
end

function {{machineName}}BaseGame{{mechanicName}}:PlaySymbolAnimation(rowIndex, animatorGroupPrefix, waitForAnimationComplete)
    local animationDuration = 0.0
    series
        do                    
            if rowIndex >= 0 then
                local luaIndex = rowIndex + 1       
                local animatorGroupProperty = self[animatorGroupPrefix .. luaIndex]
                local symbolGroupProperty = self["SymbolGroup" .. luaIndex]
                local currentKey = symbolGroupProperty.CurrentKey
                local animatorProperty = animatorGroupProperty[currentKey]
                animatorProperty.waitForAnimationComplete = waitForAnimationComplete
                -- animationDuration = Core.Animator:PlayAnimatorProperty(currentKey, animatorProperty)
                animationDuration = BettrVisualsController.PlayAnimatorProperty(animatorProperty)
            end
        end
    end
    return animationDuration
end

function {{machineName}}BaseGame{{mechanicName}}:CloneAndOverlayCurrentSymbol(rowIndex)
    local overlaySymbol = nil
    series
        do                    
            overlaySymbol = self:CloneCurrentSymbol(rowIndex)
            if overlaySymbol ~= nil then
                BettrVisualsController.SetLayerRecursively(overlaySymbol, Core.Layers.SLOT_REELS_OVERLAY)
            end
        end
    end
    return overlaySymbol
end

function {{machineName}}BaseGame{{mechanicName}}:CloneCurrentSymbol(rowIndex)
    local clonedSymbol = nil
    series
        do                    
            if rowIndex >= 0 then
                local luaIndex = rowIndex + 1       
                local symbolGroupProperty = self["SymbolGroup" .. luaIndex] 
                clonedSymbol = symbolGroupProperty.CloneCurrent                               
            end
        end
    end
    return clonedSymbol
end

{{machineName}}BaseGame{{mechanicName}}.ReelSpinStateDispatchTable = {
    Waiting = {{machineName}}BaseGame{{mechanicName}}.SpinReelWaiting,
    Spinning = {{machineName}}BaseGame{{mechanicName}}.SpinReelSpinning,
    Stopped = {{machineName}}BaseGame{{mechanicName}}.SpinReelStopped,
    StoppedWaiting = {{machineName}}BaseGame{{mechanicName}}.SpinReelStoppedWaiting,
    ReachedOutcomeStopIndex = {{machineName}}BaseGame{{mechanicName}}.SpinReelReachedOutcomeStopIndex,
    SpinStartedRollBack = {{machineName}}BaseGame{{mechanicName}}.SpinReelSpinStartedRollBack,
    SpinStartedRollForward = {{machineName}}BaseGame{{mechanicName}}.SpinReelSpinStartedRollForward,
    SpinEndingRollForward = {{machineName}}BaseGame{{mechanicName}}.SpinReelSpinEndingRollForward,
    SpinEndingRollBack = {{machineName}}BaseGame{{mechanicName}}.SpinReelSpinEndingRollBack
}

return {{machineName}}BaseGame{{mechanicName}}:new()