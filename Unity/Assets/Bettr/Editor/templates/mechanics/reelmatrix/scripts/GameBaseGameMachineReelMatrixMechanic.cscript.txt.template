require "math"
require "Core"

{{machineName}}BaseGameMachine{{mechanicName}}Mechanic = {
    Config = {
        Machine = "{{machineName}}",
        Variant = "{{machineVariant}}",
        Experiment = "{{experimentVariant}}",
        Mechanic = "{{mechanicName}}",
    },
    State = {
        MechanicsPrefab = nil,
        {{mechanicName}}Controller = nil,
    }
}

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:Initialize(machine)
    series
        do
            local manifest = {{machineName}}.Manifest
            local prefabName = "BaseGameMachine{{mechanicName}}"
            local machineParent = machine.MachineParent
            local mechanicsParent = machine.MechanicsParent
            local mechanicsPrefab = BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject)
            mechanicsPrefab.SetActive(false)
            mechanicsPrefab.name = self.Config.Mechanic
            self.State.MechanicsPrefab = mechanicsPrefab
            self.State.{{mechanicName}}Controller = _G["{{machineName}}BaseGameMachine{{mechanicName}}Controller"]        
            System.Print("{{machineName}}BaseGameMachine{{mechanicName}}Mechanic:Initialize mechanicsPrefab={0}", self.State.MechanicsPrefab.name)
        end
    end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:SetReelStripData(reelStripData)
    self.State.{{mechanicName}}Controller:SetReelStripData(reelStripData)
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:SetReelStripSymbolTextures(prefab)
    self.State.{{mechanicName}}Controller:SetReelStripSymbolTextures(prefab)
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:ResetEngines()
    self.State.{{mechanicName}}Controller:ResetEngines()
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:SetOutcomes(outcomesTable)
    self.State.{{mechanicName}}Controller:SetOutcomes(outcomesTable)
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:Show{{mechanicName}}(initialMeshRenderers)
    self.State.{{mechanicName}}Controller:Show{{mechanicName}}(initialMeshRenderers)
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:StartEngines()
    self.State.{{mechanicName}}Controller:StartEngines()            
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:SpinEngines(machine)
    self.State.{{mechanicName}}Controller:SpinEngines()
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:OutcomeIndex()
    return self.State.{{mechanicName}}Controller:OutcomeIndex()
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:LockEngines(lockedSymbols{{mechanicName}})
    return self.State.{{mechanicName}}Controller:LockEngines(lockedSymbols{{mechanicName}})
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:GetProperty(key)
    return self.State.{{mechanicName}}Controller[key]
end



