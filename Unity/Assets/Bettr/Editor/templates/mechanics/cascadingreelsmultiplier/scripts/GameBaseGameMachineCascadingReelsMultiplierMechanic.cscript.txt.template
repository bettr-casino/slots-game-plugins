require "math"
require "Core"

{{machineName}}BaseGameMachineCascadingReelsMultiplierMechanic = {
    State = {
        MechanicsPrefab = nil
    }
}

function {{machineName}}BaseGameMachineCascadingReelsMultiplierMechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function {{machineName}}BaseGameMachineCascadingReelsMultiplierMechanic:Initialize(machine)
    series
        do
            local manifest = {{machineName}}.Manifest
            local prefabName = "BaseGameMachineCascadingReelsMultiplier"
            local parentGameObject = machine.MechanicsParent.GameObject
            System.Print("{{machineName}}BaseGameMachineCascadingReelsMultiplierMechanic:Initialize before manifest.BundleName={0} manifest.BundleVersion={1} prefabName={2} parentGameObject={3}", manifest.BundleName, manifest.BundleVersion, prefabName, parentGameObject.name)    
            local mechanicsPrefab = BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, prefabName, parentGameObject)
            mechanicsPrefab.SetActive(false)
            self.State.MechanicsPrefab = mechanicsPrefab
            System.Print("{{machineName}}BaseGameMachineCascadingReelsMultiplierMechanic:Initialize mechanicsPrefab={0}", mechanicsPrefab.name)
        end
    end
end

function {{machineName}}BaseGameMachineCascadingReelsMultiplierMechanic:BaseGamePayout(machine, cascadeID)
    series
        do
            local isTriggered = {{machineName}}BaseGameCascadingReelsMultiplierSummary.CascadingReelsMultiplier.First.Triggered
            System.Print("{{machineName}}BaseGameMachineCascadingReelsMultiplierMechanic BaseGamePayout cascadeID={0} isTriggered={1}", cascadeID, isTriggered)
            if not isTriggered then
                return
            end
            local arr = {{machineName}}BaseGameCascadingReelsMultiplier.CascadingReelsMultiplier.Array
            for i = 1, #arr do
                local cascadingReelsMultiplier = arr[i]
                local thisCascadeID = cascadingReelsMultiplier.Cascade
                if thisCascadeID == cascadeID then
                    local multiplier = cascadingReelsMultiplier.Multiplier
                    local pays = cascadingReelsMultiplier.Pays
                    local totalPays = cascadingReelsMultiplier.TotalPays
                    BettrTextMeshProController.SetText(self.State.MechanicsPrefab, 0)
                    System.Print("{{machineName}}BaseGameMachineCascadingReelsMultiplierMechanic BaseGamePayout cascadeID={0} multiplier={1} pays={2} totalPays={3}", cascadeID, multiplier, pays, totalPays)
                    self.State.MechanicsPrefab.SetActive(true)
                end
            end
        end
    end
end

function {{machineName}}BaseGameMachineCascadingReelsMultiplierMechanic:TryPaying(machine)
end


