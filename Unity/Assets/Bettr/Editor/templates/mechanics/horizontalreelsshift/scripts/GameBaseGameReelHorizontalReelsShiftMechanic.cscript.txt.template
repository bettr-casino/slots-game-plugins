require "math"
require "Core"

{{machineName}}BaseGameReel{{mechanicName}}Mechanic = {
    Config = {
        Machine = "{{machineName}}",
        Variant = "{{machineVariant}}",
        Experiment = "{{experimentVariant}}",
        Mechanic = "{{mechanicName}}",
    },
}

function {{machineName}}BaseGameReel{{mechanicName}}Mechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function {{machineName}}BaseGameReel{{mechanicName}}Mechanic:Initialize(reel)
end

function {{machineName}}BaseGameReel{{mechanicName}}Mechanic:OnOutcomeReceived(reel)
    local thisReelID = reel.ReelID
    local summary = BettrMathController.GetBaseGameMechanicSummary(self.Config.Machine, self.Config.Mechanic)
    local numShifts = summary.NumShifts
    System.Print("{{machineName}}BaseGameReel{{mechanicName}}Mechanic:OnOutcomeReceived reelID={0} numShifts={1}", thisReelID, numShifts)
    local otherReelID = nil
    if numShifts > 0 then
        for i=1,numShifts do
            if otherReelID ~= nil then
                break
            end
            local matrix = BettrMathController.GetBaseGameMechanicMatrix(self.Config.Machine, self.Config.Mechanic, "Shift" .. i)
            for j=1,#matrix do
                local matrixRow = stateMatrix[j]
                if matrixRow.ReelID1 == thisReelID then
                    otherReelID = matrixRow.ReelID2
                    break
                end
            end
        end
    end
    if otherReelID ~= nil then
        self.BettrReelController.SwapReels(thisReelID, otherReelID)
    end
end

