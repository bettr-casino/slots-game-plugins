require "math"
require "Core"

{{machineName}}BaseGameMachine{{mechanicName}}Mechanic = {
    Config = {
        Machine = "{{machineName}}",
        Variant = "{{machineVariant}}",
        Experiment = "{{experimentVariant}}",
    },
    State = {
        MechanicsPrefab = nil,
        MainLobbyScene = nil,
    }
}

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:Initialize(machine)
    series
        do
            local manifest = {{machineName}}.Manifest
            local prefabName = "BaseGameMachine{{mechanicName}}"
            local machineParent = machine.MachineParent
            machineParent.SetActive(false)
            local mechanicsParent = machine.MechanicsParent
            mechanicsParent.SetActive(true)
            local mechanicsPrefab = BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject)
            self.State.MechanicsPrefab = mechanicsPrefab
            self.State.MechanicsPrefab.SetActive(false)
            System.Print("{{machineName}}BaseGameMachine{{mechanicName}}Mechanic:Initialize mechanicsPrefab={0}", self.State.MechanicsPrefab.name)
        end
    end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:StartMachine(machine)
    series
        do
            self:_ShowMachine(machine)
            machine:StartMachine()
            self:_StartMechanic(machine)
            self:_ShowMechanicPreview(machine)
            self:ShowSettingsDefault(machine, self.State.MainLobbyScene)
        end
    end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:_ShowMachine(machine)
    local machineParent = machine.MachineParent
    machineParent.SetActive(true)
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:_StartMechanic(machine)
   series
      do
         self.State.MechanicsPrefab.SetActive(true)
         BettrVisualsController.FireballMoveTo(nil, self.State.MechanicsPrefab, 20, 1, false)
      end
   end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:_ShowMechanicPreview(machine)
   series
      do
      end
   end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:ShowSettings(machine, mainLobbyScene)
-- will call machine.ShowSettingsDefault once mechanic preview is done
    self.State.MainLobbyScene = mainLobbyScene
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:ShowSettingsDefault(machine, mainLobbyScene)
    local mainLobbyScene = self.State.MainLobbyScene
    machine:ShowSettingsDefault(mainLobbyScene)
    self.State.MainLobbyScene = nil
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:TryPaying(machine)
end


