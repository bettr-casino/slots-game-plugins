require "math"
require "Core"

{{machineName}}BaseGameMachine{{mechanicName}}Mechanic = {
    Config = {
        Machine = "{{machineName}}",
        Variant = "{{machineVariant}}",
        Experiment = "{{experimentVariant}}",
        Mechanic = "{{mechanicName}}",
    },
    State = {
        MechanicsPrefab = nil,
        MainLobbyScene = nil,
    }
}

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:Initialize(machine)
    series
        do
            local manifest = {{machineName}}.Manifest
            local prefabName = "BaseGameMachine{{mechanicName}}"
            local machineParent = machine.MachineParent
            machineParent.SetActive(false)
            local mechanicsParent = machine.MechanicsParent
            mechanicsParent.SetActive(true)
            local mechanicsPrefab = BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, prefabName, mechanicsParent.GameObject)
            self.State.MechanicsPrefab = mechanicsPrefab
            self.State.MechanicsPrefab.SetActive(false)
            System.Print("{{machineName}}BaseGameMachine{{mechanicName}}Mechanic:Initialize mechanicsPrefab={0}", self.State.MechanicsPrefab.name)
        end
    end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:StartMachine(machine)
    series
        do
            self:_ShowMachine(machine)
            machine:StartMachine()
            self:_StartMechanic(machine)
            self:_ShowMechanicPreview(machine)
            self:ShowSettingsDefault(machine, self.State.MainLobbyScene)
        end
    end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:_ShowMachine(machine)
    local machineParent = machine.MachineParent
    machineParent.SetActive(true)
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:_StartMechanic(machine)
   series
      do
         self.State.MechanicsPrefab.SetActive(true)
      end
   end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:_ShowMechanicPreview(machine)
    series
        do
            local reelCount = {{machineName}}BaseGameLayout.ReelCount.First.Value
            local firstReelID = "Reel1"
            local lastReelID = "Reel" .. reelCount
            self:_PlayMechanic(firstReelID, lastReelID)
        end
    end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:_PlayMechanic(reelID1, reelID2)
   series
      do
         self.State.MechanicsPrefab.SetActive(true)
         local reelCount = {{machineName}}BaseGameLayout.ReelCount.First.Value
         BettrVisualsController.FireballMoveTo(nil, self.State.MechanicsPrefab, 20, 1, false)
         local visibleSymbolCount = BettrMechanicsController.GetReelVisibleSymbolCount(self.Config.Machine, reelID1)
         for i = 0, visibleSymbolCount-1 parallel do
             local symbol = BettrMechanicsController.GetReelVisibleSymbol(self.Config.Machine, reelID1, i)
             local symbolGroup = BettrMechanicsController.GetReelVisibleSymbolGroup(self.Config.Machine, reelID1, i)
             local symbolCurrentKey = symbolGroup.CurrentKey
             local otherSymbol = BettrMechanicsController.GetReelVisibleSymbol(self.Config.Machine, reelID2, i)
             local otherSymbolGroup = BettrMechanicsController.GetReelVisibleSymbolGroup(self.Config.Machine, reelID2, i)
             local otherSymbolCurrentKey = otherSymbolGroup.CurrentKey
             BettrVisualsController.FireballMoveTo(self.State.MechanicsPrefab, otherSymbol.gameObject, 20, 1, true)
             parallel
                do
                    BettrVisualsController.FireballMoveTo(nil, self.State.MechanicsPrefab, 20, 1, false)
                end
                do
                    BettrVisualsController.FireballMoveTo(nil, otherSymbol.gameObject, 20, 1, false)
                end
                do
                    BettrVisualsController.FireballMoveTo(self.State.MechanicsPrefab, symbol.gameObject, 20, 1, true)
                end
             end
             parallel
                 do
                    BettrVisualsController.FireballMoveTo(nil, self.State.MechanicsPrefab, 20, 4, false)
                 end
                 do
                     BettrVisualsController.FireballMoveTo(nil, symbol.gameObject, 20, 1, false)
                     BettrVisualsController.CloneAndTweenGameObject(symbol.gameObject, otherSymbol.gameObject, 2, true, -10, true)
                     symbolGroup.SetCurrentActive(otherSymbolCurrentKey)
                 end
                 do
                     BettrVisualsController.FireballMoveTo(nil, otherSymbol.gameObject, 20, 1, false)
                     BettrVisualsController.CloneAndTweenGameObject(otherSymbol.gameObject, symbol.gameObject, 2, true, -20, true)
                     otherSymbolGroup.SetCurrentActive(symbolCurrentKey)
                 end
             end
         end
         self.State.MechanicsPrefab.SetActive(false)
      end
   end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:ShowSettings(machine, mainLobbyScene)
-- will call machine.ShowSettingsDefault once mechanic preview is done
    self.State.MainLobbyScene = mainLobbyScene
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:ShowSettingsDefault(machine, mainLobbyScene)
    local mainLobbyScene = self.State.MainLobbyScene
    machine:ShowSettingsDefault(mainLobbyScene)
    self.State.MainLobbyScene = nil
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:TryPaying(machine)
-- TryPaying flow will be resumed after mechanic visual is done
    if self:_IsMechanicActive(machine) then
        return 0
    end
    return machine.Mechanics.WaysMechanic:TryPaying()
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:_IsMechanicActive(machine)
    local summary = BettrMathController.GetBaseGameMechanicSummary(self.Config.Machine, self.Config.Mechanic)
    local numShifts = summary.NumShifts
    return numShifts > 0
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:OnBaseGameSpinCompleted(machine)
    series
        do
            if self:_IsMechanicActive(machine) then
                self:_PlayMechanics()
                local coinsPaid = machine.Mechanics.WaysMechanic:TryPaying(machine)
                if coinsPaid > 0 then
                    BettrVisualsController.FireballTornadoAt(self.State.MechanicsPrefab, 20, 4)
                    machine.Mechanics:BaseGamePayout(machine)
                    machine:OnPayingCompleted()
                    if machine.Mechanics.CascadingReelsMechanic ~= nil and machine.Mechanics.CascadingReelsMechanic:HasCascade(machine) then
                        machine.Mechanics.CascadingReelsMechanic:StartCascade(machine)
                    end
                end
                self:_ResetMechanics()
                machine:OnBaseGameSpinCompleted()
            else
                machine:OnBaseGameSpinCompleted()
            end
        end
    end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:_PlayMechanics()
    local reelCount = {{machineName}}BaseGameLayout.ReelCount.First.Value
    local summary = BettrMathController.GetBaseGameMechanicSummary(self.Config.Machine, self.Config.Mechanic)
    local numShifts = summary.NumShifts
    if numShifts > 0 then
        for i=1,numShifts do
            local matrix = BettrMathController.GetBaseGameMechanicMatrix(self.Config.Machine, self.Config.Mechanic, "Shift" .. i)
            for j=1,#matrix do
                local matrixRow = matrix[j]
                self:_PlayMechanic(matrixRow.ReelID2, matrixRow.ReelID1)
            end
        end
    end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:_ResetMechanics()
    local summary = BettrMathController.GetBaseGameMechanicSummary(self.Config.Machine, self.Config.Mechanic)
    local numShifts = summary.NumShifts
    if numShifts > 0 then
        for i=1,numShifts do
            local matrix = BettrMathController.GetBaseGameMechanicMatrix(self.Config.Machine, self.Config.Mechanic, "Shift" .. i)
            for j=1,#matrix do
                local matrixRow = matrix[j]
                local reelID1 = matrixRow.ReelID1
                local reelID2 = matrixRow.ReelID2
                local reel1 = _G["{{machineName}}BaseGame" .. reelID1]
                local reel2 = _G["{{machineName}}BaseGame" .. reelID2]
                BettrMechanicsController.SwapReelsForSpin(reel1, reel2)
            end
        end
    end
end

function {{machineName}}BaseGameMachine{{mechanicName}}Mechanic:ApplyOutcomeReceived(machine)
    series
        do        
            local summary = BettrMathController.GetBaseGameMechanicSummary(self.Config.Machine, self.Config.Mechanic)
            local numShifts = summary.NumShifts
            System.Print("{{machineName}}BaseGameReel{{mechanicName}}Mechanic:OnOutcomeReceived reelID={0} numShifts={1}", thisReelID, numShifts)
            if numShifts > 0 then
                for i=1,numShifts do
                    if otherReelID ~= nil then
                        break
                    end
                    local matrix = BettrMathController.GetBaseGameMechanicMatrix(self.Config.Machine, self.Config.Mechanic, "Shift" .. i)
                    for j=1,#matrix do
                        local matrixRow = matrix[j]
                        local matrixRow = matrix[j]
                        local reelID1 = matrixRow.ReelID1
                        local reelID2 = matrixRow.ReelID2
                        local reel1 = _G["{{machineName}}BaseGame" .. reelID1]
                        local reel2 = _G["{{machineName}}BaseGame" .. reelID2]
                        BettrMechanicsController.SwapReelsForSpin(reel1, reel2)
                    end
                end
            end
            machine:OnApplyOutcomeReceived()
        end
    end
end

