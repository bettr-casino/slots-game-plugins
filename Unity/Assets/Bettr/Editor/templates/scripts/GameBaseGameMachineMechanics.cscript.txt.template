require "math"
require "Core"
{{for mechanic in baseGameMechanics}}
require "{{machineName}}BaseGameMachine{{mechanic}}Mechanic"
{{end}}

{{machineName}}BaseGameMachineMechanics = {
{{for mechanic in baseGameMechanics}}
    {{mechanic}}Mechanic = nil,
{{end}}
}

function {{machineName}}BaseGameMachineMechanics:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function {{machineName}}BaseGameMachineMechanics:OnError(callStack)
	System.Error("BaseGameMachineMechanics Error CallStack: {0}", callStack)
end

function {{machineName}}BaseGameMachineMechanics:Initialize(machine)
{{for mechanic in baseGameMechanics}}
    self.{{mechanic}}Mechanic = {{machineName}}BaseGameMachine{{mechanic}}Mechanic:new()
    self.{{mechanic}}Mechanic:Initialize(machine)
{{end}}
end

function {{machineName}}BaseGameMachineMechanics:BaseGamePayout(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.WaysMechanic ~= nil then
       self.WaysMechanic:BaseGamePayout(machine)
    elseif self.CascadingReelsMechanic ~= nil then
       self.CascadingReelsMechanic:BaseGamePayout(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:BaseGamePayout(machine)
    end
end

function {{machineName}}BaseGameMachineMechanics:TryPaying(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.WaysMechanic ~= nil then
       self.WaysMechanic:TryPaying(machine)
    elseif self.CascadingReelsMechanic ~= nil then
       self.CascadingReelsMechanic:TryPaying(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:TryPaying(machine)
    end
end

function {{machineName}}BaseGameMachineMechanics:OnPayingCompleted(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.CascadingReelsMechanic ~= nil then
       self.CascadingReelsMechanic:OnPayingCompleted(machine)
    elseif self.WaysMechanic ~= nil then
       self.WaysMechanic:OnPayingCompleted(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:OnPayingCompleted(machine)
    end
end

function {{machineName}}BaseGameMachineMechanics:RollupCredits(machine)
    -- this is hardcoded
    -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
    if self.CascadingReelsMechanic ~= nil then
       self.CascadingReelsMechanic:RollupCredits(machine)
    elseif self.WaysMechanic ~= nil then
       self.WaysMechanic:RollupCredits(machine)
    elseif self.PaylinesMechanic ~= nil then
       self.PaylinesMechanic:RollupCredits(machine)
    end
end

function {{machineName}}BaseGameMachineMechanics:OnBaseGameSpinCompleted(machine)
    series
        do
            -- this is hardcoded
            -- the highest priority mechanic will take precedence and take the role of the mediator for orchestrating this function
            if self.CascadingReelsMechanic ~= nil then
               self.CascadingReelsMechanic:OnBaseGameSpinCompleted(machine)
            elseif self.WaysMechanic ~= nil then
               self.WaysMechanic:OnBaseGameSpinCompleted(machine)
            elseif self.PaylinesMechanic ~= nil then
               self.PaylinesMechanic:OnBaseGameSpinCompleted(machine)
            end 
        end
    end
end
