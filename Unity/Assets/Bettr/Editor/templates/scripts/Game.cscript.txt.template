require "math"
require "Core"

{{machineName}} = {
    Manifest = {        
        BundleName = "{{bundleName}}",
        BundleVersion = "{{bundleVersion}}",
        {{- for machine in machines }}
        {{ machine}}BackgroundPrefabName = "{{machineName}}{{machine}}Background",
        {{ machine}}MachinePrefabName = "{{machineName}}{{machine}}Machine",
        {{- end }}
    }
}

function {{machineName}}:new(o)
	o = o or {}
	setmetatable(o, self)
	self.__index = self
	return o
end

function {{machineName}}:destroy()
	System.Print("{{machineName}} destroy tile id={0}", self.id)
end

function {{machineName}}:OnError(callStack)
	System.Error("{{machineName}} Error CallStack: {0}", callStack)
end

function {{machineName}}:Awake()
	System.Print("{{machineName}} Awake tile id={0}", self.id)
end

function {{machineName}}:Start()
    series
        do
            BettrVisualsController.SwitchOrientationToLandscape()
        end
        do
            {{machineName}}BaseGameBackground:StartBackground()
        end
        do
            BettrAudioController.LoadBackgroundAudio("{{machineName}}{{machineVariant}}")
        end
        do
            BettrAudioController.PlayGameAudioLoop("{{machineName}}{{machineVariant}}", "{{experimentVariant}}", "{{machineName}}{{machineVariant}}BackgroundMusic")       
        end
        do
            BettrVideoController.LoadBackgroundVideo({{machineName}}BaseGameBackground, "{{machineName}}", "{{machineVariant}}", "{{experimentVariant}}")
        end        
        do
            BettrVideoController.PlayBackgroundVideo({{machineName}}BaseGameBackground, "{{machineName}}", "{{machineVariant}}", "{{experimentVariant}}")
        end
        do
            System.Print("{{machineName}}:Start Load Machine Prefabs tile id={0}", self.id)
            {{- for machine in machines }}
            self:Load{{machine}}Prefab()
            {{- end }}
        end
        do
            self:SetBaseGameActive(true)
        end
    end
end

function {{machineName}}:LoadBaseGameBackgroundPrefab()
    series
        do
            System.Print("{{machineName}}:LoadBaseGameBackgroundPrefab tile id={0}", self.id)
            local manifest = self.Manifest
            local backgroundParentProperty = self.BaseGameBackgroundParent
            local backgroundParent = backgroundParentProperty["Pivot"]                        
            BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, manifest.BaseGameBackgroundPrefabName, backgroundParent)
        end
    end
end

function {{machineName}}:LoadBaseGamePrefab()
    series
        do            
            local manifest = self.Manifest
            local baseGameMachineParentProperty = self.BaseGameMachineParent
            local baseGameMachineParent = baseGameMachineParentProperty["Pivot"]
            BettrAssetController.LoadPrefab(manifest.BundleName, manifest.BundleVersion, manifest.BaseGameMachinePrefabName, baseGameMachineParent)
        end
    end
end

function {{machineName}}:SetBaseGameActive(active)
    if active then
        self.BaseGameMachineParent.SetActive(true)
        {{machineName}}MachineState.Current.First.ActiveGame = "BaseGame"
    else
        self.BaseGameMachineParent.SetActive(false)
    end
end

function {{machineName}}:ActiveGame()
    return {{machineName}}MachineState.Current.First.ActiveGame
end

function {{machineName}}:OnBecameVisible()
	System.Print("{{machineName}} OnBecameVisible tile id={0}", self.id)
end

function {{machineName}}:OnPointerClick()
	System.Print("{{machineName}} OnPointerClick tile id={0}", self.id)
end

function {{machineName}}:OnPointerClick1Param(param)
	System.Print("{{machineName}} OnPointerClick1Param param={0} tile id={1}", param, self.id)
end

return {{machineName}}:new()