function openRunSimulatorDialog() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet();
  var gameId = sheet.getRange('A1').getValues()[0];
  openDialog("run_simulator", "Confirm simulator run", gameId)
}

function openDialog(action, message, gameId) {
  var template = HtmlService.createTemplateFromFile('Page');
  template.message = message;
  template.action = action;
  template.game = gameId;
  
  var html = template.evaluate()
      .setWidth(400)
      .setHeight(300);
      
  SpreadsheetApp.getUi().showModalDialog(html, 'Confirmation');
  
}

function confirmAction(action, game) {
  bettrGet(action, game);
  var ui = SpreadsheetApp.getUi();
  ui.alert('Action ' + action + ' confirmed!');
  google.script.host.close();
}

function showResults(data) {
  // Get the spreadsheet and the named range
  var sheet = SpreadsheetApp.getActiveSpreadsheet();
  var range = sheet.getRangeByName("SimulatorRuns");
  var values = range.getValues();

  // Find the last row with data in the named range
  var lastRowIndex = values.length - 1;
  while (lastRowIndex >= 0 && !values[lastRowIndex][0]) {
    lastRowIndex--;
  }
  
  // Get the last RunId and increment it
  var lastRunId = values[lastRowIndex][0];
  var newRunId = lastRunId + 1;

  // Get the current date in DD-MM-YYYY HH24:MM format
  var date = new Date();
  var formattedDate = Utilities.formatDate(date, Session.getScriptTimeZone(), "dd-MM-yyyy HH:mm");
  
  // Append new row with new RunId, current date, and results
  var newRow = [newRunId, formattedDate, data.results]; // assuming results is a field in your JSON response
  sheet.getRange(range.getRow() + lastRowIndex + 2, range.getColumn(), 1, newRow.length).setValues([newRow]);

  // Update the named range to include the new row
  var newRange = sheet.getRange(range.getRow(), range.getColumn(), range.getNumRows() + 1, range.getNumColumns());
  sheet.setNamedRange('SimulatorRuns', newRange);

  // You might want to update the response to a specific cell or range, not just A1
  sheet.getRange('H2').setValue(json); 
}


function bettrGet(action, game) {  
  var spreadsheetId = SpreadsheetApp.getActiveSpreadsheet().getId();
  var url = 'https://api.bettr.casino/endpoint?spreadsheetId=' 
                + encodeURIComponent(spreadsheetId) 
                + '&game=' + encodeURIComponent(game) 
                + '&action=' + encodeURIComponent(action); // Add the spreadsheet ID as a query parameter
  
  var params = {
    'method': 'get',
    'headers': {
      'Content-Type': 'application/json'
    }
  };
  
  var response = UrlFetchApp.fetch(url, params);
  
  // Parse the JSON response
  var json = response.getContentText();
  var data = JSON.parse(json);

  showResults(data);
}

function addNamedRanges() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheets = spreadsheet.getSheets();

  console.log(`processing spreadsheet ${spreadsheet.getName()}`);

  // Step 1: Delete all named ranges
  var namedRanges = spreadsheet.getNamedRanges();
  namedRanges.forEach(function(namedRange) {
    namedRange.remove();
  });

  // For every sheet
  sheets.forEach(function(sheet) {
    // Step 2: Check Cell A1
    var cellA1 = sheet.getRange("A1").getValue();
    if (cellA1 !== "NOT_READY") {
      var sheetName = sheet.getName();
      console.log(`processing sheet ${sheetName}`);
      // Step 3: Search for cells with text prefix matching the spreadsheet title
      var dataRange = sheet.getDataRange();
      var title = spreadsheet.getName();
      var textFinder = dataRange.createTextFinder(title).matchEntireCell(false);
      var foundCells = textFinder.findAll();
      if (foundCells.length > 0) {
        for (var i = 0; i < foundCells.length; i++) {
          var cell = foundCells[i];
          var tableRangeName = cell.getValue();
          if (sheetName.startsWith("Test")) {
            tableRangeName = sheetName + "__" + cell.getValue();
          } else if (!tableRangeName.startsWith(title)) {
            tableRangeName = title + cell.getValue();
          }

          // Step 4: Locate the cells immediately below and to the right that are colored
          var lastRow = sheet.getLastRow();
          var lastColumn = sheet.getLastColumn();
          var tableRange = null;

          var prefixCellRow = cell.getRow();
          var prefixCellCol = cell.getColumn();

          var minRow = prefixCellRow + 1;
          var maxRow = minRow;

          var minCol = prefixCellCol;
          var maxCol = minCol;

          for (var r = minRow; r <= lastRow; r++) {
            var range = sheet.getRange(r, prefixCellCol);
            if (range.getBackground() == "#ffffff") {
              break
            }
            maxRow += 1;
          }

          for (var c = minCol; c <= lastColumn; c++) {
            var range = sheet.getRange(minRow, c);
            if (range.getBackground() == "#ffffff") {
              break
            }
            maxCol += 1;
          }

          // Create a new range based on the minimum and maximum indices
          if (minRow < maxRow && minCol < maxCol) {
            tableRange = sheet.getRange(minRow, minCol, maxRow - minRow, maxCol - minCol);
            // Step 5: Create a new named range
            if (tableRange) {
              spreadsheet.setNamedRange(tableRangeName, tableRange);
            }
          }          

        }
      }
    }
  });
}

